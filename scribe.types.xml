<haxe>
	<class path="Array" params="T" file="/usr/lib/haxe/std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end	of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` exceeds or equals `pos`,
		the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.sort.MergeSort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, the result is the empty
		Array [].

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use Std.string() to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed acoordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurense of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurense of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<map public="1" params="S" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.</haxe_doc>
	</class>
	<abstract path="Class" params="T" file="/usr/lib/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="cpp.Lib" params="" file="/usr/lib/haxe/std/cpp/Lib.hx">
		<load public="1" set="method" line="29" static="1">
			<f a="lib:prim:nargs">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Load and return a Cpp primitive from a DLL library.</haxe_doc>
		</load>
		<loadLazy public="1" set="method" line="48" static="1">
			<f a="lib:prim:nargs">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Tries to load, and always returns a valid function, but the function may throw
		if called.</haxe_doc>
		</loadLazy>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="EReg" params="" file="/usr/lib/haxe/std/cpp/_std/EReg.hx">
		<regexp_new_options line="174" static="1"><f a=":">
	<c path="String"/>
	<c path="String"/>
	<d/>
</f></regexp_new_options>
		<regexp_match line="175" static="1"><f a=":::">
	<d/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></regexp_match>
		<regexp_matched_pos line="177" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<a>
		<pos><x path="Int"/></pos>
		<len><x path="Int"/></len>
	</a>
</f></regexp_matched_pos>
		<r><d/></r>
		<global><x path="Bool"/></global>
		<replace public="1" set="method" line="98">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces the first substring of `s` which `this` EReg matches with `by`.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `by` contains `$1` to `$9`, the digit corresponds to number of a
		matched sub-group and its value is used instead. If no such sub-group
		exists, the replacement is unspecified. The string `$$` becomes `$`.

		If `s` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<new public="1" set="method" line="28">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc>The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax ~/pattern/modifier

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	http://haxe.org/doc/cross/regexp</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Enum" params="T" file="/usr/lib/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/usr/lib/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="Lambda" params="" file="/usr/lib/haxe/std/Lambda.hx">
		<has public="1" params="A" set="method" line="98" static="1">
			<f a="it:elt">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains `elt`.

		This function returns true as soon as an element is found which is equal
		to `elt` according to the `==` operator.

		If no such element is found, the result is false.</haxe_doc>
		</has>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with 'using Lambda' and then acts as an
	extension to Iterable types.

	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="List" params="T" file="/usr/lib/haxe/std/List.hx">
		<h><c path="Array"><d/></c></h>
		<q><c path="Array"><d/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="49">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<iterator public="1" set="method" line="161">
			<f a=""><t path="Iterator"><c path="List.T"/></t></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<new public="1" set="method" line="40">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole array content every time.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.App" params="" file="/Users/sven/dev/snow/snow/App.hx">
		<app public="1">
			<c path="snow.Snow"/>
			<haxe_doc>use this to access the api features. *i.e* `app.assets.text(_id)`</haxe_doc>
		</app>
		<timescale public="1">
			<x path="Float"/>
			<haxe_doc>the scale of time</haxe_doc>
		</timescale>
		<fixed_delta public="1">
			<x path="Float"/>
			<haxe_doc>if this is non zero this will be passed in</haxe_doc>
		</fixed_delta>
		<render_rate public="1">
			<x path="Float"/>
			<haxe_doc>if this is non zero, rendering will be forced to this rate</haxe_doc>
		</render_rate>
		<update_rate public="1">
			<x path="Float"/>
			<haxe_doc>if this is non zero, updates will be forced to this rate</haxe_doc>
		</update_rate>
		<max_frame_time public="1">
			<x path="Float"/>
			<haxe_doc>the maximum frame time</haxe_doc>
		</max_frame_time>
		<delta_time public="1">
			<x path="Float"/>
			<haxe_doc>the time the last frame took to run</haxe_doc>
		</delta_time>
		<delta_sim public="1">
			<x path="Float"/>
			<haxe_doc>the simulated time the last frame took to run, relative to scale etc</haxe_doc>
		</delta_sim>
		<last_frame_start public="1">
			<x path="Float"/>
			<haxe_doc>the start time of the last frame</haxe_doc>
		</last_frame_start>
		<current_time public="1">
			<x path="Float"/>
			<haxe_doc>the current simulation time</haxe_doc>
		</current_time>
		<cur_frame_start public="1">
			<x path="Float"/>
			<haxe_doc>the start time of this frame</haxe_doc>
		</cur_frame_start>
		<alpha public="1">
			<x path="Float"/>
			<haxe_doc>the alpha time for a render between frame updates</haxe_doc>
		</alpha>
		<next_tick>
			<x path="Float"/>
			<haxe_doc>for update_rate, the time when the next tick should occur around</haxe_doc>
		</next_tick>
		<next_render>
			<x path="Float"/>
			<haxe_doc>for update_rate, the time when the next tick should occur around</haxe_doc>
		</next_render>
		<config public="1" set="method" line="59">
			<f a="config">
				<t path="snow.types.AppConfig"/>
				<t path="snow.types.AppConfig"/>
			</f>
			<haxe_doc>Called by snow to request config changes, override this to change the defaults.
            This happens before ready, so the values are available when ready is called.</haxe_doc>
		</config>
		<ready public="1" set="method" line="61">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Your entry point. Called for you when you can initialize your application</haxe_doc>
		</ready>
		<update public="1" set="method" line="63">
			<f a="dt">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Your update loop. Called every frame for you. The dt value depends on the timing configuration (see the {App Guide})</haxe_doc>
		</update>
		<ondestroy public="1" set="method" line="65">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Your exit point. Called for you when you should shut down your application</haxe_doc>
		</ondestroy>
		<onevent public="1" set="method" line="67">
			<f a="event">
				<t path="snow.types.SystemEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Low level event handler from snow core. Often handled by the subsystems so check there first.</haxe_doc>
		</onevent>
		<onkeydown public="1" set="method" line="70">
			<f a="keycode:scancode:repeat:mod:timestamp:window_id">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<t path="snow.types.ModState"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a key is pressed down</haxe_doc>
		</onkeydown>
		<onkeyup public="1" set="method" line="72">
			<f a="keycode:scancode:repeat:mod:timestamp:window_id">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<t path="snow.types.ModState"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a key is released</haxe_doc>
		</onkeyup>
		<ontextinput public="1" set="method" line="74">
			<f a="text:start:length:type:timestamp:window_id">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<e path="snow.types.TextEventType"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when text input is happening. Use this for textfields, as it handles the complexity of unicode etc.</haxe_doc>
		</ontextinput>
		<onmousedown public="1" set="method" line="77">
			<f a="x:y:button:timestamp:window_id">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a mouse button is pressed</haxe_doc>
		</onmousedown>
		<onmouseup public="1" set="method" line="79">
			<f a="x:y:button:timestamp:window_id">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a mouse button is released</haxe_doc>
		</onmouseup>
		<onmousewheel public="1" set="method" line="81">
			<f a="x:y:timestamp:window_id">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when the mouse wheel moves</haxe_doc>
		</onmousewheel>
		<onmousemove public="1" set="method" line="83">
			<f a="x:y:xrel:yrel:timestamp:window_id">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when the mouse moves</haxe_doc>
		</onmousemove>
		<ontouchdown public="1" set="method" line="86">
			<f a="x:y:touch_id:timestamp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a touch is released, use the `touch_id` to track which</haxe_doc>
		</ontouchdown>
		<ontouchup public="1" set="method" line="88">
			<f a="x:y:touch_id:timestamp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a touch is first pressed, use the `touch_id` to track which</haxe_doc>
		</ontouchup>
		<ontouchmove public="1" set="method" line="90">
			<f a="x:y:dx:dy:touch_id:timestamp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a touch is moved, use the `touch_id` to track which</haxe_doc>
		</ontouchmove>
		<ongamepadaxis public="1" set="method" line="93">
			<f a="gamepad:axis:value:timestamp">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a connected gamepad axis moves, use `which` to determine gamepad id</haxe_doc>
		</ongamepadaxis>
		<ongamepaddown public="1" set="method" line="95">
			<f a="gamepad:button:value:timestamp">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a connected gamepad button is pressed, use `which` to determine gamepad id</haxe_doc>
		</ongamepaddown>
		<ongamepadup public="1" set="method" line="97">
			<f a="gamepad:button:value:timestamp">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a connected gamepad button is released, use `which` to determine gamepad id</haxe_doc>
		</ongamepadup>
		<ongamepaddevice public="1" set="method" line="99">
			<f a="gamepad:type:timestamp">
				<x path="Int"/>
				<e path="snow.types.GamepadDeviceEventType"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a gamepad is connected or disconnected, use `which` to determine gamepad id</haxe_doc>
		</ongamepaddevice>
		<on_internal_init public="1" set="method" line="107">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</on_internal_init>
		<on_internal_update public="1" set="method" line="116">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</on_internal_update>
		<new public="1" set="method" line="56">
			<f a=""><x path="Void"/></f>
			<haxe_doc>The default constructor of an App is empty, so you can override it if you want, but take note that this happens way before snow is ready for use. Use [ready](#ready) for entry point.</haxe_doc>
		</new>
		<haxe_doc>The default type of snow application, with variable delta, update limit, render limit, timescale and more. 
    See the {App Guide} for complete details.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.AppFixedTimestep" params="" file="/Users/sven/dev/snow/snow/App.hx" module="snow.App">
		<extends path="snow.App"/>
		<frame_time public="1">
			<x path="Float"/>
			<haxe_doc>fixed simulation update speed</haxe_doc>
		</frame_time>
		<overflow public="1">
			<x path="Float"/>
			<haxe_doc>the overflow of the updates. This is used internally, for you, to calculate the alpha time for rendering interpolation as follows `alpha = overflow / frame_time;`</haxe_doc>
		</overflow>
		<on_internal_init public="1" set="method" line="179" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</on_internal_init>
		<on_internal_update public="1" set="method" line="190" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</on_internal_update>
		<new public="1" set="method" line="171"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Read the {App Guide} for full info, and for even more information see : http://gafferongames.com/game-physics/fix-your-timestep/
    this stores and calculates a fixed game update loop, and rendering interpolation is required
    for smooth updates between frames.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Main" params="" file="src/Main.hx">
		<extends path="snow.AppFixedTimestep"/>
		<imageUniform><t path="snow.render.opengl.GLUniformLocation"/></imageUniform>
		<modelViewMatrixUniform><t path="snow.render.opengl.GLUniformLocation"/></modelViewMatrixUniform>
		<projectionMatrixUniform><t path="snow.render.opengl.GLUniformLocation"/></projectionMatrixUniform>
		<shaderProgram><t path="snow.render.opengl.GLProgram"/></shaderProgram>
		<texCoordAttribute><x path="Int"/></texCoordAttribute>
		<texCoordBuffer><t path="snow.render.opengl.GLBuffer"/></texCoordBuffer>
		<vertexAttribute><x path="Int"/></vertexAttribute>
		<vertexBuffer><t path="snow.render.opengl.GLBuffer"/></vertexBuffer>
		<textures><c path="Array"><t path="snow.render.opengl.GLTexture"/></c></textures>
		<current_texture><t path="snow.render.opengl.GLTexture"/></current_texture>
		<tex_index><x path="Int"/></tex_index>
		<files><c path="Array"><c path="String"/></c></files>
		<size><x path="Int"/></size>
		<texture_time><x path="Float"/></texture_time>
		<positionX><x path="Float"/></positionX>
		<positionY><x path="Float"/></positionY>
		<dirX><x path="Float"/></dirX>
		<speed><x path="Float"/></speed>
		<projectionMatrix><t path="snow.utils.Float32Array"/></projectionMatrix>
		<modelViewMatrix><t path="snow.utils.Float32Array"/></modelViewMatrix>
		<sound1><t path="snow.audio.Sound"/></sound1>
		<sound2><t path="snow.audio.Sound"/></sound2>
		<sound3><t path="snow.audio.Sound"/></sound3>
		<sound5><t path="snow.audio.Sound"/></sound5>
		<left><x path="Bool"/></left>
		<config public="1" set="method" line="57" override="1"><f a="config">
	<t path="snow.types.AppConfig"/>
	<t path="snow.types.AppConfig"/>
</f></config>
		<onevent public="1" set="method" line="76" override="1"><f a="_event">
	<t path="snow.types.SystemEvent"/>
	<x path="Void"/>
</f></onevent>
		<ready public="1" set="method" line="85" override="1"><f a=""><x path="Void"/></f></ready>
		<vsync><x path="Bool"/></vsync>
		<cursor><x path="Bool"/></cursor>
		<window2><c path="snow.window.Window"/></window2>
		<loope><x path="Bool"/></loope>
		<showing_keyboard><x path="Bool"/></showing_keyboard>
		<onkeydown public="1" set="method" line="198" override="1"><f a="keycode:_:_:_:_:_">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<t path="snow.types.ModState"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></onkeydown>
		<onkeyup public="1" set="method" line="313" override="1"><f a="keycode:_:_:mod:_:_">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<t path="snow.types.ModState"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></onkeyup>
		<noclamp><x path="Bool"/></noclamp>
		<ontextinput public="1" set="method" line="340" override="1"><f a="text:start:length:type:timestamp:window_id">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="snow.types.TextEventType"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></ontextinput>
		<ontouchdown public="1" set="method" line="344" override="1"><f a="x:y:touch_id:timestamp">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></ontouchdown>
		<ontouchup public="1" set="method" line="348" override="1"><f a="x:y:touch_id:timestamp">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></ontouchup>
		<ontouchmove public="1" set="method" line="357" override="1"><f a="x:y:dx:dy:touch_id:timestamp">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></ontouchmove>
		<onmousemove public="1" set="method" line="379" override="1"><f a="x:y:xrel:yrel:timestamp:window_id">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></onmousemove>
		<onmouseup public="1" set="method" line="391" override="1"><f a="x:y:button:timestamp:window_id">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></onmouseup>
		<onmousedown public="1" set="method" line="403" override="1"><f a="x:y:button:timestamp:window_id">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></onmousedown>
		<onmousewheel public="1" set="method" line="407" override="1"><f a="x:y:timestamp:window_id">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></onmousewheel>
		<ongamepadaxis public="1" set="method" line="412" override="1"><f a="gamepad:axis:value:timestamp">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></ongamepadaxis>
		<ongamepadup public="1" set="method" line="418" override="1"><f a="gamepad:button:value:timestamp">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></ongamepadup>
		<ongamepaddown public="1" set="method" line="422" override="1"><f a="gamepad:button:value:timestamp">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></ongamepaddown>
		<ongamepaddevice public="1" set="method" line="426" override="1"><f a="gamepad:type:timestamp">
	<x path="Int"/>
	<e path="snow.types.GamepadDeviceEventType"/>
	<x path="Float"/>
	<x path="Void"/>
</f></ongamepaddevice>
		<next_tex_tick><x path="Float"/></next_tex_tick>
		<phys_posx><x path="Float"/></phys_posx>
		<update public="1" set="method" line="434" override="1"><f a="delta">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<onrender set="method" line="489"><f a="window">
	<c path="snow.window.Window"/>
	<x path="Void"/>
</f></onrender>
		<createTexture set="method" line="514"><f a="asset">
	<c path="snow.assets.AssetImage"/>
	<t path="snow.render.opengl.GLTexture"/>
</f></createTexture>
		<initializeShaders set="method" line="528"><f a=""><x path="Void"/></f></initializeShaders>
		<createBuffers set="method" line="619"><f a=""><x path="Void"/></f></createBuffers>
		<render set="method" line="651"><f a=""><x path="Void"/></f></render>
		<createOrthoMatrix set="method" line="691"><f a="x0:x1:y0:y1:zNear:zFar">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<t path="snow.utils.Float32Array"/>
</f></createOrthoMatrix>
		<create2DMatrix set="method" line="706"><f a="x:y:?scale:?rotation" v="::1:0">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<t path="snow.utils.Float32Array"/>
</f></create2DMatrix>
		<new public="1" set="method" line="21"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="Map" params="K:V" file="/usr/lib/haxe/std/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="IMap">
	<c path="Map.K"/>
	<c path="Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="Map.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="Map.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="Map.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="Map.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `key1 => value1, key2 => value2` syntax.

	Map is an abstract type, it is not available at runtime.]]></haxe_doc>
		<meta><m n=":multiType"><e>K</e></m></meta>
		<impl><class path="_Map.Map_Impl_" params="" file="/usr/lib/haxe/std/Map.hx" private="1" module="Map"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="IMap" params="K:V" file="/usr/lib/haxe/std/Map.hx" module="Map" interface="1">
		<set public="1" set="method"><f a="k:v">
	<c path="IMap.K"/>
	<c path="IMap.V"/>
	<x path="Void"/>
</f></set>
		<remove public="1" set="method"><f a="k">
	<c path="IMap.K"/>
	<x path="Bool"/>
</f></remove>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="_Map.Hashable" params="" file="/usr/lib/haxe/std/Map.hx" private="1" module="Map"><a><hashCode set="method"><f a=""><x path="Int"/></f></hashCode></a></typedef>
	<class path="Math" params="" file="/usr/lib/haxe/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter, 
		specified by the constant, π. `PI` is approximately 3.141592653589793.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.

		For example, this is the result of -1.0 / 0.0.

		Operations with NEGATIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. 

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.

		For example, this is the result of 1.0 / 0.0.

		Operations with POSITIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. 

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes an invalid number.

		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).

		All further operations with NaN as an operand will result in NaN.

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.

		In order to test if a value is NaN, you should use Math.isNaN() function.

		@php In PHP versions prior to 5.3.1 VC 9 there may be unexpected
		results when performing arithmetic operations with NaN on Windows, 
		see [https://bugs.php.net/bug.php?id=42143]</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		If `v` is positive or 0, the result is unchanged. Otherwise the result 
		is -`v`.
		
		If `v` is NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is 
		POSITIVE_INFINITY.
		
		If `v` is NaN, the result is NaN.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		If `a` or `b` are NaN, the result is NaN.
		If `a` or `b` are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.
		If `a` and `b` are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		If `a` or `b` are NaN, the result is NaN.
		If `a` or `b` are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `a` and `b` are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`, 
		in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`, 
		in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of 
		two specified numbers, in radians.
		
		If parameter `x` or `y`  is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, 
		the result is NaN.</haxe_doc>
		</atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.
		
		exp(1.0) is approximately 2.718281828459.
		
		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `v` is NEGATIVE_INFINITY, the result is 0.0.
		If `v` is NaN, the result is NaN.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.
		
		This is the mathematical inverse operation of exp, 
		i.e. `log(exp(v)) == v` always holds.
		
		If `v` is negative (including NEGATIVE_INFINITY) or NaN, the result 
		is NaN.
		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `v` is 0.0, the result is NEGATIVE_INFINITY.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.
		
		If `v` is negative (including NEGATIVE_INFINITY) or NaN, the result 
		is NaN.
		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `v` is 0.0, the result is 0.0.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.
		
		If `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY 
		or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY 
		or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY 
		or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0, 
		and less than 1.0.</haxe_doc>
		</random>
		<ffloor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`, as a Float.

		If `v` is is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, 
		the result is unspecified.</haxe_doc>
		</ffloor>
		<fceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`, as a Float.

		If `v` is is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, 
		the result is unspecified.</haxe_doc>
		</fceil>
		<fround public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value, as a Float.

		If `v` is is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, 
		the result is unspecified.</haxe_doc>
		</fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is POSITIVE_INFINITY, NEGATIVE_INFINITY or NaN, the result 
		is false, otherwise the result is true.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is NaN, the result is true, otherwise the result is false. 
		In particular, both POSITIVE_INFINITY and NEGATIVE_INFINITY are
		not considered NaN.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.</haxe_doc>
		<meta><m n=":include"><e>"hxMath"</e></m></meta>
	</class>
	<class path="Reflect" params="" file="/usr/lib/haxe/std/cpp/_std/Reflect.hx">
		<compare public="1" params="T" set="method" line="64" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<isObject public="1" set="method" line="76" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- Class<T>
		- Enum<T>

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<haxe_doc>The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="SnowApp" params="" file="bin/mac64.build/haxe/SnowApp.hx">
		<_host public="1" static="1"><c path="Main"/></_host>
		<_snow public="1" static="1"><c path="snow.Snow"/></_snow>
		<main public="1" set="method" line="11" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</main>
	</class>
	<class path="Std" params="" file="/usr/lib/haxe/std/cpp/_std/Std.hx">
		<is public="1" set="method" line="23" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Tells if a value v is of the type t. Returns false if v or t are null.</haxe_doc>
		</is>
		<instance public="1" params="T:S" set="method" line="27" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Checks if object `value` is an instance of class `c`.

		Compiles only if the class specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the class specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with interfaces or core types such
		as String, Array and Date.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</instance>
		<string public="1" set="method" line="31" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" line="35" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="39" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If the input cannot be recognized, the result is null.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="43" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a NaN value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="47" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":keep"/></meta>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard Void type. Only `null` values can be of the type `Void`.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard Float type, this is a double-precision IEEE 64bit float.

	On static targets, null cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard Int type. Its precision depends on the platform.

	On static targets, null cannot be assigned to Int. If this is necessary,
	`Null<Int>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Null" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>`Null` can be useful in two cases. In order to document some methods
	that accepts or can return a `null` value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.</haxe_doc>
	</typedef>
	<abstract path="Bool" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be true or false.

	On static targets, null cannot be assigned to Bool. If this is necessary,
	`Null<Bool>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>Dynamic is a special type which is compatible with all other types.

	Use of Dynamic should be minimized as it prevents several compiler
	checks and optimizations.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the Iterator and advances to the next one.

		This method is not required to check hasNext() first. A call to this
		method while hasNext() is false yields unspecified behavior.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns false if the iteration is complete, true otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to next(). However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An Iterator is a structure that permits iteration over elements of type T.

	Any class with matching hasNext and next fields is considered an Iterator
	and can then be used e.g. in for-loops. This makes it easy to implement
	custom iterators.</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An Iterable is a data structure which has an iterator() method.
	See `Lambda` for generic functions on iterable structures.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.</haxe_doc></class>
	<class path="String" params="" file="/usr/lib/haxe/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String ""
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, null is returned.

		To obtain the character code of a single character, "x".code can be used
		instead to inline the character code at compile time. Note that this
		only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurence of `delimiter`.

		If `this` String is the empty String "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String "", `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurence of
		`delimiter`. If `this` String starts (or ends) with [delimiter}, the
		result Array contains a leading (or trailing) empty String "" element.
		Two subsequent delimiters also result in an empty String "" element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String "" is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the string literal syntax "string value".

	String can be concatenated by using the + operator. If an operand is not a
	String, it is passed through Std.string() first.</haxe_doc>
	</class>
	<class path="StringBuf" params="" file="/usr/lib/haxe/std/cpp/_std/StringBuf.hx">
		<b><c path="Array"><c path="String"/></c></b>
		<add public="1" params="T" set="method" line="40">
			<f a="x">
				<c path="add.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the representation of `x` to `this` StringBuf.

		The exact representation of `x` may vary per platform. To get more
		consistent behavior, this function should be called with
		Std.string(x).

		If `x` is null, the String "null" is appended.</haxe_doc>
		</add>
		<new public="1" set="method" line="29">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Its cross-platform implementation uses String concatenation internally, but
	StringBuf may be optimized for different targets.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values. However, the internal buffer cannot be modified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="StringTools" params="" file="/usr/lib/haxe/std/StringTools.hx">
		<startsWith public="1" set="method" line="127" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` starts with the string `start`.

		If `start` is null, the result is unspecified.

		If `start` is the empty String "", the result is true.</haxe_doc>
		</startsWith>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	'using StringTools' and then acts as an extension to the String class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Sys" params="" file="/usr/lib/haxe/std/cpp/_std/Sys.hx">
		<print public="1" set="method" line="24" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print any value on the standard output.</haxe_doc>
		</print>
		<println public="1" set="method" line="28" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print any value on the standard output, followed by a newline</haxe_doc>
		</println>
		<sleep public="1" set="method" line="64" static="1">
			<f a="seconds">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Suspend the current execution for the given time (in seconds).</haxe_doc>
		</sleep>
		<setCwd public="1" set="method" line="76" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Change the current working directory.</haxe_doc>
		</setCwd>
		<_sleep line="136" static="1"><f a="">
	<x path="Float"/>
	<unknown/>
</f></_sleep>
		<set_cwd line="139" static="1"><f a="">
	<c path="String"/>
	<unknown/>
</f></set_cwd>
		<haxe_doc>This class gives you access to many base functionalities of system platforms. Looks in [sys] sub packages for more system APIs.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Type" params="" file="/usr/lib/haxe/std/cpp/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="35" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<haxe_doc>The haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="cpp.zip.Compress" params="" file="/usr/lib/haxe/std/cpp/zip/Compress.hx"><c path="haxe.zip.Compress"/></typedef>
	<typedef path="cpp.zip.Flush" params="" file="/usr/lib/haxe/std/cpp/zip/Flush.hx"><e path="haxe.zip.FlushMode"/></typedef>
	<typedef path="cpp.zip.Uncompress" params="" file="/usr/lib/haxe/std/cpp/zip/Uncompress.hx"><c path="haxe.zip.Uncompress"/></typedef>
	<class path="haxe.EnumTools" params="" file="/usr/lib/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="41" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If `e` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="54" static="1">
			<f a="e:constr:?params" v="::null">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="70" static="1">
			<f a="e:index:?params" v="::null">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="87" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array [] if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="99" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getConstructors>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/usr/lib/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="114" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="125" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="139" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="151" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getIndex>
	</class>
	<class path="haxe.Log" params="" file="/usr/lib/haxe/std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="45" static="1">
			<f a="v:?infos" v=":null">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the trace() call was made.

		This method can be rebound to a custom function:
			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v,infos) { // handle trace }
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to trace() will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the trace() method, which is invoked upon a call to
	trace() in haxe code.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/usr/lib/haxe/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<c path="Array"><d/></c>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>PosInfos is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	(..., ?pos:haxe.PosInfos), each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.Utf8" params="" file="/usr/lib/haxe/std/cpp/_std/haxe/Utf8.hx">
		<__s><c path="Array"><x path="Int"/></c></__s>
		<addChar public="1" set="method" line="35">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add the given UTF8 character code to the buffer.</haxe_doc>
		</addChar>
		<toString public="1" set="method" line="39">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the buffer converted to a String;</haxe_doc>
		</toString>
		<new public="1" set="method" line="29">
			<f a="?size" v="null">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allocate a new Utf8 buffer using an optional bytes size.</haxe_doc>
		</new>
		<haxe_doc>Since all platforms does not guarantee that String always uses UTF-8 encoding, you
	can use this crossplatform API to perform operations on such strings.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.crypto.Crc32" params="" file="/usr/lib/haxe/std/haxe/crypto/Crc32.hx">
		<crc><x path="Int"/></crc>
		<byte public="1" set="method" line="32"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></byte>
		<update public="1" set="method" line="43"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<get public="1" set="method" line="57"><f a=""><x path="Int"/></f></get>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.crypto.Md5" params="" file="/usr/lib/haxe/std/haxe/crypto/Md5.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<str2blks set="method" line="139" static="1"><f a="str">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<bitOR set="method" line="76"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitOR>
		<bitXOR set="method" line="82"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitXOR>
		<bitAND set="method" line="88"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitAND>
		<addme set="method" line="94"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></addme>
		<hex set="method" line="100"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<rol set="method" line="168"><f a="num:cnt">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></rol>
		<cmn set="method" line="172"><f a="q:a:b:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></cmn>
		<ff set="method" line="176"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ff>
		<gg set="method" line="180"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gg>
		<hh set="method" line="184"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></hh>
		<ii set="method" line="188"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ii>
		<doEncode set="method" line="192"><f a="x">
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<new set="method" line="73"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a MD5 of a String.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.ds.BalancedTree" params="K:V" file="/usr/lib/haxe/std/haxe/ds/BalancedTree.hx">
		<root><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></root>
		<set public="1" set="method" line="50">
			<f a="key:value">
				<c path="haxe.ds.BalancedTree.K"/>
				<c path="haxe.ds.BalancedTree.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds `key` to `value`.

		If `key` is already bound to a value, that binding disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" set="method" line="61">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<t path="Null"><c path="haxe.ds.BalancedTree.V"/></t>
			</f>
			<haxe_doc>Returns the value `key` is bound to.

		If `key` is not bound to any value, `null` is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<remove public="1" set="method" line="82">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the current binding of `key`.

		If `key` has no binding, `this` BalancedTree is unchanged and false is
		returned.

		Otherwise the binding of `key` is removed and true is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="99">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `key` is bound to a value.

		This method returns true even if `key` is bound to null.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<setLoop set="method" line="132"><f a="k:v:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></setLoop>
		<removeLoop set="method" line="145"><f a="k:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeLoop>
		<merge set="method" line="169"><f a="t1:t2">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></merge>
		<minBinding set="method" line="176"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></minBinding>
		<removeMinBinding set="method" line="182"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeMinBinding>
		<balance set="method" line="187"><f a="l:k:v:r">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></balance>
		<compare set="method" line="201"><f a="k1:k2">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.K"/>
	<x path="Int"/>
</f></compare>
		<new public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new BalancedTree, which is initially empty.</haxe_doc>
		</new>
		<haxe_doc>BalancedTree allows key-value mapping with arbitrary keys, as long as they
	can be ordered. By default, `Reflect.compare` is used in the `compare`
	method, which can be overridden in subclasses.

	Operations have a logarithmic average and worst-case cost.

	Iteration over keys and values, using `keys` and `iterator` respectively,
	are in-order.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="/usr/lib/haxe/std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<new public="1" set="method" line="220"><f a="l:k:v:r:?h" v="::::-1">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.TreeNode.K"/>
		<c path="haxe.ds.TreeNode.V"/>
	</c>
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.TreeNode.K"/>
		<c path="haxe.ds.TreeNode.V"/>
	</c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/usr/lib/haxe/std/haxe/ds/HashMap.hx">
		<this><a>
	<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
	<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
</a></this>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/usr/lib/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.IntMap" params="T" file="/usr/lib/haxe/std/cpp/_std/haxe/ds/IntMap.hx">
		<implements path="IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<h><d/></h>
		<set public="1" set="method" line="32">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="36">
			<f a="key">
				<x path="Int"/>
				<t path="Null"><c path="haxe.ds.IntMap.T"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method" line="40">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="44">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="48">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="53">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.ds.StringMap" params="T" file="/usr/lib/haxe/std/cpp/_std/haxe/ds/StringMap.hx">
		<implements path="IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<__Internal><d/></__Internal>
		<set public="1" set="method" line="31">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="35">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="haxe.ds.StringMap.T"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method" line="39">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="43">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="53">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<new public="1" set="method" line="27">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.format.JsonParser" params="" file="/usr/lib/haxe/std/haxe/format/JsonParser.hx">
		<str><c path="String"/></str>
		<pos><x path="Int"/></pos>
		<parseRec set="method" line="17"><f a=""><d/></f></parseRec>
		<parseString set="method" line="99"><f a=""><c path="String"/></f></parseString>
		<invalidChar set="method" line="202"><f a=""><x path="Void"/></f></invalidChar>
		<invalidNumber set="method" line="207"><f a="start">
	<x path="Int"/>
	<x path="Void"/>
</f></invalidNumber>
		<new set="method" line="12"><f a="str">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.Bytes" params="" file="/usr/lib/haxe/std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="357" static="1"><f a="length">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="382" static="1"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<ofData public="1" set="method" line="435" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<blit public="1" set="method" line="75"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<sub public="1" set="method" line="127"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<getString public="1" set="method" line="261"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></getString>
		<toString public="1" set="method" line="318"><f a=""><c path="String"/></f></toString>
		<new set="method" line="33"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="/usr/lib/haxe/std/haxe/io/BytesBuffer.hx">
		<b><t path="haxe.io.BytesData"/></b>
		<getBytes public="1" set="method" line="173">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Returns either a copy or a reference of the current bytes.
		Once called, the buffer can no longer be used.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="45"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.Unsigned_char__" params="" file="/usr/lib/haxe/std/haxe/io/BytesData.hx" module="haxe.io.BytesData" extern="1"/>
	<typedef path="haxe.io.BytesData" params="" file="/usr/lib/haxe/std/haxe/io/BytesData.hx"><c path="Array"><c path="haxe.io.Unsigned_char__"/></c></typedef>
	<class path="haxe.io.Input" params="" file="/usr/lib/haxe/std/haxe/io/Input.hx">
		<bigEndian public="1" set="accessor"><x path="Bool"/></bigEndian>
		<readByte public="1" set="method" line="37"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="46"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="67"><f a=""><x path="Void"/></f></close>
		<set_bigEndian set="method" line="70"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<readFullBytes public="1" set="method" line="99"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readFullBytes>
		<read public="1" set="method" line="107"><f a="nbytes">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></read>
		<readLine public="1" set="method" line="127"><f a=""><c path="String"/></f></readLine>
		<readUInt16 public="1" set="method" line="287"><f a=""><x path="Int"/></f></readUInt16>
		<readInt32 public="1" set="method" line="310"><f a=""><x path="Int"/></f></readInt32>
		<readString public="1" set="method" line="326"><f a="len">
	<x path="Int"/>
	<c path="String"/>
</f></readString>
		<haxe_doc>An Input is an abstract reader. See other classes in the [haxe.io] package
	for several possible implementations.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.BytesInput" params="" file="/usr/lib/haxe/std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<b><t path="haxe.io.BytesData"/></b>
		<pos><x path="Int"/></pos>
		<len><x path="Int"/></len>
		<totlen><x path="Int"/></totlen>
		<readByte public="1" set="method" line="87" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="108" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="38"><f a="b:?pos:?len" v=":null:null">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.Output" params="" file="/usr/lib/haxe/std/haxe/io/Output.hx">
		<bigEndian public="1" set="accessor"><x path="Bool"/></bigEndian>
		<writeByte public="1" set="method" line="38"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="42"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<set_bigEndian set="method" line="71"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<write public="1" set="method" line="78"><f a="s">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></write>
		<writeFullBytes public="1" set="method" line="89"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeFullBytes>
		<writeInt32 public="1" set="method" line="268"><f a="x">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt32>
		<writeString public="1" set="method" line="313"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></writeString>
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the [writeChar] and maybe the [write], [flush] and [close]
	methods. See [File.write] and [String.write] for two ways of creating an
	Output.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.BytesOutput" params="" file="/usr/lib/haxe/std/haxe/io/BytesOutput.hx">
		<extends path="haxe.io.Output"/>
		<b><c path="haxe.io.BytesBuffer"/></b>
		<writeByte public="1" set="method" line="48" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="56" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<getBytes public="1" set="method" line="113"><f a=""><c path="haxe.io.Bytes"/></f></getBytes>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.Eof" params="" file="/usr/lib/haxe/std/haxe/io/Eof.hx">
		<toString set="method" line="30">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
		</toString>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the [Input].</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<enum path="haxe.io.Error" params="" file="/usr/lib/haxe/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
	</enum>
	<class path="haxe.io.Path" params="" file="/usr/lib/haxe/std/haxe/io/Path.hx">
		<extension public="1" set="method" line="155" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the extension of `path`.

		If the extension is null, the empty String "" is returned.

		If `path` is null, the result is unspecified.</haxe_doc>
		</extension>
		<join public="1" set="method" line="183" static="1">
			<f a="paths">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all paths in `paths` together.

		If `paths` is empty, the empty String `""` is returned. Otherwise the
		paths are joined with a slash between them.

		If `paths` is null, the result is unspecified.</haxe_doc>
		</join>
		<normalize public="1" set="method" line="204" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Normalize a given `path` (e.g. make '/usr/local/../lib' to '/usr/lib').

		Also replaces backslashes \ with slashes / and afterwards turns
		multiple slashes into a single one.

		If `path` is null, the result is unspecified.</haxe_doc>
		</normalize>
		<addTrailingSlash public="1" set="method" line="268" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Adds a trailing slash to `path`, if it does not have one already.

		If the last slash in `path` is a backslash, a backslash is appended to
		`path`.

		If the last slash in `path` is a slash, or if no slash is found, a slash
		is appended to `path`. In particular, this applies to the empty String
		"".

		If `path` is null, the result is unspecified.</haxe_doc>
		</addTrailingSlash>
		<removeTrailingSlashes public="1" set="method" line="293" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":require"><e><![CDATA[haxe_ver>=3.1]]></e></m></meta>
			<haxe_doc>Removes trailing slashes from `path`.

		If `path` does not end with a `/` or `\`, `path` is returned unchanged.

		Otherwise the substring of `path` excluding the trailing slashes or
		backslashes is returned.

		If `path` is null, the result is unspecified.</haxe_doc>
		</removeTrailingSlashes>
		<dir public="1">
			<c path="String"/>
			<haxe_doc>The directory.

		This is the leading part of the path that is not part of the file name
		and the extension.

		Does not end with a `/` or `\` separator.

		If the path has no directory, the value is null.</haxe_doc>
		</dir>
		<file public="1">
			<c path="String"/>
			<haxe_doc>The file name.

		This is the part of the part between the directory and the extension.

		If there is no file name, e.g. for ".htaccess" or "/dir/", the value
		is the empty String "".</haxe_doc>
		</file>
		<ext public="1">
			<c path="String"/>
			<haxe_doc>The file extension.

		It is separated from the file name by a dot. This dot is not part of
		the extension.

		If the path has no extension, the value is null.</haxe_doc>
		</ext>
		<backslash public="1">
			<x path="Bool"/>
			<haxe_doc>True if the last directory separator is a backslash, false otherwise.</haxe_doc>
		</backslash>
		<new public="1" set="method" line="76">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Path instance by parsing `path`.

		Path information can be retrieved by accessing the dir, file and ext
		properties.</haxe_doc>
		</new>
		<haxe_doc>This class provides a convenient way of working with paths. It supports the
	common path formats:

	- directory1/directory2/filename.extension
	- directory1\directory2\filename.excention</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="haxe.macro.Position" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<min><x path="Int"/></min>
	<max><x path="Int"/></max>
	<file><c path="String"/></file>
</a></typedef>
	<typedef path="haxe.macro.Expr" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><t path="haxe.macro.Expr"/></typedef>
	<typedef path="haxe.macro.Case" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<values><c path="Array"><t path="haxe.macro.Expr"/></c></values>
	<guard>
		<t path="Null"><t path="haxe.macro.Expr"/></t>
		<meta><m n=":optional"/></meta>
	</guard>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.Var" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<name><c path="String"/></name>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.Catch" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><e path="haxe.macro.ComplexType"/></type>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></typedef>
	<typedef path="haxe.macro.TypePath" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<sub>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</sub>
	<params>
		<c path="Array"><e path="haxe.macro.TypeParam"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<params>
		<c path="Array"><t path="haxe.macro.TypeParamDecl"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<name><c path="String"/></name>
	<constraints>
		<c path="Array"><e path="haxe.macro.ComplexType"/></c>
		<meta><m n=":optional"/></meta>
	</constraints>
</a></typedef>
	<typedef path="haxe.macro.Function" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<ret><t path="Null"><e path="haxe.macro.ComplexType"/></t></ret>
	<params>
		<c path="Array"><t path="haxe.macro.TypeParamDecl"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
	<args><c path="Array"><t path="haxe.macro.FunctionArg"/></c></args>
</a></typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<value>
		<t path="Null"><t path="haxe.macro.Expr"/></t>
		<meta><m n=":optional"/></meta>
	</value>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<opt>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params>
		<c path="Array"><t path="haxe.macro.Expr"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.Metadata" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><c path="Array"><t path="haxe.macro.MetadataEntry"/></c></typedef>
	<typedef path="haxe.macro.Field" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
	<meta>
		<t path="haxe.macro.Metadata"/>
		<meta><m n=":optional"/></meta>
	</meta>
	<kind><e path="haxe.macro.FieldType"/></kind>
	<doc>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</doc>
	<access>
		<c path="Array"><e path="haxe.macro.Access"/></c>
		<meta><m n=":optional"/></meta>
	</access>
</a></typedef>
	<typedef path="haxe.macro.TypeDefinition" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params>
		<c path="Array"><t path="haxe.macro.TypeParamDecl"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<meta>
		<t path="haxe.macro.Metadata"/>
		<meta><m n=":optional"/></meta>
	</meta>
	<kind><e path="haxe.macro.TypeDefKind"/></kind>
	<isExtern>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</isExtern>
	<fields><c path="Array"><t path="haxe.macro.Field"/></c></fields>
</a></typedef>
	<typedef path="haxe.macro.Ref" params="T" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<toString set="method"><f a=""><c path="String"/></f></toString>
	<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
</a></typedef>
	<typedef path="haxe.macro.AnonType" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<status><e path="haxe.macro.AnonStatus"/></status>
	<fields><c path="Array"><t path="haxe.macro.ClassField"/></c></fields>
</a></typedef>
	<typedef path="haxe.macro.TypeParameter" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.BaseType" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.ClassField" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.FieldKind"/></kind>
	<isPublic><x path="Bool"/></isPublic>
	<expr set="method"><f a=""><t path="Null"><t path="haxe.macro.TypedExpr"/></t></f></expr>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.ClassType" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<superClass><t path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></t></superClass>
	<statics><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></statics>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<overrides><c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c></overrides>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.ClassKind"/></kind>
	<isPrivate><x path="Bool"/></isPrivate>
	<isInterface><x path="Bool"/></isInterface>
	<isExtern><x path="Bool"/></isExtern>
	<interfaces><c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c></interfaces>
	<init><t path="Null"><t path="haxe.macro.TypedExpr"/></t></init>
	<fields><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></fields>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructor><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></t></constructor>
</a></typedef>
	<typedef path="haxe.macro.EnumField" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<index><x path="Int"/></index>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.EnumType" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<names><c path="Array"><c path="String"/></c></names>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructs><c path="haxe.ds.StringMap"><t path="haxe.macro.EnumField"/></c></constructs>
</a></typedef>
	<typedef path="haxe.macro.DefType" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<unops><c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c></unops>
	<type><e path="haxe.macro.Type"/></type>
	<to><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c></to>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<impl><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t></impl>
	<from><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c></from>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<binops><c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c></binops>
	<array><c path="Array"><t path="haxe.macro.ClassField"/></c></array>
</a></typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TVar" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
	<id><x path="Int"/></id>
	<extra><t path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><t path="Null"><t path="haxe.macro.TypedExpr"/></t></expr>
</a></t></extra>
	<capture><x path="Bool"/></capture>
</a></typedef>
	<typedef path="haxe.macro.TFunc" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
	<args><c path="Array"><a>
	<value><t path="Null"><e path="haxe.macro.TConstant"/></t></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c></args>
</a></typedef>
	<typedef path="haxe.macro.TypedExpr" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.TypedExprDef"/></expr>
</a></typedef>
	<class path="haxe.zip.Compress" params="" file="/usr/lib/haxe/std/cpp/_std/haxe/zip/Compress.hx">
		<run public="1" set="method" line="45" static="1"><f a="s:level">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<_deflate_init line="56" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></_deflate_init>
		<_deflate_bound line="57" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></_deflate_bound>
		<_deflate_buffer line="58" static="1"><f a="::::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></_deflate_buffer>
		<_deflate_end line="59" static="1"><f a="">
	<d/>
	<unknown/>
</f></_deflate_end>
		<_set_flush_mode line="60" static="1"><f a=":">
	<d/>
	<c path="String"/>
	<unknown/>
</f></_set_flush_mode>
		<s><d/></s>
		<execute public="1" set="method" line="33"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="37"><f a="f">
	<e path="haxe.zip.FlushMode"/>
	<x path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="41"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="29"><f a="level">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<enum path="haxe.zip.FlushMode" params="" file="/usr/lib/haxe/std/haxe/zip/FlushMode.hx">
		<NO/>
		<SYNC/>
		<FULL/>
		<FINISH/>
		<BLOCK/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="haxe.zip.Uncompress" params="" file="/usr/lib/haxe/std/cpp/_std/haxe/zip/Uncompress.hx">
		<run public="1" set="method" line="44" static="1"><f a="src:?bufsize" v=":null">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<_inflate_init line="62" static="1"><f a="">
	<t path="Null"><x path="Int"/></t>
	<unknown/>
</f></_inflate_init>
		<_inflate_buffer line="63" static="1"><f a="::::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></_inflate_buffer>
		<_inflate_end line="64" static="1"><f a="">
	<d/>
	<unknown/>
</f></_inflate_end>
		<_set_flush_mode line="65" static="1"><f a=":">
	<d/>
	<unknown/>
	<unknown/>
</f></_set_flush_mode>
		<s><d/></s>
		<execute public="1" set="method" line="32"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="36"><f a="f">
	<e path="haxe.zip.FlushMode"/>
	<x path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="40"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="28"><f a="?windowBits" v="null">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="hxcpp.StaticRegexp" params="" file="/Users/sven/dev/haxelib/hxcpp/3,1,39/hxcpp/StaticRegexp.hx"><meta>
	<m n=":cppFileCode"><e>"extern \"C\" void regexp_register_prims();"</e></m>
	<m n=":buildXml"><e><![CDATA["\r\n<target id='haxe'>\r\n  <lib name='${HXCPP}/lib/${BINDIR}/libregexp${LIBEXTRA}${LIBEXT}'/>\r\n</target>\r\n"]]></e></m>
	<m n=":keep"/>
</meta></class>
	<class path="hxcpp.StaticStd" params="" file="/Users/sven/dev/haxelib/hxcpp/3,1,39/hxcpp/StaticStd.hx"><meta>
	<m n=":cppFileCode"><e>"extern \"C\" void std_register_prims();"</e></m>
	<m n=":buildXml"><e><![CDATA["\r\n<target id='haxe'>\r\n  <lib name='${HXCPP}/lib/${BINDIR}/libstd${LIBEXTRA}${LIBEXT}'/>\r\n   <lib name='wsock32.lib' if='windows'/>\r\n</target>\r\n"]]></e></m>
	<m n=":keep"/>
</meta></class>
	<class path="hxcpp.StaticZlib" params="" file="/Users/sven/dev/haxelib/hxcpp/3,1,39/hxcpp/StaticZlib.hx"><meta>
	<m n=":cppFileCode"><e>"extern \"C\" void zlib_register_prims();"</e></m>
	<m n=":buildXml"><e><![CDATA["\r\n<target id='haxe'>\r\n  <lib name='${HXCPP}/lib/${BINDIR}/libzlib${LIBEXTRA}${LIBEXT}'/>\r\n</target>\r\n"]]></e></m>
	<m n=":keep"/>
</meta></class>
	<typedef path="snow.Core" params="" file="/Users/sven/dev/snow/snow/Core.hx">
		<c path="snow.platform.native.Core"/>
		<meta><m n=":noCompletion"/></meta>
	</typedef>
	<class path="snow.utils.AbstractClass" params="" file="/Users/sven/dev/snow/snow/utils/AbstractClass.hx" interface="1">
		<haxe_doc>Old school abstract class.
	Classes that implements it, and their sub-classes, will be able to declare abstract methods (methods that without body).
	There will be a check in compile-time such that no public constructor is allowed without all abstract methods implemented.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="snow.CoreBinding" params="" file="/Users/sven/dev/snow/snow/Core.hx" module="snow.Core">
		<implements path="snow.utils.AbstractClass"/>
		<app><c path="snow.Snow"/></app>
		<init public="1" set="method" line="23">
			<f a="_event_handler">
				<f a="">
					<t path="snow.types.SystemEvent"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Called by the snow internals to intiialize the core and subsystems of the framework, with the event handler passed in for where to deliver system events</haxe_doc>
		</init>
		<shutdown public="1" set="method" line="25">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called to explicitly shutdown the framework cleanly. Called by `quit` and `app_terminated` type events by the core, for example.</haxe_doc>
		</shutdown>
		<timestamp public="1" set="method" line="27">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Get the most precise timestamp available on the platform, in seconds (time is always in seconds in snow)</haxe_doc>
		</timestamp>
		<app_path public="1" set="method" line="29">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return the full path that the application is located</haxe_doc>
		</app_path>
		<pref_path public="1" set="method" line="31">
			<f a="_appname:_package">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>On platforms where this makes sense, get the application specific writeable data path</haxe_doc>
		</pref_path>
		<haxe_doc>Implemented in the platform specific concrete versions of this class.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.Log" params="" file="/Users/sven/dev/snow/snow/Log.hx">
		<_level public="1" line="10" static="1"><x path="Int"/></_level>
		<_filter public="1" static="1"><c path="Array"><c path="String"/></c></_filter>
		<_exclude public="1" static="1"><c path="Array"><c path="String"/></c></_exclude>
		<_log_width public="1" line="13" static="1"><x path="Int"/></_log_width>
		<_get_spacing set="method" line="210" static="1"><f a="_file">
	<c path="String"/>
	<c path="String"/>
</f></_get_spacing>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.Snow" params="" file="/Users/sven/dev/snow/snow/Snow.hx">
		<core public="1" static="1">
			<t path="snow.Core"/>
			<meta><m n=":noCompletion"/></meta>
		</core>
		<load public="1" set="method" line="445" static="1">
			<f a="library:method:?args" v="::0">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Loads a function out of a library</haxe_doc>
		</load>
		<next_list static="1"><c path="Array"><f a=""><x path="Void"/></f></c></next_list>
		<next public="1" set="method" line="455" static="1">
			<f a="func">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Call a function at the start of the next frame,
            useful for async calls in a sync context, allowing the sync function to return safely before the onload is fired.</haxe_doc>
		</next>
		<time public="1" get="accessor" set="null">
			<x path="Float"/>
			<haxe_doc>The current timestamp</haxe_doc>
		</time>
		<uniqueid public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>Generate a unique ID to use</haxe_doc>
		</uniqueid>
		<host public="1">
			<c path="snow.App"/>
			<haxe_doc>The host application</haxe_doc>
		</host>
		<config public="1">
			<t path="snow.types.AppConfig"/>
			<haxe_doc>The application configuration specifics (like window, runtime, and asset lists)</haxe_doc>
		</config>
		<snow_config public="1">
			<t path="snow.types.SnowConfig"/>
			<haxe_doc>The configuration for snow itself, set via build project flags</haxe_doc>
		</snow_config>
		<io public="1">
			<c path="snow.io.IO"/>
			<haxe_doc>The io system</haxe_doc>
		</io>
		<input public="1">
			<c path="snow.input.Input"/>
			<haxe_doc>The input system</haxe_doc>
		</input>
		<assets public="1">
			<c path="snow.assets.Assets"/>
			<haxe_doc>The asset system</haxe_doc>
		</assets>
		<audio public="1">
			<c path="snow.audio.Audio"/>
			<haxe_doc>The audio system</haxe_doc>
		</audio>
		<windowing public="1">
			<c path="snow.window.Windowing"/>
			<haxe_doc>The window manager</haxe_doc>
		</windowing>
		<shutting_down public="1">
			<x path="Bool"/>
			<haxe_doc>Set if shut down has commenced</haxe_doc>
		</shutting_down>
		<has_shutdown public="1">
			<x path="Bool"/>
			<haxe_doc>Set if shut dow has completed</haxe_doc>
		</has_shutdown>
		<window public="1">
			<c path="snow.window.Window"/>
			<haxe_doc>If the config specifies a default window, this is it</haxe_doc>
		</window>
		<was_ready><x path="Bool"/></was_ready>
		<is_ready><x path="Bool"/></is_ready>
		<init public="1" set="method" line="83">
			<f a="_snow_config:_host">
				<t path="snow.types.SnowConfig"/>
				<c path="snow.App"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</init>
		<shutdown public="1" set="method" line="109">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Shutdown the engine and quit</haxe_doc>
		</shutdown>
		<get_time get="inline" set="null" line="125"><f a=""><x path="Float"/></f></get_time>
		<on_snow_init set="method" line="131"><f a=""><x path="Void"/></f></on_snow_init>
		<on_snow_ready set="method" line="159"><f a=""><x path="Void"/></f></on_snow_ready>
		<do_internal_update public="1" set="method" line="230">
			<f a="dt">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</do_internal_update>
		<render public="1" set="method" line="240">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called for you by snow, unless configured otherwise. Only call this manually if your render_rate is 0!</haxe_doc>
		</render>
		<on_snow_update set="method" line="246"><f a=""><x path="Void"/></f></on_snow_update>
		<dispatch_system_event public="1" set="method" line="275"><f a="_event">
	<t path="snow.types.SystemEvent"/>
	<x path="Void"/>
</f></dispatch_system_event>
		<on_event set="method" line="281"><f a="_event">
	<t path="snow.types.SystemEvent"/>
	<x path="Void"/>
</f></on_event>
		<default_runtime_config set="method" line="341">
			<f a=""><d/></f>
			<haxe_doc>handles the default method of parsing a runtime config json,
            To change this behavior override `get_runtime_config`. This is called by default in get_runtime_config.</haxe_doc>
		</default_runtime_config>
		<default_asset_list set="method" line="370">
			<f a=""><c path="Array"><t path="snow.types.AssetInfo"/></c></f>
			<haxe_doc>handles the default method of parsing the file manifest list as json, stored in an array and returned.</haxe_doc>
		</default_asset_list>
		<default_window_config set="method" line="404">
			<f a=""><t path="snow.types.WindowConfig"/></f>
			<haxe_doc>returns a default configured window config</haxe_doc>
		</default_window_config>
		<get_uniqueid set="method" line="438"><f a=""><c path="String"/></f></get_uniqueid>
		<new public="1" set="method" line="73">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.assets.Asset" params="" file="/Users/sven/dev/snow/snow/assets/Asset.hx">
		<assets public="1">
			<c path="snow.assets.Assets"/>
			<haxe_doc>The asset manager associated with this asset</haxe_doc>
		</assets>
		<id public="1">
			<c path="String"/>
			<haxe_doc>The id of this asset like `assets/image.png`</haxe_doc>
		</id>
		<info public="1">
			<t path="snow.types.AssetInfo"/>
			<haxe_doc>The `AssetInfo` of this asset</haxe_doc>
		</info>
		<type public="1">
			<e path="snow.types.AssetType"/>
			<haxe_doc>The concrete type this asset holds (useful when handling as Asset base class)</haxe_doc>
		</type>
		<loaded public="1">
			<x path="Bool"/>
			<haxe_doc>True if this asset has completely loaded. Only changed through `load` and when load completes</haxe_doc>
		</loaded>
		<new public="1" set="method" line="24">
			<f a="_assets:_info">
				<c path="snow.assets.Assets"/>
				<t path="snow.types.AssetInfo"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called from subclasses, by `app.assets`</haxe_doc>
		</new>
		<haxe_doc>An asset base class. Get assets from the `app.assets`</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.assets.AssetAudio" params="" file="/Users/sven/dev/snow/snow/assets/AssetAudio.hx">
		<extends path="snow.assets.Asset"/>
		<audio public="1">
			<t path="snow.types.AudioInfo"/>
			<haxe_doc>The `AudioInfo` this asset contains</haxe_doc>
		</audio>
		<format public="1">
			<e path="snow.types.AudioFormatType"/>
			<haxe_doc>The audio format of this asset</haxe_doc>
		</format>
		<load_full public="1">
			<x path="Bool"/>
			<haxe_doc>Whether or not this asset is to be loaded in full (or alternatively, streamed). Used from `load` only.</haxe_doc>
		</load_full>
		<load public="1" set="method" line="35">
			<f a="?onload" v="null">
				<f a="">
					<c path="snow.assets.AssetAudio"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Called from `app.assets.audio`, or manually, if reloading the asset data at a later point.
            Note this function calls the onload handler in the next frame, so sync code can return.</haxe_doc>
		</load>
		<new public="1" set="method" line="23">
			<f a="_assets:_info:_format:?_load" v=":::true">
				<c path="snow.assets.Assets"/>
				<t path="snow.types.AssetInfo"/>
				<e path="snow.types.AudioFormatType"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Created from `app.assets.audio`</haxe_doc>
		</new>
		<haxe_doc>An asset that contains audio file `audio` as an `AudioInfo`. Get assets from the `Assets` class, via `app.assets`</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.assets.AssetBytes" params="" file="/Users/sven/dev/snow/snow/assets/AssetBytes.hx">
		<extends path="snow.assets.Asset"/>
		<bytes public="1">
			<t path="snow.utils.ByteArray"/>
			<haxe_doc>The `ByteArray` this asset contains</haxe_doc>
		</bytes>
		<async public="1">
			<x path="Bool"/>
			<haxe_doc>Whether or not this bytes data will load syncronously. Used in `load` only.</haxe_doc>
		</async>
		<load public="1" set="method" line="31">
			<f a="?onload" v="null">
				<f a="">
					<c path="snow.assets.AssetBytes"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Called from `app.assets.bytes`, or manually, if reloading the asset data at a later point.
            Note this function calls the onload handler in the next frame, so sync code can return.</haxe_doc>
		</load>
		<new public="1" set="method" line="21">
			<f a="_assets:_info:?_async" v="::false">
				<c path="snow.assets.Assets"/>
				<t path="snow.types.AssetInfo"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called from `app.assets`</haxe_doc>
		</new>
		<haxe_doc>An asset that contains byte `bytes` as a `ByteArray`. Get assets from the `Assets` class, via `app.assets`</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.assets.AssetImage" params="" file="/Users/sven/dev/snow/snow/assets/AssetImage.hx">
		<extends path="snow.assets.Asset"/>
		<image public="1">
			<t path="snow.types.ImageInfo"/>
			<haxe_doc>The `ImageInfo` this asset contains</haxe_doc>
		</image>
		<components public="1">
			<x path="Int"/>
			<haxe_doc>The requested components when loading this image.</haxe_doc>
		</components>
		<load public="1" set="method" line="32">
			<f a="?onload" v="null">
				<f a="">
					<c path="snow.assets.AssetImage"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Called from `app.assets.image`, or manually, if reloading the asset data at a later point.
            Note this function calls the onload handler in the next frame, so sync code can return.</haxe_doc>
		</load>
		<load_from_bytes public="1" set="method" line="57">
			<f a="bytes:?onload" v=":null">
				<t path="snow.utils.ByteArray"/>
				<f a="">
					<c path="snow.assets.AssetImage"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Called from `app.assets.image`, or manually, if reloading the asset data at a later point.
            Note this function calls the onload handler in the next frame, so sync code can return.</haxe_doc>
		</load_from_bytes>
		<new public="1" set="method" line="22">
			<f a="_assets:_info:?_components" v="::4">
				<c path="snow.assets.Assets"/>
				<t path="snow.types.AssetInfo"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called from `app.assets`</haxe_doc>
		</new>
		<haxe_doc>An asset that contains image file `image` as an `ImageInfo`. Get assets from the `Assets` class, via `app.assets`</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="snow.assets.AssetSystem" params="" file="/Users/sven/dev/snow/snow/assets/AssetSystem.hx">
		<c path="snow.platform.native.assets.AssetSystem"/>
		<meta><m n=":noCompletion"/></meta>
	</typedef>
	<class path="snow.assets.AssetSystemBinding" params="" file="/Users/sven/dev/snow/snow/assets/AssetSystem.hx" module="snow.assets.AssetSystem">
		<implements path="snow.utils.AbstractClass"/>
		<manager public="1"><c path="snow.assets.Assets"/></manager>
		<exists public="1" set="method" line="28">
			<f a="_id:?_strict" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Return true if the asset exists or false if not.
            If strict is enabled, it will only check the stored asset list.
            If strict is false, will allow unlisted paths and use platform specific exists checks.
            On web targets, this will return false for unlisted files as http requests for 404's is silly.</haxe_doc>
		</exists>
		<image_load_info public="1" set="method" line="33">
			<f a="_path:?_components:?_onload" v=":4:null">
				<c path="String"/>
				<x path="Int"/>
				<f a="?">
					<t path="snow.types.ImageInfo"/>
					<x path="Void"/>
				</f>
				<t path="snow.types.ImageInfo"/>
			</f>
			<haxe_doc>Image info load from file path. Use `app.assets`</haxe_doc>
		</image_load_info>
		<image_info_from_bytes public="1" set="method" line="35">
			<f a="_path:_bytes:?_components" v="::4">
				<c path="String"/>
				<t path="snow.utils.ByteArray"/>
				<x path="Int"/>
				<t path="snow.types.ImageInfo"/>
			</f>
			<haxe_doc>Image info load from `ByteArray`. Use `app.assets`</haxe_doc>
		</image_info_from_bytes>
		<audio_load_info public="1" set="method" line="40">
			<f a="_path:?_format:?_load:?_onload" v=":null:true:null">
				<c path="String"/>
				<e path="snow.types.AudioFormatType"/>
				<x path="Bool"/>
				<f a="?">
					<t path="snow.types.AudioInfo"/>
					<x path="Void"/>
				</f>
				<t path="snow.types.AudioInfo"/>
			</f>
			<haxe_doc>Audio info loader, use `app.assets`</haxe_doc>
		</audio_load_info>
		<audio_seek_source public="1" set="method" line="55">
			<f a="_info:_to">
				<t path="snow.types.AudioInfo"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Audio seek the specified audio info to the given position in bytes. `native` only</haxe_doc>
		</audio_seek_source>
		<audio_load_portion public="1" set="method" line="57">
			<f a="_info:_start:_len">
				<t path="snow.types.AudioInfo"/>
				<x path="Int"/>
				<x path="Int"/>
				<t path="snow.types.AudioDataBlob"/>
			</f>
			<haxe_doc>Audio portion loading (used for streaming or splitting source files into multiple blobs). sizes are in bytes. `native` only</haxe_doc>
		</audio_load_portion>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.assets.AssetText" params="" file="/Users/sven/dev/snow/snow/assets/AssetText.hx">
		<extends path="snow.assets.Asset"/>
		<text public="1">
			<c path="String"/>
			<haxe_doc>The `String` this asset contains</haxe_doc>
		</text>
		<async public="1">
			<x path="Bool"/>
			<haxe_doc>Whether or not this bytes data will load syncronously. Used in `load` only.</haxe_doc>
		</async>
		<load public="1" set="method" line="31">
			<f a="?onload" v="null">
				<f a="">
					<c path="snow.assets.AssetText"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Called from `app.assets.text`, or manually, if reloading the asset data at a later point.
            Note this function calls the onload handler in the next frame, so sync code can return.</haxe_doc>
		</load>
		<new public="1" set="method" line="21">
			<f a="_assets:_info:?_async" v="::false">
				<c path="snow.assets.Assets"/>
				<t path="snow.types.AssetInfo"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called from `app.assets.text`</haxe_doc>
		</new>
		<haxe_doc>An asset that contains `text` as a `String`. Get assets from the `Assets` class, via `app.assets`</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.assets.Assets" params="" file="/Users/sven/dev/snow/snow/assets/Assets.hx">
		<list public="1">
			<x path="Map">
				<c path="String"/>
				<t path="snow.types.AssetInfo"/>
			</x>
			<haxe_doc>The list of assets in the system, added at startup by the `App` class, in the `get_asset_list` function</haxe_doc>
		</list>
		<assets_root public="1">
			<c path="String"/>
			<haxe_doc>If the assets are not relative to the runtime root path, this value can adjust all asset paths. This is automatically handled and exists to allow control.</haxe_doc>
		</assets_root>
		<manifest_path public="1">
			<c path="String"/>
			<haxe_doc>The manifest file to parse for the asset list. By default, this is set to `manifest` from the build tools but the `App` class can have a custom `get_asset_list` handler use this value.</haxe_doc>
		</manifest_path>
		<strict public="1">
			<x path="Bool"/>
			<haxe_doc>The default approach to finding assets, overridable in each get call, this value will be used if the flag is not specified.</haxe_doc>
		</strict>
		<platform public="1">
			<t path="snow.assets.AssetSystem"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>access to platform implementation</haxe_doc>
		</platform>
		<lib public="1">
			<c path="snow.Snow"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>access to snow from subsystems</haxe_doc>
		</lib>
		<add public="1" set="method" line="55">
			<f a="_list">
				<c path="Array"><t path="snow.types.AssetInfo"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Add an asset info list to the system</haxe_doc>
		</add>
		<get public="1" set="method" line="79">
			<f a="_id">
				<c path="String"/>
				<t path="snow.types.AssetInfo"/>
			</f>
			<haxe_doc>Get an asset info for a given id</haxe_doc>
		</get>
		<listed public="1" set="method" line="86">
			<f a="_id">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Check if an asset info exists in the list for a given id.</haxe_doc>
		</listed>
		<exists public="1" set="method" line="95">
			<f a="_id:?_strict" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Check if an asset exists for a given id.
            On web targets, there is no file exists check so unless it is stored in the asset list
            this function will return false specyifying why.</haxe_doc>
		</exists>
		<path public="1" set="method" line="104">
			<f a="_id">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the asset path for an asset, adjusted by platform, root etc.
            If it fails to find the asset the id is returned as is with the asset root prefixed.</haxe_doc>
		</path>
		<bytes public="1" set="method" line="116">
			<f a="_id:?options" v=":null">
				<c path="String"/>
				<t path="snow.types.AssetBytesOptions"/>
				<c path="snow.assets.AssetBytes"/>
			</f>
			<haxe_doc>Get an asset as a `AssetBytes`, data stored as `ByteArray` used for binary assets.</haxe_doc>
		</bytes>
		<text public="1" set="method" line="147">
			<f a="_id:?options" v=":null">
				<c path="String"/>
				<t path="snow.types.AssetTextOptions"/>
				<c path="snow.assets.AssetText"/>
			</f>
			<haxe_doc>Get an asset as a `AssetText`, data stored as `String`, used for text based assets</haxe_doc>
		</text>
		<image public="1" set="method" line="178">
			<f a="_id:?options" v=":null">
				<c path="String"/>
				<t path="snow.types.AssetImageOptions"/>
				<c path="snow.assets.AssetImage"/>
			</f>
			<haxe_doc>Get an asset as a `AssetImage`, data stored as `ImageInfo`, used for image files</haxe_doc>
		</image>
		<audio public="1" set="method" line="221">
			<f a="_id:?options" v=":null">
				<c path="String"/>
				<t path="snow.types.AssetAudioOptions"/>
				<c path="snow.assets.AssetAudio"/>
			</f>
			<haxe_doc>Get an asset as a `AssetAudio`, used for audio files</haxe_doc>
		</audio>
		<info_from_id set="method" line="282"><f a="_id:_type">
	<c path="String"/>
	<c path="String"/>
	<t path="snow.types.AssetInfo"/>
</f></info_from_id>
		<exists_error set="method" line="292"><f a="_id">
	<c path="String"/>
	<x path="Void"/>
</f></exists_error>
		<load_error set="method" line="296"><f a="_id:?reason" v=":'unknown'">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></load_error>
		<new public="1" set="method" line="39">
			<f a="_lib">
				<c path="snow.Snow"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>constructed internally, use `app.assets`</haxe_doc>
		</new>
		<haxe_doc>The asset system class gives you access to fetching and manipulating assets,
    handling loading files and data in a consistent cross platform way</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.audio.Audio" params="" file="/Users/sven/dev/snow/snow/audio/Audio.hx">
		<platform public="1">
			<t path="snow.audio.AudioSystem"/>
			<haxe_doc>access to platform specific implementation</haxe_doc>
		</platform>
		<active public="1">
			<x path="Bool"/>
			<haxe_doc>Set to false to stop any and all processing in the audio system</haxe_doc>
		</active>
		<lib public="1">
			<c path="snow.Snow"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>for external access to the library by the systems</haxe_doc>
		</lib>
		<handles public="1">
			<c path="snow.audio._Audio.AudioHandleMap"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>for mapping native handles to Sound instances. Use the `app.audio` to manipulate preferably.</haxe_doc>
		</handles>
		<sound_list public="1">
			<x path="Map">
				<c path="String"/>
				<t path="snow.audio.Sound"/>
			</x>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>for mapping named sounds to Sound instances. Use the `app.audio` to manipulate preferably.</haxe_doc>
		</sound_list>
		<stream_list public="1">
			<x path="Map">
				<c path="String"/>
				<t path="snow.audio.SoundStream"/>
			</x>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>for mapping named streams to SoundStream instances. Use the `app.audio` to manipulate preferably.</haxe_doc>
		</stream_list>
		<create public="1" set="method" line="57">
			<f a="_id:?_name:?streaming" v=":'':false">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<t path="snow.audio.Sound"/>
			</f>
			<haxe_doc>Create a sound for playing. If no name is given, a unique id is assigned. Use the sound instance or the public api by name.</haxe_doc>
		</create>
		<uncreate public="1" set="method" line="108">
			<f a="_name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Destroy a sound instance by name. Use sound_instance.destroy() if you have an instance already.</haxe_doc>
		</uncreate>
		<on public="1" set="method" line="122">
			<f a="_name:_event:_handler">
				<c path="String"/>
				<c path="String"/>
				<f a="">
					<t path="snow.audio.Sound"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Listen for a event on a named sound. `load` and `end` are valid events.</haxe_doc>
		</on>
		<off public="1" set="method" line="130">
			<f a="_name:_event:_handler">
				<c path="String"/>
				<c path="String"/>
				<f a="">
					<t path="snow.audio.Sound"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove a listener for a event on a named sound. see `on`</haxe_doc>
		</off>
		<get public="1" set="method" line="138">
			<f a="_name">
				<c path="String"/>
				<t path="snow.audio.Sound"/>
			</f>
			<haxe_doc>Get a sound instance by name</haxe_doc>
		</get>
		<volume public="1" set="method" line="152">
			<f a="_name:?_volume" v=":null">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Get/Set the volume of a sound instance by name.
            Leave the second argument blank to return the current value.</haxe_doc>
		</volume>
		<pan public="1" set="method" line="166">
			<f a="_name:?_pan" v=":null">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Get/Set the pan of a sound instance by name
            Leave the second argument blank to return the current value.</haxe_doc>
		</pan>
		<pitch public="1" set="method" line="180">
			<f a="_name:?_pitch" v=":null">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Get/Set the pitch of a sound instance by name
            Leave the second argument blank to return the current value.</haxe_doc>
		</pitch>
		<position public="1" set="method" line="194">
			<f a="_name:?_position" v=":null">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Get/Set the position **in seconds** of a sound instance by name.
            Leave the second argument blank to return the current value.</haxe_doc>
		</position>
		<duration public="1" set="method" line="208">
			<f a="_name">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Get the duration of a sound instance by name.
            Duration is set from the sound instance, so it is read only.</haxe_doc>
		</duration>
		<play public="1" set="method" line="217">
			<f a="_name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Play a sound instance by name</haxe_doc>
		</play>
		<loop public="1" set="method" line="230">
			<f a="_name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Loop a sound instance by name, indefinitely. Use stop to end it</haxe_doc>
		</loop>
		<pause public="1" set="method" line="243">
			<f a="_name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Pause a sound instance by name</haxe_doc>
		</pause>
		<stop public="1" set="method" line="256">
			<f a="_name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stop a sound instance by name</haxe_doc>
		</stop>
		<toggle public="1" set="method" line="269">
			<f a="_name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Toggle a sound instance by name, pausing the sound</haxe_doc>
		</toggle>
		<kill public="1" set="method" line="285">
			<f a="_sound">
				<t path="snow.audio.Sound"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Stop managing a sound instance</haxe_doc>
		</kill>
		<on_event public="1" set="method" line="294">
			<f a="_event">
				<t path="snow.types.SystemEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Called by Snow when a system event is dispatched</haxe_doc>
		</on_event>
		<destroy public="1" set="method" line="321">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Called by Snow, cleans up sounds/system</haxe_doc>
		</destroy>
		<update public="1" set="method" line="334">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Called by Snow, update any sounds / streams</haxe_doc>
		</update>
		<new public="1" set="method" line="36">
			<f a="_lib">
				<c path="snow.Snow"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>constructed internally, use `app.audio`</haxe_doc>
		</new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.audio._Audio.AudioHandleMap" params="" file="/Users/sven/dev/snow/snow/audio/Audio.hx" private="1" module="snow.audio.Audio">
		<extends path="haxe.ds.BalancedTree">
			<t path="snow.types.AudioHandle"/>
			<t path="snow.audio.Sound"/>
		</extends>
		<compare set="method" line="362" override="1"><f a="k1:k2">
	<t path="snow.types.AudioHandle"/>
	<t path="snow.types.AudioHandle"/>
	<x path="Int"/>
</f></compare>
		<new public="1" set="method" line="360"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="snow.audio.AudioSystem" params="" file="/Users/sven/dev/snow/snow/audio/AudioSystem.hx">
		<c path="snow.platform.native.audio.openal.AudioSystem"/>
		<meta><m n=":noCompletion"/></meta>
	</typedef>
	<class path="snow.audio.AudioSystemBinding" params="" file="/Users/sven/dev/snow/snow/audio/AudioSystem.hx" module="snow.audio.AudioSystem">
		<implements path="snow.utils.AbstractClass"/>
		<manager public="1"><c path="snow.audio.Audio"/></manager>
		<lib public="1"><c path="snow.Snow"/></lib>
		<init public="1" set="method" line="34">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called by the audio manager when initiating this system</haxe_doc>
		</init>
		<process public="1" set="method" line="36">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called by the audio manager when updating this system</haxe_doc>
		</process>
		<destroy public="1" set="method" line="38">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called by the audio manager when destroying this system</haxe_doc>
		</destroy>
		<suspend public="1" set="method" line="40">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called by the audio manager when suspending this system</haxe_doc>
		</suspend>
		<resume public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called by the audio manager when resuming this system</haxe_doc>
		</resume>
		<haxe_doc>Internal audio system definition, interact with this system through `snow.Audio`, not directly</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<typedef path="snow.audio.Sound" params="" file="/Users/sven/dev/snow/snow/audio/Sound.hx"><c path="snow.platform.native.audio.openal.Sound"/></typedef>
	<typedef path="snow.audio.SoundStream" params="" file="/Users/sven/dev/snow/snow/audio/Sound.hx" module="snow.audio.Sound"><c path="snow.platform.native.audio.openal.SoundStream"/></typedef>
	<class path="snow.audio.SoundBinding" params="" file="/Users/sven/dev/snow/snow/audio/Sound.hx" module="snow.audio.Sound">
		<manager public="1">
			<c path="snow.audio.Audio"/>
			<haxe_doc>The `Audio` system handling this sound</haxe_doc>
		</manager>
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of this sound</haxe_doc>
		</name>
		<playing public="1">
			<x path="Bool"/>
			<haxe_doc>If the sound is playing</haxe_doc>
		</playing>
		<paused public="1">
			<x path="Bool"/>
			<haxe_doc>If the sound is paused</haxe_doc>
		</paused>
		<loaded public="1">
			<x path="Bool"/>
			<haxe_doc>If the sound is loaded or ready to use</haxe_doc>
		</loaded>
		<is_stream public="1">
			<x path="Bool"/>
			<haxe_doc>If the sound is a stream source</haxe_doc>
		</is_stream>
		<info public="1" get="accessor" set="accessor">
			<t path="snow.types.AudioInfo"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The `AudioInfo` this sound is created from. When assigning this it will clean up and set itself to this info instead.</haxe_doc>
		</info>
		<pitch public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The pitch of this sound</haxe_doc>
		</pitch>
		<volume public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The volume of this sound</haxe_doc>
		</volume>
		<pan public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The pan of this sound. Pan only logically works on mono sounds, and is by default 2D sounds</haxe_doc>
		</pan>
		<looping public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>If the sound is looping or not. Use `loop()` to change this.</haxe_doc>
		</looping>
		<position public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The current playback position of this sound in `seconds`</haxe_doc>
		</position>
		<duration public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The duration of this sound, in `seconds`</haxe_doc>
		</duration>
		<emit public="1" set="method" line="73">
			<f a="_event">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</emit>
		<on public="1" set="method" line="84"><f a="_event:_handler">
	<c path="String"/>
	<f a="">
		<t path="snow.audio.Sound"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></on>
		<off public="1" set="method" line="95"><f a="_event:_handler">
	<c path="String"/>
	<f a="">
		<t path="snow.audio.Sound"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></off>
		<onload_list><c path="Array"><f a="">
	<t path="snow.audio.Sound"/>
	<x path="Void"/>
</f></c></onload_list>
		<onend_list><c path="Array"><f a="">
	<t path="snow.audio.Sound"/>
	<x path="Void"/>
</f></c></onend_list>
		<play public="1" set="method" line="123">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Play this sound</haxe_doc>
		</play>
		<loop public="1" set="method" line="125">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Loop this sound</haxe_doc>
		</loop>
		<stop public="1" set="method" line="127">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stop this sound</haxe_doc>
		</stop>
		<pause public="1" set="method" line="129">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Pause this sound</haxe_doc>
		</pause>
		<destroy public="1" set="method" line="131">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Destroy this sound and it's data.</haxe_doc>
		</destroy>
		<internal_update public="1" set="method" line="135">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</internal_update>
		<internal_play public="1" set="method" line="136">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</internal_play>
		<internal_loop public="1" set="method" line="137">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</internal_loop>
		<internal_stop public="1" set="method" line="138">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</internal_stop>
		<internal_pause public="1" set="method" line="139">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</internal_pause>
		<toggle public="1" set="method" line="144">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Toggle this sound</haxe_doc>
		</toggle>
		<get_info set="method" line="162"><f a=""><t path="snow.types.AudioInfo"/></f></get_info>
		<set_info set="method" line="166"><f a="_info">
	<t path="snow.types.AudioInfo"/>
	<t path="snow.types.AudioInfo"/>
</f></set_info>
		<get_pan set="method" line="170"><f a=""><x path="Float"/></f></get_pan>
		<get_pitch set="method" line="174"><f a=""><x path="Float"/></f></get_pitch>
		<get_volume set="method" line="178"><f a=""><x path="Float"/></f></get_volume>
		<get_looping set="method" line="182"><f a=""><x path="Bool"/></f></get_looping>
		<get_position set="method" line="186"><f a=""><x path="Float"/></f></get_position>
		<get_duration set="method" line="191"><f a=""><x path="Float"/></f></get_duration>
		<set_pan set="method" line="195"><f a="_pan">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pan>
		<set_pitch set="method" line="199"><f a="_pitch">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pitch>
		<set_volume set="method" line="203"><f a="_volume">
	<x path="Float"/>
	<x path="Float"/>
</f></set_volume>
		<set_position set="method" line="207"><f a="_position">
	<x path="Float"/>
	<x path="Float"/>
</f></set_position>
		<set_looping set="method" line="211"><f a="_looping">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_looping>
		<do_onload public="1" set="method" line="217">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</do_onload>
		<do_onend public="1" set="method" line="228">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</do_onend>
		<add_onload set="method" line="236"><f a="_onload">
	<f a="">
		<t path="snow.audio.Sound"/>
		<x path="Void"/>
	</f>
	<f a="">
		<t path="snow.audio.Sound"/>
		<x path="Void"/>
	</f>
</f></add_onload>
		<new public="1" set="method" line="111"><f a="_manager:_name">
	<c path="snow.audio.Audio"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<typedef path="snow.audio.openal.AL" params="" file="/Users/sven/dev/snow/snow/audio/openal/AL.hx"><c path="snow.platform.native.audio.openal.AL"/></typedef>
	<typedef path="snow.audio.openal.ALC" params="" file="/Users/sven/dev/snow/snow/audio/openal/AL.hx" module="snow.audio.openal.AL"><c path="snow.platform.native.audio.openal.ALC"/></typedef>
	<typedef path="snow.audio.openal.Device" params="" file="/Users/sven/dev/snow/snow/audio/openal/AL.hx" module="snow.audio.openal.AL"><x path="snow.platform.native.audio.openal.Device"/></typedef>
	<typedef path="snow.audio.openal.Context" params="" file="/Users/sven/dev/snow/snow/audio/openal/AL.hx" module="snow.audio.openal.AL"><x path="snow.platform.native.audio.openal.Context"/></typedef>
	<typedef path="snow.input.MapIntBool" params="" file="/Users/sven/dev/snow/snow/input/Input.hx" module="snow.input.Input"><x path="Map">
	<x path="Int"/>
	<x path="Bool"/>
</x></typedef>
	<typedef path="snow.input.MapIntFloat" params="" file="/Users/sven/dev/snow/snow/input/Input.hx" module="snow.input.Input"><x path="Map">
	<x path="Int"/>
	<x path="Float"/>
</x></typedef>
	<class path="snow.input.Input" params="" file="/Users/sven/dev/snow/snow/input/Input.hx">
		<lib public="1">
			<c path="snow.Snow"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>access to snow from subsystems</haxe_doc>
		</lib>
		<platform public="1">
			<t path="snow.input.InputSystem"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>access to platform implementation</haxe_doc>
		</platform>
		<key_code_down><t path="snow.input.MapIntBool"/></key_code_down>
		<key_code_pressed><t path="snow.input.MapIntBool"/></key_code_pressed>
		<key_code_released><t path="snow.input.MapIntBool"/></key_code_released>
		<scan_code_down><t path="snow.input.MapIntBool"/></scan_code_down>
		<scan_code_pressed><t path="snow.input.MapIntBool"/></scan_code_pressed>
		<scan_code_released><t path="snow.input.MapIntBool"/></scan_code_released>
		<mouse_button_down><t path="snow.input.MapIntBool"/></mouse_button_down>
		<mouse_button_pressed><t path="snow.input.MapIntBool"/></mouse_button_pressed>
		<mouse_button_released><t path="snow.input.MapIntBool"/></mouse_button_released>
		<gamepad_button_down><x path="Map">
	<x path="Int"/>
	<t path="snow.input.MapIntBool"/>
</x></gamepad_button_down>
		<gamepad_button_pressed><x path="Map">
	<x path="Int"/>
	<t path="snow.input.MapIntBool"/>
</x></gamepad_button_pressed>
		<gamepad_button_released><x path="Map">
	<x path="Int"/>
	<t path="snow.input.MapIntBool"/>
</x></gamepad_button_released>
		<gamepad_axis_values><x path="Map">
	<x path="Int"/>
	<t path="snow.input.MapIntFloat"/>
</x></gamepad_axis_values>
		<keypressed public="1" set="method" line="79">
			<f a="_code">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the `Key` value was pressed in the latest frame</haxe_doc>
		</keypressed>
		<keyreleased public="1" set="method" line="84">
			<f a="_code">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the `Key` value was released in the latest frame</haxe_doc>
		</keyreleased>
		<keydown public="1" set="method" line="89">
			<f a="_code">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the `Key` value is down at the time of calling this</haxe_doc>
		</keydown>
		<scanpressed public="1" set="method" line="94">
			<f a="_code">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the `Scan` value was pressed in the latest frame</haxe_doc>
		</scanpressed>
		<scanreleased public="1" set="method" line="99">
			<f a="_code">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the `Scan` value was released in the latest frame</haxe_doc>
		</scanreleased>
		<scandown public="1" set="method" line="104">
			<f a="_code">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the `Scan` value is down at the time of calling this</haxe_doc>
		</scandown>
		<mousepressed public="1" set="method" line="111">
			<f a="_button">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the mouse button was pressed in the latest frame</haxe_doc>
		</mousepressed>
		<mousereleased public="1" set="method" line="116">
			<f a="_button">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the mouse button was released in the latest frame</haxe_doc>
		</mousereleased>
		<mousedown public="1" set="method" line="121">
			<f a="_button">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the mouse button value is down at the time of calling this</haxe_doc>
		</mousedown>
		<gamepadpressed public="1" set="method" line="128">
			<f a="_gamepad:_button">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the mouse button was pressed in the latest frame</haxe_doc>
		</gamepadpressed>
		<gamepadreleased public="1" set="method" line="136">
			<f a="_gamepad:_button">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the gamepad button was released in the latest frame</haxe_doc>
		</gamepadreleased>
		<gamepaddown public="1" set="method" line="144">
			<f a="_gamepad:_button">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the gamepad button value is down at the time of calling this</haxe_doc>
		</gamepaddown>
		<gamepadaxis public="1" set="method" line="152">
			<f a="_gamepad:_axis">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>returns true if the gamepad button value is down at the time of calling this</haxe_doc>
		</gamepadaxis>
		<dispatch_key_down_event public="1" set="method" line="164">
			<f a="keycode:scancode:repeat:mod:timestamp:window_id">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<t path="snow.types.ModState"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a key down event through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_key_down_event>
		<dispatch_key_up_event public="1" set="method" line="184">
			<f a="keycode:scancode:repeat:mod:timestamp:window_id">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<t path="snow.types.ModState"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a key up event through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_key_up_event>
		<dispatch_text_event public="1" set="method" line="203">
			<f a="text:start:length:type:timestamp:window_id">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<e path="snow.types.TextEventType"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a text event through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_text_event>
		<dispatch_mouse_move_event public="1" set="method" line="211">
			<f a="x:y:xrel:yrel:timestamp:window_id">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a mouse move event through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_mouse_move_event>
		<dispatch_mouse_down_event public="1" set="method" line="218">
			<f a="x:y:button:timestamp:window_id">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a mouse button down event through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_mouse_down_event>
		<dispatch_mouse_up_event public="1" set="method" line="231">
			<f a="x:y:button:timestamp:window_id">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a mouse button up event through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_mouse_up_event>
		<dispatch_mouse_wheel_event public="1" set="method" line="244">
			<f a="x:y:timestamp:window_id">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a mouse wheel event through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_mouse_wheel_event>
		<dispatch_touch_down_event public="1" set="method" line="251">
			<f a="x:y:touch_id:timestamp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a touch down through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_touch_down_event>
		<dispatch_touch_up_event public="1" set="method" line="258">
			<f a="x:y:touch_id:timestamp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a touch up through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_touch_up_event>
		<dispatch_touch_move_event public="1" set="method" line="265">
			<f a="x:y:dx:dy:touch_id:timestamp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a touch move through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_touch_move_event>
		<dispatch_gamepad_axis_event public="1" set="method" line="272">
			<f a="gamepad:axis:value:timestamp">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a gamepad axis event through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_gamepad_axis_event>
		<dispatch_gamepad_button_down_event public="1" set="method" line="287">
			<f a="gamepad:button:value:timestamp">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a gamepad button down event through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_gamepad_button_down_event>
		<dispatch_gamepad_button_up_event public="1" set="method" line="309">
			<f a="gamepad:button:value:timestamp">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a gamepad button up event through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_gamepad_button_up_event>
		<dispatch_gamepad_device_event public="1" set="method" line="331">
			<f a="gamepad:type:timestamp">
				<x path="Int"/>
				<e path="snow.types.GamepadDeviceEventType"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a gamepad device event through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_gamepad_device_event>
		<listen public="1" set="method" line="340">
			<f a="_window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Attach to a window to listen for input from it</haxe_doc>
		</listen>
		<unlisten public="1" set="method" line="347">
			<f a="_window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Detach a listening window, stopping listening of input from it</haxe_doc>
		</unlisten>
		<on_event public="1" set="method" line="354">
			<f a="_event">
				<t path="snow.types.SystemEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Called when a system event is dispatched through the core</haxe_doc>
		</on_event>
		<on_gamepad_added public="1" set="method" line="363">
			<f a="_event">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Called when a gamepad is added, in order to handle any platform details</haxe_doc>
		</on_gamepad_added>
		<on_gamepad_removed public="1" set="method" line="370">
			<f a="_event">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Called when a gamepad is removed, in order to handle any platform details</haxe_doc>
		</on_gamepad_removed>
		<update public="1" set="method" line="377">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Handle any input related processing, called by Snow</haxe_doc>
		</update>
		<destroy public="1" set="method" line="388">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Destroy and clean up etc.</haxe_doc>
		</destroy>
		<_update_mousestate set="method" line="397">
			<f a=""><x path="Void"/></f>
			<haxe_doc>update mouse pressed/released/down states</haxe_doc>
		</_update_mousestate>
		<_update_gamepadstate set="method" line="422">
			<f a=""><x path="Void"/></f>
			<haxe_doc>update gamepad pressed/released/down/axis states</haxe_doc>
		</_update_gamepadstate>
		<_update_keystate set="method" line="451">
			<f a=""><x path="Void"/></f>
			<haxe_doc>update key pressed/released/down states</haxe_doc>
		</_update_keystate>
		<new public="1" set="method" line="41">
			<f a="_lib">
				<c path="snow.Snow"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>constructed internally, use `app.input`</haxe_doc>
		</new>
		<haxe_doc>Internal input system, accessed via `app.input`</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="snow.input.InputSystem" params="" file="/Users/sven/dev/snow/snow/input/InputSystem.hx">
		<c path="snow.platform.native.input.sdl.InputSystem"/>
		<meta><m n=":noCompletion"/></meta>
	</typedef>
	<class path="snow.input.InputSystemBinding" params="" file="/Users/sven/dev/snow/snow/input/InputSystem.hx" module="snow.input.InputSystem">
		<implements path="snow.utils.AbstractClass"/>
		<manager public="1"><c path="snow.input.Input"/></manager>
		<lib public="1"><c path="snow.Snow"/></lib>
		<init public="1" set="method" line="32">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the input manager initiates this system</haxe_doc>
		</init>
		<process public="1" set="method" line="34">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the input manager updates this system</haxe_doc>
		</process>
		<destroy public="1" set="method" line="36">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the input manager destroys this system</haxe_doc>
		</destroy>
		<on_event public="1" set="method" line="38">
			<f a="_event">
				<t path="snow.types.InputEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when the input manager forwards an event to this system</haxe_doc>
		</on_event>
		<text_input_start public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Start a system text input state, this includes soft keyboard on mobile. on some platforms like web this does nothing (yet?)</haxe_doc>
		</text_input_start>
		<text_input_stop public="1" set="method" line="43">
			<f a=""><x path="Void"/></f>
			<haxe_doc>End a system text input state, this includes soft keyboard on mobile. on some platforms like web this does nothing (yet?)</haxe_doc>
		</text_input_stop>
		<text_input_rect public="1" set="method" line="45">
			<f a="x:y:w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>In a system text input state, this determines the area that is accepting input.</haxe_doc>
		</text_input_rect>
		<gamepad_add public="1" set="method" line="48">
			<f a="id">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Open a gamepad with this id</haxe_doc>
		</gamepad_add>
		<gamepad_remove public="1" set="method" line="50">
			<f a="id">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Close a gamepad with this id</haxe_doc>
		</gamepad_remove>
		<listen public="1" set="method" line="52">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Listen for input events on the given window</haxe_doc>
		</listen>
		<unlisten public="1" set="method" line="54">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Stop listening for input events on the given window</haxe_doc>
		</unlisten>
		<haxe_doc>Internal input system, accessed through `snow.Input`, not directly</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.input.Scancodes" params="" file="/Users/sven/dev/snow/snow/input/Keycodes.hx" module="snow.input.Keycodes">
		<name public="1" set="method" line="302" static="1">
			<f a="scancode">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Convert a scancode to a name</haxe_doc>
		</name>
		<MASK public="1" line="315" static="1"><x path="Int"/></MASK>
		<unknown public="1" line="317" static="1"><x path="Int"/></unknown>
		<key_a public="1" line="322" static="1"><x path="Int"/></key_a>
		<key_b public="1" line="323" static="1"><x path="Int"/></key_b>
		<key_c public="1" line="324" static="1"><x path="Int"/></key_c>
		<key_d public="1" line="325" static="1"><x path="Int"/></key_d>
		<key_e public="1" line="326" static="1"><x path="Int"/></key_e>
		<key_f public="1" line="327" static="1"><x path="Int"/></key_f>
		<key_g public="1" line="328" static="1"><x path="Int"/></key_g>
		<key_h public="1" line="329" static="1"><x path="Int"/></key_h>
		<key_i public="1" line="330" static="1"><x path="Int"/></key_i>
		<key_j public="1" line="331" static="1"><x path="Int"/></key_j>
		<key_k public="1" line="332" static="1"><x path="Int"/></key_k>
		<key_l public="1" line="333" static="1"><x path="Int"/></key_l>
		<key_m public="1" line="334" static="1"><x path="Int"/></key_m>
		<key_n public="1" line="335" static="1"><x path="Int"/></key_n>
		<key_o public="1" line="336" static="1"><x path="Int"/></key_o>
		<key_p public="1" line="337" static="1"><x path="Int"/></key_p>
		<key_q public="1" line="338" static="1"><x path="Int"/></key_q>
		<key_r public="1" line="339" static="1"><x path="Int"/></key_r>
		<key_s public="1" line="340" static="1"><x path="Int"/></key_s>
		<key_t public="1" line="341" static="1"><x path="Int"/></key_t>
		<key_u public="1" line="342" static="1"><x path="Int"/></key_u>
		<key_v public="1" line="343" static="1"><x path="Int"/></key_v>
		<key_w public="1" line="344" static="1"><x path="Int"/></key_w>
		<key_x public="1" line="345" static="1"><x path="Int"/></key_x>
		<key_y public="1" line="346" static="1"><x path="Int"/></key_y>
		<key_z public="1" line="347" static="1"><x path="Int"/></key_z>
		<key_1 public="1" line="349" static="1"><x path="Int"/></key_1>
		<key_2 public="1" line="350" static="1"><x path="Int"/></key_2>
		<key_3 public="1" line="351" static="1"><x path="Int"/></key_3>
		<key_4 public="1" line="352" static="1"><x path="Int"/></key_4>
		<key_5 public="1" line="353" static="1"><x path="Int"/></key_5>
		<key_6 public="1" line="354" static="1"><x path="Int"/></key_6>
		<key_7 public="1" line="355" static="1"><x path="Int"/></key_7>
		<key_8 public="1" line="356" static="1"><x path="Int"/></key_8>
		<key_9 public="1" line="357" static="1"><x path="Int"/></key_9>
		<key_0 public="1" line="358" static="1"><x path="Int"/></key_0>
		<enter public="1" line="360" static="1"><x path="Int"/></enter>
		<escape public="1" line="361" static="1"><x path="Int"/></escape>
		<backspace public="1" line="362" static="1"><x path="Int"/></backspace>
		<tab public="1" line="363" static="1"><x path="Int"/></tab>
		<space public="1" line="364" static="1"><x path="Int"/></space>
		<minus public="1" line="366" static="1"><x path="Int"/></minus>
		<equals public="1" line="367" static="1"><x path="Int"/></equals>
		<leftbracket public="1" line="368" static="1"><x path="Int"/></leftbracket>
		<rightbracket public="1" line="369" static="1"><x path="Int"/></rightbracket>
		<backslash public="1" line="385" static="1">
			<x path="Int"/>
			<haxe_doc>Located at the lower left of the return
    key on ISO keyboards and at the right end
    of the QWERTY row on ANSI keyboards.
    Produces REVERSE SOLIDUS (backslash) and
    VERTICAL LINE in a US layout, REVERSE
    SOLIDUS and VERTICAL LINE in a UK Mac
    layout, NUMBER SIGN and TILDE in a UK
    Windows layout, DOLLAR SIGN and POUND SIGN
    in a Swiss German layout, NUMBER SIGN and
    APOSTROPHE in a German layout, GRAVE
    ACCENT and POUND SIGN in a French Mac
    layout, and ASTERISK and MICRO SIGN in a
    French Windows layout.</haxe_doc>
		</backslash>
		<nonushash public="1" line="399" static="1">
			<x path="Int"/>
			<haxe_doc>ISO USB keyboards actually use this code
    instead of 49 for the same key, but all
    OSes I've seen treat the two codes
    identically. So, as an implementor, unless
    your keyboard generates both of those
    codes and your OS treats them differently,
    you should generate public static var BACKSLASH
    instead of this code. As a user, you
    should not rely on this code because SDL
    will never generate it with most (all?)
    keyboards.</haxe_doc>
		</nonushash>
		<semicolon public="1" line="400" static="1"><x path="Int"/></semicolon>
		<apostrophe public="1" line="401" static="1"><x path="Int"/></apostrophe>
		<grave public="1" line="420" static="1">
			<x path="Int"/>
			<haxe_doc>Located in the top left corner (on both ANSI
    and ISO keyboards). Produces GRAVE ACCENT and
    TILDE in a US Windows layout and in US and UK
    Mac layouts on ANSI keyboards, GRAVE ACCENT
    and NOT SIGN in a UK Windows layout, SECTION
    SIGN and PLUS-MINUS SIGN in US and UK Mac
    layouts on ISO keyboards, SECTION SIGN and
    DEGREE SIGN in a Swiss German layout (Mac:
    only on ISO keyboards); CIRCUMFLEX ACCENT and
    DEGREE SIGN in a German layout (Mac: only on
    ISO keyboards), SUPERSCRIPT TWO and TILDE in a
    French Windows layout, COMMERCIAL AT and
    NUMBER SIGN in a French Mac layout on ISO
    keyboards, and LESS-THAN SIGN and GREATER-THAN
    SIGN in a Swiss German, German, or French Mac
    layout on ANSI keyboards.</haxe_doc>
		</grave>
		<comma public="1" line="421" static="1"><x path="Int"/></comma>
		<period public="1" line="422" static="1"><x path="Int"/></period>
		<slash public="1" line="423" static="1"><x path="Int"/></slash>
		<capslock public="1" line="425" static="1"><x path="Int"/></capslock>
		<f1 public="1" line="427" static="1"><x path="Int"/></f1>
		<f2 public="1" line="428" static="1"><x path="Int"/></f2>
		<f3 public="1" line="429" static="1"><x path="Int"/></f3>
		<f4 public="1" line="430" static="1"><x path="Int"/></f4>
		<f5 public="1" line="431" static="1"><x path="Int"/></f5>
		<f6 public="1" line="432" static="1"><x path="Int"/></f6>
		<f7 public="1" line="433" static="1"><x path="Int"/></f7>
		<f8 public="1" line="434" static="1"><x path="Int"/></f8>
		<f9 public="1" line="435" static="1"><x path="Int"/></f9>
		<f10 public="1" line="436" static="1"><x path="Int"/></f10>
		<f11 public="1" line="437" static="1"><x path="Int"/></f11>
		<f12 public="1" line="438" static="1"><x path="Int"/></f12>
		<printscreen public="1" line="440" static="1"><x path="Int"/></printscreen>
		<scrolllock public="1" line="441" static="1"><x path="Int"/></scrolllock>
		<pause public="1" line="442" static="1"><x path="Int"/></pause>
		<insert public="1" line="445" static="1">
			<x path="Int"/>
			<haxe_doc>insert on PC, help on some Mac keyboards (but does send code 73, not 117)</haxe_doc>
		</insert>
		<home public="1" line="446" static="1"><x path="Int"/></home>
		<pageup public="1" line="447" static="1"><x path="Int"/></pageup>
		<delete public="1" line="448" static="1"><x path="Int"/></delete>
		<end public="1" line="449" static="1"><x path="Int"/></end>
		<pagedown public="1" line="450" static="1"><x path="Int"/></pagedown>
		<right public="1" line="451" static="1"><x path="Int"/></right>
		<left public="1" line="452" static="1"><x path="Int"/></left>
		<down public="1" line="453" static="1"><x path="Int"/></down>
		<up public="1" line="454" static="1"><x path="Int"/></up>
		<numlockclear public="1" line="457" static="1">
			<x path="Int"/>
			<haxe_doc>num lock on PC, clear on Mac keyboards</haxe_doc>
		</numlockclear>
		<kp_divide public="1" line="458" static="1"><x path="Int"/></kp_divide>
		<kp_multiply public="1" line="459" static="1"><x path="Int"/></kp_multiply>
		<kp_minus public="1" line="460" static="1"><x path="Int"/></kp_minus>
		<kp_plus public="1" line="461" static="1"><x path="Int"/></kp_plus>
		<kp_enter public="1" line="462" static="1"><x path="Int"/></kp_enter>
		<kp_1 public="1" line="463" static="1"><x path="Int"/></kp_1>
		<kp_2 public="1" line="464" static="1"><x path="Int"/></kp_2>
		<kp_3 public="1" line="465" static="1"><x path="Int"/></kp_3>
		<kp_4 public="1" line="466" static="1"><x path="Int"/></kp_4>
		<kp_5 public="1" line="467" static="1"><x path="Int"/></kp_5>
		<kp_6 public="1" line="468" static="1"><x path="Int"/></kp_6>
		<kp_7 public="1" line="469" static="1"><x path="Int"/></kp_7>
		<kp_8 public="1" line="470" static="1"><x path="Int"/></kp_8>
		<kp_9 public="1" line="471" static="1"><x path="Int"/></kp_9>
		<kp_0 public="1" line="472" static="1"><x path="Int"/></kp_0>
		<kp_period public="1" line="473" static="1"><x path="Int"/></kp_period>
		<nonusbackslash public="1" line="486" static="1">
			<x path="Int"/>
			<haxe_doc>This is the additional key that ISO
    keyboards have over ANSI ones,
    located between left shift and Y.
    Produces GRAVE ACCENT and TILDE in a
    US or UK Mac layout, REVERSE SOLIDUS
    (backslash) and VERTICAL LINE in a
    US or UK Windows layout, and
    LESS-THAN SIGN and GREATER-THAN SIGN
    in a Swiss German, German, or French
    layout.</haxe_doc>
		</nonusbackslash>
		<application public="1" line="489" static="1">
			<x path="Int"/>
			<haxe_doc>windows contextual menu, compose</haxe_doc>
		</application>
		<power public="1" line="494" static="1">
			<x path="Int"/>
			<haxe_doc>The USB document says this is a status flag,
    not a physical key - but some Mac keyboards
    do have a power key.</haxe_doc>
		</power>
		<kp_equals public="1" line="495" static="1"><x path="Int"/></kp_equals>
		<f13 public="1" line="496" static="1"><x path="Int"/></f13>
		<f14 public="1" line="497" static="1"><x path="Int"/></f14>
		<f15 public="1" line="498" static="1"><x path="Int"/></f15>
		<f16 public="1" line="499" static="1"><x path="Int"/></f16>
		<f17 public="1" line="500" static="1"><x path="Int"/></f17>
		<f18 public="1" line="501" static="1"><x path="Int"/></f18>
		<f19 public="1" line="502" static="1"><x path="Int"/></f19>
		<f20 public="1" line="503" static="1"><x path="Int"/></f20>
		<f21 public="1" line="504" static="1"><x path="Int"/></f21>
		<f22 public="1" line="505" static="1"><x path="Int"/></f22>
		<f23 public="1" line="506" static="1"><x path="Int"/></f23>
		<f24 public="1" line="507" static="1"><x path="Int"/></f24>
		<execute public="1" line="508" static="1"><x path="Int"/></execute>
		<help public="1" line="509" static="1"><x path="Int"/></help>
		<menu public="1" line="510" static="1"><x path="Int"/></menu>
		<select public="1" line="511" static="1"><x path="Int"/></select>
		<stop public="1" line="512" static="1"><x path="Int"/></stop>
		<again public="1" line="515" static="1">
			<x path="Int"/>
			<haxe_doc>redo</haxe_doc>
		</again>
		<undo public="1" line="516" static="1"><x path="Int"/></undo>
		<cut public="1" line="517" static="1"><x path="Int"/></cut>
		<copy public="1" line="518" static="1"><x path="Int"/></copy>
		<paste public="1" line="519" static="1"><x path="Int"/></paste>
		<find public="1" line="520" static="1"><x path="Int"/></find>
		<mute public="1" line="521" static="1"><x path="Int"/></mute>
		<volumeup public="1" line="522" static="1"><x path="Int"/></volumeup>
		<volumedown public="1" line="523" static="1"><x path="Int"/></volumedown>
		<kp_comma public="1" line="530" static="1"><x path="Int"/></kp_comma>
		<kp_equalsas400 public="1" line="531" static="1"><x path="Int"/></kp_equalsas400>
		<international1 public="1" line="534" static="1">
			<x path="Int"/>
			<haxe_doc>used on Asian keyboards; see footnotes in USB doc</haxe_doc>
		</international1>
		<international2 public="1" line="535" static="1"><x path="Int"/></international2>
		<international3 public="1" line="538" static="1">
			<x path="Int"/>
			<haxe_doc>Yen</haxe_doc>
		</international3>
		<international4 public="1" line="539" static="1"><x path="Int"/></international4>
		<international5 public="1" line="540" static="1"><x path="Int"/></international5>
		<international6 public="1" line="541" static="1"><x path="Int"/></international6>
		<international7 public="1" line="542" static="1"><x path="Int"/></international7>
		<international8 public="1" line="543" static="1"><x path="Int"/></international8>
		<international9 public="1" line="544" static="1"><x path="Int"/></international9>
		<lang1 public="1" line="546" static="1">
			<x path="Int"/>
			<haxe_doc>Hangul/English toggle</haxe_doc>
		</lang1>
		<lang2 public="1" line="548" static="1">
			<x path="Int"/>
			<haxe_doc>Hanja conversion</haxe_doc>
		</lang2>
		<lang3 public="1" line="550" static="1">
			<x path="Int"/>
			<haxe_doc>Katakana</haxe_doc>
		</lang3>
		<lang4 public="1" line="552" static="1">
			<x path="Int"/>
			<haxe_doc>Hiragana</haxe_doc>
		</lang4>
		<lang5 public="1" line="554" static="1">
			<x path="Int"/>
			<haxe_doc>Zenkaku/Hankaku</haxe_doc>
		</lang5>
		<lang6 public="1" line="556" static="1">
			<x path="Int"/>
			<haxe_doc>reserved</haxe_doc>
		</lang6>
		<lang7 public="1" line="558" static="1">
			<x path="Int"/>
			<haxe_doc>reserved</haxe_doc>
		</lang7>
		<lang8 public="1" line="560" static="1">
			<x path="Int"/>
			<haxe_doc>reserved</haxe_doc>
		</lang8>
		<lang9 public="1" line="562" static="1">
			<x path="Int"/>
			<haxe_doc>reserved</haxe_doc>
		</lang9>
		<alterase public="1" line="564" static="1">
			<x path="Int"/>
			<haxe_doc>Erase-Eaze</haxe_doc>
		</alterase>
		<sysreq public="1" line="565" static="1"><x path="Int"/></sysreq>
		<cancel public="1" line="566" static="1"><x path="Int"/></cancel>
		<clear public="1" line="567" static="1"><x path="Int"/></clear>
		<prior public="1" line="568" static="1"><x path="Int"/></prior>
		<return2 public="1" line="569" static="1"><x path="Int"/></return2>
		<separator public="1" line="570" static="1"><x path="Int"/></separator>
		<out public="1" line="571" static="1"><x path="Int"/></out>
		<oper public="1" line="572" static="1"><x path="Int"/></oper>
		<clearagain public="1" line="573" static="1"><x path="Int"/></clearagain>
		<crsel public="1" line="574" static="1"><x path="Int"/></crsel>
		<exsel public="1" line="575" static="1"><x path="Int"/></exsel>
		<kp_00 public="1" line="577" static="1"><x path="Int"/></kp_00>
		<kp_000 public="1" line="578" static="1"><x path="Int"/></kp_000>
		<thousandsseparator public="1" line="579" static="1"><x path="Int"/></thousandsseparator>
		<decimalseparator public="1" line="580" static="1"><x path="Int"/></decimalseparator>
		<currencyunit public="1" line="581" static="1"><x path="Int"/></currencyunit>
		<currencysubunit public="1" line="582" static="1"><x path="Int"/></currencysubunit>
		<kp_leftparen public="1" line="583" static="1"><x path="Int"/></kp_leftparen>
		<kp_rightparen public="1" line="584" static="1"><x path="Int"/></kp_rightparen>
		<kp_leftbrace public="1" line="585" static="1"><x path="Int"/></kp_leftbrace>
		<kp_rightbrace public="1" line="586" static="1"><x path="Int"/></kp_rightbrace>
		<kp_tab public="1" line="587" static="1"><x path="Int"/></kp_tab>
		<kp_backspace public="1" line="588" static="1"><x path="Int"/></kp_backspace>
		<kp_a public="1" line="589" static="1"><x path="Int"/></kp_a>
		<kp_b public="1" line="590" static="1"><x path="Int"/></kp_b>
		<kp_c public="1" line="591" static="1"><x path="Int"/></kp_c>
		<kp_d public="1" line="592" static="1"><x path="Int"/></kp_d>
		<kp_e public="1" line="593" static="1"><x path="Int"/></kp_e>
		<kp_f public="1" line="594" static="1"><x path="Int"/></kp_f>
		<kp_xor public="1" line="595" static="1"><x path="Int"/></kp_xor>
		<kp_power public="1" line="596" static="1"><x path="Int"/></kp_power>
		<kp_percent public="1" line="597" static="1"><x path="Int"/></kp_percent>
		<kp_less public="1" line="598" static="1"><x path="Int"/></kp_less>
		<kp_greater public="1" line="599" static="1"><x path="Int"/></kp_greater>
		<kp_ampersand public="1" line="600" static="1"><x path="Int"/></kp_ampersand>
		<kp_dblampersand public="1" line="601" static="1"><x path="Int"/></kp_dblampersand>
		<kp_verticalbar public="1" line="602" static="1"><x path="Int"/></kp_verticalbar>
		<kp_dblverticalbar public="1" line="603" static="1"><x path="Int"/></kp_dblverticalbar>
		<kp_colon public="1" line="604" static="1"><x path="Int"/></kp_colon>
		<kp_hash public="1" line="605" static="1"><x path="Int"/></kp_hash>
		<kp_space public="1" line="606" static="1"><x path="Int"/></kp_space>
		<kp_at public="1" line="607" static="1"><x path="Int"/></kp_at>
		<kp_exclam public="1" line="608" static="1"><x path="Int"/></kp_exclam>
		<kp_memstore public="1" line="609" static="1"><x path="Int"/></kp_memstore>
		<kp_memrecall public="1" line="610" static="1"><x path="Int"/></kp_memrecall>
		<kp_memclear public="1" line="611" static="1"><x path="Int"/></kp_memclear>
		<kp_memadd public="1" line="612" static="1"><x path="Int"/></kp_memadd>
		<kp_memsubtract public="1" line="613" static="1"><x path="Int"/></kp_memsubtract>
		<kp_memmultiply public="1" line="614" static="1"><x path="Int"/></kp_memmultiply>
		<kp_memdivide public="1" line="615" static="1"><x path="Int"/></kp_memdivide>
		<kp_plusminus public="1" line="616" static="1"><x path="Int"/></kp_plusminus>
		<kp_clear public="1" line="617" static="1"><x path="Int"/></kp_clear>
		<kp_clearentry public="1" line="618" static="1"><x path="Int"/></kp_clearentry>
		<kp_binary public="1" line="619" static="1"><x path="Int"/></kp_binary>
		<kp_octal public="1" line="620" static="1"><x path="Int"/></kp_octal>
		<kp_decimal public="1" line="621" static="1"><x path="Int"/></kp_decimal>
		<kp_hexadecimal public="1" line="622" static="1"><x path="Int"/></kp_hexadecimal>
		<lctrl public="1" line="624" static="1"><x path="Int"/></lctrl>
		<lshift public="1" line="625" static="1"><x path="Int"/></lshift>
		<lalt public="1" line="627" static="1">
			<x path="Int"/>
			<haxe_doc>alt, option</haxe_doc>
		</lalt>
		<lmeta public="1" line="629" static="1">
			<x path="Int"/>
			<haxe_doc>windows, command (apple), meta</haxe_doc>
		</lmeta>
		<rctrl public="1" line="630" static="1"><x path="Int"/></rctrl>
		<rshift public="1" line="631" static="1"><x path="Int"/></rshift>
		<ralt public="1" line="633" static="1">
			<x path="Int"/>
			<haxe_doc>alt gr, option</haxe_doc>
		</ralt>
		<rmeta public="1" line="635" static="1">
			<x path="Int"/>
			<haxe_doc>windows, command (apple), meta</haxe_doc>
		</rmeta>
		<mode public="1" line="640" static="1">
			<x path="Int"/>
			<haxe_doc>Not sure if this is really not covered
    by any of the above, but since there's a
    special KMOD_MODE for it I'm adding it here</haxe_doc>
		</mode>
		<audionext public="1" line="647" static="1"><x path="Int"/></audionext>
		<audioprev public="1" line="648" static="1"><x path="Int"/></audioprev>
		<audiostop public="1" line="649" static="1"><x path="Int"/></audiostop>
		<audioplay public="1" line="650" static="1"><x path="Int"/></audioplay>
		<audiomute public="1" line="651" static="1"><x path="Int"/></audiomute>
		<mediaselect public="1" line="652" static="1"><x path="Int"/></mediaselect>
		<www public="1" line="653" static="1"><x path="Int"/></www>
		<mail public="1" line="654" static="1"><x path="Int"/></mail>
		<calculator public="1" line="655" static="1"><x path="Int"/></calculator>
		<computer public="1" line="656" static="1"><x path="Int"/></computer>
		<ac_search public="1" line="657" static="1"><x path="Int"/></ac_search>
		<ac_home public="1" line="658" static="1"><x path="Int"/></ac_home>
		<ac_back public="1" line="659" static="1"><x path="Int"/></ac_back>
		<ac_forward public="1" line="660" static="1"><x path="Int"/></ac_forward>
		<ac_stop public="1" line="661" static="1"><x path="Int"/></ac_stop>
		<ac_refresh public="1" line="662" static="1"><x path="Int"/></ac_refresh>
		<ac_bookmarks public="1" line="663" static="1"><x path="Int"/></ac_bookmarks>
		<brightnessdown public="1" line="668" static="1"><x path="Int"/></brightnessdown>
		<brightnessup public="1" line="669" static="1"><x path="Int"/></brightnessup>
		<displayswitch public="1" line="672" static="1">
			<x path="Int"/>
			<haxe_doc>display mirroring/dual display switch, video mode switch</haxe_doc>
		</displayswitch>
		<kbdillumtoggle public="1" line="674" static="1"><x path="Int"/></kbdillumtoggle>
		<kbdillumdown public="1" line="675" static="1"><x path="Int"/></kbdillumdown>
		<kbdillumup public="1" line="676" static="1"><x path="Int"/></kbdillumup>
		<eject public="1" line="677" static="1"><x path="Int"/></eject>
		<sleep public="1" line="678" static="1"><x path="Int"/></sleep>
		<app1 public="1" line="680" static="1"><x path="Int"/></app1>
		<app2 public="1" line="681" static="1"><x path="Int"/></app2>
		<scancode_names line="683" static="1"><c path="Array"><c path="String"/></c></scancode_names>
		<haxe_doc>The scancode class. The values below come directly from SDL header include files,
but they aren't specific to SDL so they are used generically</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.input.Keycodes" params="" file="/Users/sven/dev/snow/snow/input/Keycodes.hx">
		<from_scan public="1" set="method" line="9" static="1">
			<f a="scancode">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Convert a scancode to a keycode for comparison</haxe_doc>
		</from_scan>
		<name public="1" set="method" line="14" static="1">
			<f a="keycode">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Convert a keycode to string</haxe_doc>
		</name>
		<unknown public="1" line="42" static="1"><x path="Int"/></unknown>
		<enter public="1" line="44" static="1"><x path="Int"/></enter>
		<escape public="1" line="45" static="1"><x path="Int"/></escape>
		<backspace public="1" line="46" static="1"><x path="Int"/></backspace>
		<tab public="1" line="47" static="1"><x path="Int"/></tab>
		<space public="1" line="48" static="1"><x path="Int"/></space>
		<exclaim public="1" line="49" static="1"><x path="Int"/></exclaim>
		<quotedbl public="1" line="50" static="1"><x path="Int"/></quotedbl>
		<hash public="1" line="51" static="1"><x path="Int"/></hash>
		<percent public="1" line="52" static="1"><x path="Int"/></percent>
		<dollar public="1" line="53" static="1"><x path="Int"/></dollar>
		<ampersand public="1" line="54" static="1"><x path="Int"/></ampersand>
		<quote public="1" line="55" static="1"><x path="Int"/></quote>
		<leftparen public="1" line="56" static="1"><x path="Int"/></leftparen>
		<rightparen public="1" line="57" static="1"><x path="Int"/></rightparen>
		<asterisk public="1" line="58" static="1"><x path="Int"/></asterisk>
		<plus public="1" line="59" static="1"><x path="Int"/></plus>
		<comma public="1" line="60" static="1"><x path="Int"/></comma>
		<minus public="1" line="61" static="1"><x path="Int"/></minus>
		<period public="1" line="62" static="1"><x path="Int"/></period>
		<slash public="1" line="63" static="1"><x path="Int"/></slash>
		<key_0 public="1" line="64" static="1"><x path="Int"/></key_0>
		<key_1 public="1" line="65" static="1"><x path="Int"/></key_1>
		<key_2 public="1" line="66" static="1"><x path="Int"/></key_2>
		<key_3 public="1" line="67" static="1"><x path="Int"/></key_3>
		<key_4 public="1" line="68" static="1"><x path="Int"/></key_4>
		<key_5 public="1" line="69" static="1"><x path="Int"/></key_5>
		<key_6 public="1" line="70" static="1"><x path="Int"/></key_6>
		<key_7 public="1" line="71" static="1"><x path="Int"/></key_7>
		<key_8 public="1" line="72" static="1"><x path="Int"/></key_8>
		<key_9 public="1" line="73" static="1"><x path="Int"/></key_9>
		<colon public="1" line="74" static="1"><x path="Int"/></colon>
		<semicolon public="1" line="75" static="1"><x path="Int"/></semicolon>
		<less public="1" line="76" static="1"><x path="Int"/></less>
		<equals public="1" line="77" static="1"><x path="Int"/></equals>
		<greater public="1" line="78" static="1"><x path="Int"/></greater>
		<question public="1" line="79" static="1"><x path="Int"/></question>
		<at public="1" line="80" static="1"><x path="Int"/></at>
		<leftbracket public="1" line="84" static="1"><x path="Int"/></leftbracket>
		<backslash public="1" line="85" static="1"><x path="Int"/></backslash>
		<rightbracket public="1" line="86" static="1"><x path="Int"/></rightbracket>
		<caret public="1" line="87" static="1"><x path="Int"/></caret>
		<underscore public="1" line="88" static="1"><x path="Int"/></underscore>
		<backquote public="1" line="89" static="1"><x path="Int"/></backquote>
		<key_a public="1" line="90" static="1"><x path="Int"/></key_a>
		<key_b public="1" line="91" static="1"><x path="Int"/></key_b>
		<key_c public="1" line="92" static="1"><x path="Int"/></key_c>
		<key_d public="1" line="93" static="1"><x path="Int"/></key_d>
		<key_e public="1" line="94" static="1"><x path="Int"/></key_e>
		<key_f public="1" line="95" static="1"><x path="Int"/></key_f>
		<key_g public="1" line="96" static="1"><x path="Int"/></key_g>
		<key_h public="1" line="97" static="1"><x path="Int"/></key_h>
		<key_i public="1" line="98" static="1"><x path="Int"/></key_i>
		<key_j public="1" line="99" static="1"><x path="Int"/></key_j>
		<key_k public="1" line="100" static="1"><x path="Int"/></key_k>
		<key_l public="1" line="101" static="1"><x path="Int"/></key_l>
		<key_m public="1" line="102" static="1"><x path="Int"/></key_m>
		<key_n public="1" line="103" static="1"><x path="Int"/></key_n>
		<key_o public="1" line="104" static="1"><x path="Int"/></key_o>
		<key_p public="1" line="105" static="1"><x path="Int"/></key_p>
		<key_q public="1" line="106" static="1"><x path="Int"/></key_q>
		<key_r public="1" line="107" static="1"><x path="Int"/></key_r>
		<key_s public="1" line="108" static="1"><x path="Int"/></key_s>
		<key_t public="1" line="109" static="1"><x path="Int"/></key_t>
		<key_u public="1" line="110" static="1"><x path="Int"/></key_u>
		<key_v public="1" line="111" static="1"><x path="Int"/></key_v>
		<key_w public="1" line="112" static="1"><x path="Int"/></key_w>
		<key_x public="1" line="113" static="1"><x path="Int"/></key_x>
		<key_y public="1" line="114" static="1"><x path="Int"/></key_y>
		<key_z public="1" line="115" static="1"><x path="Int"/></key_z>
		<capslock public="1" line="117" static="1"><x path="Int"/></capslock>
		<f1 public="1" line="119" static="1"><x path="Int"/></f1>
		<f2 public="1" line="120" static="1"><x path="Int"/></f2>
		<f3 public="1" line="121" static="1"><x path="Int"/></f3>
		<f4 public="1" line="122" static="1"><x path="Int"/></f4>
		<f5 public="1" line="123" static="1"><x path="Int"/></f5>
		<f6 public="1" line="124" static="1"><x path="Int"/></f6>
		<f7 public="1" line="125" static="1"><x path="Int"/></f7>
		<f8 public="1" line="126" static="1"><x path="Int"/></f8>
		<f9 public="1" line="127" static="1"><x path="Int"/></f9>
		<f10 public="1" line="128" static="1"><x path="Int"/></f10>
		<f11 public="1" line="129" static="1"><x path="Int"/></f11>
		<f12 public="1" line="130" static="1"><x path="Int"/></f12>
		<printscreen public="1" line="132" static="1"><x path="Int"/></printscreen>
		<scrolllock public="1" line="133" static="1"><x path="Int"/></scrolllock>
		<pause public="1" line="134" static="1"><x path="Int"/></pause>
		<insert public="1" line="135" static="1"><x path="Int"/></insert>
		<home public="1" line="136" static="1"><x path="Int"/></home>
		<pageup public="1" line="137" static="1"><x path="Int"/></pageup>
		<delete public="1" line="138" static="1"><x path="Int"/></delete>
		<end public="1" line="139" static="1"><x path="Int"/></end>
		<pagedown public="1" line="140" static="1"><x path="Int"/></pagedown>
		<right public="1" line="141" static="1"><x path="Int"/></right>
		<left public="1" line="142" static="1"><x path="Int"/></left>
		<down public="1" line="143" static="1"><x path="Int"/></down>
		<up public="1" line="144" static="1"><x path="Int"/></up>
		<numlockclear public="1" line="146" static="1"><x path="Int"/></numlockclear>
		<kp_divide public="1" line="147" static="1"><x path="Int"/></kp_divide>
		<kp_multiply public="1" line="148" static="1"><x path="Int"/></kp_multiply>
		<kp_minus public="1" line="149" static="1"><x path="Int"/></kp_minus>
		<kp_plus public="1" line="150" static="1"><x path="Int"/></kp_plus>
		<kp_enter public="1" line="151" static="1"><x path="Int"/></kp_enter>
		<kp_1 public="1" line="152" static="1"><x path="Int"/></kp_1>
		<kp_2 public="1" line="153" static="1"><x path="Int"/></kp_2>
		<kp_3 public="1" line="154" static="1"><x path="Int"/></kp_3>
		<kp_4 public="1" line="155" static="1"><x path="Int"/></kp_4>
		<kp_5 public="1" line="156" static="1"><x path="Int"/></kp_5>
		<kp_6 public="1" line="157" static="1"><x path="Int"/></kp_6>
		<kp_7 public="1" line="158" static="1"><x path="Int"/></kp_7>
		<kp_8 public="1" line="159" static="1"><x path="Int"/></kp_8>
		<kp_9 public="1" line="160" static="1"><x path="Int"/></kp_9>
		<kp_0 public="1" line="161" static="1"><x path="Int"/></kp_0>
		<kp_period public="1" line="162" static="1"><x path="Int"/></kp_period>
		<application public="1" line="164" static="1"><x path="Int"/></application>
		<power public="1" line="165" static="1"><x path="Int"/></power>
		<kp_equals public="1" line="166" static="1"><x path="Int"/></kp_equals>
		<f13 public="1" line="167" static="1"><x path="Int"/></f13>
		<f14 public="1" line="168" static="1"><x path="Int"/></f14>
		<f15 public="1" line="169" static="1"><x path="Int"/></f15>
		<f16 public="1" line="170" static="1"><x path="Int"/></f16>
		<f17 public="1" line="171" static="1"><x path="Int"/></f17>
		<f18 public="1" line="172" static="1"><x path="Int"/></f18>
		<f19 public="1" line="173" static="1"><x path="Int"/></f19>
		<f20 public="1" line="174" static="1"><x path="Int"/></f20>
		<f21 public="1" line="175" static="1"><x path="Int"/></f21>
		<f22 public="1" line="176" static="1"><x path="Int"/></f22>
		<f23 public="1" line="177" static="1"><x path="Int"/></f23>
		<f24 public="1" line="178" static="1"><x path="Int"/></f24>
		<execute public="1" line="179" static="1"><x path="Int"/></execute>
		<help public="1" line="180" static="1"><x path="Int"/></help>
		<menu public="1" line="181" static="1"><x path="Int"/></menu>
		<select public="1" line="182" static="1"><x path="Int"/></select>
		<stop public="1" line="183" static="1"><x path="Int"/></stop>
		<again public="1" line="184" static="1"><x path="Int"/></again>
		<undo public="1" line="185" static="1"><x path="Int"/></undo>
		<cut public="1" line="186" static="1"><x path="Int"/></cut>
		<copy public="1" line="187" static="1"><x path="Int"/></copy>
		<paste public="1" line="188" static="1"><x path="Int"/></paste>
		<find public="1" line="189" static="1"><x path="Int"/></find>
		<mute public="1" line="190" static="1"><x path="Int"/></mute>
		<volumeup public="1" line="191" static="1"><x path="Int"/></volumeup>
		<volumedown public="1" line="192" static="1"><x path="Int"/></volumedown>
		<kp_comma public="1" line="193" static="1"><x path="Int"/></kp_comma>
		<kp_equalsas400 public="1" line="194" static="1"><x path="Int"/></kp_equalsas400>
		<alterase public="1" line="196" static="1"><x path="Int"/></alterase>
		<sysreq public="1" line="197" static="1"><x path="Int"/></sysreq>
		<cancel public="1" line="198" static="1"><x path="Int"/></cancel>
		<clear public="1" line="199" static="1"><x path="Int"/></clear>
		<prior public="1" line="200" static="1"><x path="Int"/></prior>
		<return2 public="1" line="201" static="1"><x path="Int"/></return2>
		<separator public="1" line="202" static="1"><x path="Int"/></separator>
		<out public="1" line="203" static="1"><x path="Int"/></out>
		<oper public="1" line="204" static="1"><x path="Int"/></oper>
		<clearagain public="1" line="205" static="1"><x path="Int"/></clearagain>
		<crsel public="1" line="206" static="1"><x path="Int"/></crsel>
		<exsel public="1" line="207" static="1"><x path="Int"/></exsel>
		<kp_00 public="1" line="209" static="1"><x path="Int"/></kp_00>
		<kp_000 public="1" line="210" static="1"><x path="Int"/></kp_000>
		<thousandsseparator public="1" line="211" static="1"><x path="Int"/></thousandsseparator>
		<decimalseparator public="1" line="212" static="1"><x path="Int"/></decimalseparator>
		<currencyunit public="1" line="213" static="1"><x path="Int"/></currencyunit>
		<currencysubunit public="1" line="214" static="1"><x path="Int"/></currencysubunit>
		<kp_leftparen public="1" line="215" static="1"><x path="Int"/></kp_leftparen>
		<kp_rightparen public="1" line="216" static="1"><x path="Int"/></kp_rightparen>
		<kp_leftbrace public="1" line="217" static="1"><x path="Int"/></kp_leftbrace>
		<kp_rightbrace public="1" line="218" static="1"><x path="Int"/></kp_rightbrace>
		<kp_tab public="1" line="219" static="1"><x path="Int"/></kp_tab>
		<kp_backspace public="1" line="220" static="1"><x path="Int"/></kp_backspace>
		<kp_a public="1" line="221" static="1"><x path="Int"/></kp_a>
		<kp_b public="1" line="222" static="1"><x path="Int"/></kp_b>
		<kp_c public="1" line="223" static="1"><x path="Int"/></kp_c>
		<kp_d public="1" line="224" static="1"><x path="Int"/></kp_d>
		<kp_e public="1" line="225" static="1"><x path="Int"/></kp_e>
		<kp_f public="1" line="226" static="1"><x path="Int"/></kp_f>
		<kp_xor public="1" line="227" static="1"><x path="Int"/></kp_xor>
		<kp_power public="1" line="228" static="1"><x path="Int"/></kp_power>
		<kp_percent public="1" line="229" static="1"><x path="Int"/></kp_percent>
		<kp_less public="1" line="230" static="1"><x path="Int"/></kp_less>
		<kp_greater public="1" line="231" static="1"><x path="Int"/></kp_greater>
		<kp_ampersand public="1" line="232" static="1"><x path="Int"/></kp_ampersand>
		<kp_dblampersand public="1" line="233" static="1"><x path="Int"/></kp_dblampersand>
		<kp_verticalbar public="1" line="234" static="1"><x path="Int"/></kp_verticalbar>
		<kp_dblverticalbar public="1" line="235" static="1"><x path="Int"/></kp_dblverticalbar>
		<kp_colon public="1" line="236" static="1"><x path="Int"/></kp_colon>
		<kp_hash public="1" line="237" static="1"><x path="Int"/></kp_hash>
		<kp_space public="1" line="238" static="1"><x path="Int"/></kp_space>
		<kp_at public="1" line="239" static="1"><x path="Int"/></kp_at>
		<kp_exclam public="1" line="240" static="1"><x path="Int"/></kp_exclam>
		<kp_memstore public="1" line="241" static="1"><x path="Int"/></kp_memstore>
		<kp_memrecall public="1" line="242" static="1"><x path="Int"/></kp_memrecall>
		<kp_memclear public="1" line="243" static="1"><x path="Int"/></kp_memclear>
		<kp_memadd public="1" line="244" static="1"><x path="Int"/></kp_memadd>
		<kp_memsubtract public="1" line="245" static="1"><x path="Int"/></kp_memsubtract>
		<kp_memmultiply public="1" line="246" static="1"><x path="Int"/></kp_memmultiply>
		<kp_memdivide public="1" line="247" static="1"><x path="Int"/></kp_memdivide>
		<kp_plusminus public="1" line="248" static="1"><x path="Int"/></kp_plusminus>
		<kp_clear public="1" line="249" static="1"><x path="Int"/></kp_clear>
		<kp_clearentry public="1" line="250" static="1"><x path="Int"/></kp_clearentry>
		<kp_binary public="1" line="251" static="1"><x path="Int"/></kp_binary>
		<kp_octal public="1" line="252" static="1"><x path="Int"/></kp_octal>
		<kp_decimal public="1" line="253" static="1"><x path="Int"/></kp_decimal>
		<kp_hexadecimal public="1" line="254" static="1"><x path="Int"/></kp_hexadecimal>
		<lctrl public="1" line="256" static="1"><x path="Int"/></lctrl>
		<lshift public="1" line="257" static="1"><x path="Int"/></lshift>
		<lalt public="1" line="258" static="1"><x path="Int"/></lalt>
		<lmeta public="1" line="259" static="1"><x path="Int"/></lmeta>
		<rctrl public="1" line="260" static="1"><x path="Int"/></rctrl>
		<rshift public="1" line="261" static="1"><x path="Int"/></rshift>
		<ralt public="1" line="262" static="1"><x path="Int"/></ralt>
		<rmeta public="1" line="263" static="1"><x path="Int"/></rmeta>
		<mode public="1" line="265" static="1"><x path="Int"/></mode>
		<audionext public="1" line="267" static="1"><x path="Int"/></audionext>
		<audioprev public="1" line="268" static="1"><x path="Int"/></audioprev>
		<audiostop public="1" line="269" static="1"><x path="Int"/></audiostop>
		<audioplay public="1" line="270" static="1"><x path="Int"/></audioplay>
		<audiomute public="1" line="271" static="1"><x path="Int"/></audiomute>
		<mediaselect public="1" line="272" static="1"><x path="Int"/></mediaselect>
		<www public="1" line="273" static="1"><x path="Int"/></www>
		<mail public="1" line="274" static="1"><x path="Int"/></mail>
		<calculator public="1" line="275" static="1"><x path="Int"/></calculator>
		<computer public="1" line="276" static="1"><x path="Int"/></computer>
		<ac_search public="1" line="277" static="1"><x path="Int"/></ac_search>
		<ac_home public="1" line="278" static="1"><x path="Int"/></ac_home>
		<ac_back public="1" line="279" static="1"><x path="Int"/></ac_back>
		<ac_forward public="1" line="280" static="1"><x path="Int"/></ac_forward>
		<ac_stop public="1" line="281" static="1"><x path="Int"/></ac_stop>
		<ac_refresh public="1" line="282" static="1"><x path="Int"/></ac_refresh>
		<ac_bookmarks public="1" line="283" static="1"><x path="Int"/></ac_bookmarks>
		<brightnessdown public="1" line="285" static="1"><x path="Int"/></brightnessdown>
		<brightnessup public="1" line="286" static="1"><x path="Int"/></brightnessup>
		<displayswitch public="1" line="287" static="1"><x path="Int"/></displayswitch>
		<kbdillumtoggle public="1" line="288" static="1"><x path="Int"/></kbdillumtoggle>
		<kbdillumdown public="1" line="289" static="1"><x path="Int"/></kbdillumdown>
		<kbdillumup public="1" line="290" static="1"><x path="Int"/></kbdillumup>
		<eject public="1" line="291" static="1"><x path="Int"/></eject>
		<sleep public="1" line="292" static="1"><x path="Int"/></sleep>
		<haxe_doc>The keycode class, with conversion helpers for scancodes. The values below come directly from SDL header include files,
but they aren't specific to SDL so they are used generically</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.io.IO" params="" file="/Users/sven/dev/snow/snow/io/IO.hx">
		<lib public="1">
			<c path="snow.Snow"/>
			<meta><m n=":noCompletion"/></meta>
		</lib>
		<platform public="1">
			<t path="snow.io.IOSystem"/>
			<meta><m n=":noCompletion"/></meta>
		</platform>
		<url_open public="1" set="method" line="24">
			<f a="_url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Call this to open a url in the default browser</haxe_doc>
		</url_open>
		<on_event public="1" set="method" line="31">
			<f a="_event">
				<t path="snow.types.SystemEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Called by Snow when a system event happens.</haxe_doc>
		</on_event>
		<update public="1" set="method" line="38">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Called by Snow, update any IO related processing</haxe_doc>
		</update>
		<destroy public="1" set="method" line="45">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Called by Snow, cleans up IO</haxe_doc>
		</destroy>
		<new public="1" set="method" line="13">
			<f a="_lib">
				<c path="snow.Snow"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>constructed internally, use `app.io`</haxe_doc>
		</new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="snow.io.IOSystem" params="" file="/Users/sven/dev/snow/snow/io/IOSystem.hx">
		<c path="snow.platform.native.io.IOSystem"/>
		<meta><m n=":noCompletion"/></meta>
	</typedef>
	<class path="snow.io.IOSystemBinding" params="" file="/Users/sven/dev/snow/snow/io/IOSystem.hx" module="snow.io.IOSystem">
		<implements path="snow.utils.AbstractClass"/>
		<manager public="1"><c path="snow.io.IO"/></manager>
		<lib public="1"><c path="snow.Snow"/></lib>
		<init public="1" set="method" line="23">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the IO manager initiates this system</haxe_doc>
		</init>
		<process public="1" set="method" line="25">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the IO manager updates this system</haxe_doc>
		</process>
		<destroy public="1" set="method" line="27">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the IO manager destroys this system</haxe_doc>
		</destroy>
		<on_event public="1" set="method" line="29">
			<f a="_event">
				<t path="snow.types.SystemEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when the IO manager forwards an event to this system</haxe_doc>
		</on_event>
		<url_open public="1" set="method" line="31">
			<f a="_url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Call this to open a url in the default browser</haxe_doc>
		</url_open>
		<watch_add public="1" set="method" line="38">
			<f a="_path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Call this to add a directory to watch for file change notifications.
                This is for directories only. Children files + sub folders children files will notify of change.
                supports:`windows` `mac` `linux` only</haxe_doc>
		</watch_add>
		<watch_remove public="1" set="method" line="41">
			<f a="_path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Call this to remove a watched directory.
                supports:`windows` `mac` `linux` only</haxe_doc>
		</watch_remove>
		<dialog_open public="1" set="method" line="45">
			<f a="?_title:?_filters" v="'Select file':null">
				<c path="String"/>
				<c path="Array"><t path="snow.types.FileFilter"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Call this to open a native platform file open dialog.
                Returns a blank string if they cancel or any error occurs.
                supports: `windows` `mac` `linux`</haxe_doc>
		</dialog_open>
		<dialog_save public="1" set="method" line="49">
			<f a="?_title:?_filter" v="'Save file':null">
				<c path="String"/>
				<t path="snow.types.FileFilter"/>
				<c path="String"/>
			</f>
			<haxe_doc>Call this to open a native platform file save dialog.
                Returns a blank string if they cancel or any error occurs.
                supports:`windows` `mac` `linux`</haxe_doc>
		</dialog_save>
		<dialog_folder public="1" set="method" line="53">
			<f a="?_title" v="'Select folder'">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Call this to open a native platform folder select dialog.
                Returns a blank string if they cancel or any error occurs.
                supports:`windows` `mac` `linux`</haxe_doc>
		</dialog_folder>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="snow.utils.Libs" params="" file="/Users/sven/dev/snow/snow/utils/Libs.hx">
		<__moduleNames line="6" static="1">
			<x path="Map">
				<c path="String"/>
				<c path="String"/>
			</x>
			<meta><m n=":noCompletion"/></meta>
		</__moduleNames>
		<tryLoad set="method" line="8" static="1"><f a="name:library:func:args">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<d/>
</f></tryLoad>
		<findHaxeLib set="method" line="64" static="1"><f a="library">
	<c path="String"/>
	<c path="String"/>
</f></findHaxeLib>
		<get_system_name set="method" line="108" static="1"><f a=""><c path="String"/></f></get_system_name>
		<load public="1" set="method" line="160" static="1"><f a="library:method:?args" v="::0">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<d/>
</f></load>
		<loaderTrace set="method" line="222" static="1"><f a="message">
	<c path="String"/>
	<x path="Void"/>
</f></loaderTrace>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="sys.io.Process" params="" file="/usr/lib/haxe/std/cpp/_std/sys/io/Process.hx">
		<_run line="123" static="1"><f a=":">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<unknown/>
</f></_run>
		<_close line="126" static="1"><f a="">
	<d/>
	<unknown/>
</f></_close>
		<p><d/></p>
		<stdout public="1" set="null"><c path="haxe.io.Input"/></stdout>
		<stderr public="1" set="null"><c path="haxe.io.Input"/></stderr>
		<stdin public="1" set="null"><c path="haxe.io.Output"/></stdin>
		<close public="1" set="method" line="115"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="100"><f a="cmd:args">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.io._Process.Stdin" params="" file="/usr/lib/haxe/std/cpp/_std/sys/io/Process.hx" private="1" module="sys.io.Process">
		<extends path="haxe.io.Output"/>
		<_stdin_write line="53" static="1"><f a=":::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></_stdin_write>
		<p><d/></p>
		<buf><c path="haxe.io.Bytes"/></buf>
		<writeByte public="1" set="method" line="39" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="44" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<new public="1" set="method" line="29"><f a="p">
	<unknown/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="sys.io._Process.Stdout" params="" file="/usr/lib/haxe/std/cpp/_std/sys/io/Process.hx" private="1" module="sys.io.Process">
		<extends path="haxe.io.Input"/>
		<_stdout_read line="87" static="1"><f a=":::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></_stdout_read>
		<_stderr_read line="88" static="1"><f a=":::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></_stderr_read>
		<p><d/></p>
		<out><x path="Bool"/></out>
		<buf><c path="haxe.io.Bytes"/></buf>
		<readByte public="1" set="method" line="70" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="76" override="1"><f a="str:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="64"><f a="p:out">
	<unknown/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.platform.native.Core" params="" file="/Users/sven/dev/snow/snow/platform/native/Core.hx">
		<extends path="snow.CoreBinding"/>
		<snow_init line="62" static="1"><f a=":">
	<f a="">
		<t path="snow.types.SystemEvent"/>
		<x path="Void"/>
	</f>
	<a>
		<log_level><x path="Int"/></log_level>
		<has_loop><t path="Null"><x path="Bool"/></t></has_loop>
	</a>
	<unknown/>
</f></snow_init>
		<snow_shutdown line="63" static="1"><f a=""><unknown/></f></snow_shutdown>
		<snow_timestamp line="64" static="1"><f a=""><x path="Float"/></f></snow_timestamp>
		<snow_app_path line="66" static="1"><f a=""><c path="String"/></f></snow_app_path>
		<snow_pref_path line="67" static="1"><f a=":">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></snow_pref_path>
		<start_timestamp><x path="Float"/></start_timestamp>
		<init public="1" set="method" line="30" override="1">
			<f a="_event_handler">
				<f a="">
					<t path="snow.types.SystemEvent"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Called by the snow internals to intiialize the core and subsystems of the framework, with the event handler passed in for where to deliver system events</haxe_doc>
		</init>
		<shutdown public="1" set="method" line="42" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called to explicitly shutdown the framework cleanly. Called by `quit` and `app_terminated` type events by the core, for example.</haxe_doc>
		</shutdown>
		<timestamp public="1" set="method" line="47" override="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Get the most precise timestamp available on the platform, in seconds (time is always in seconds in snow)</haxe_doc>
		</timestamp>
		<app_path public="1" set="method" line="53" override="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return the full path that the application is located</haxe_doc>
		</app_path>
		<pref_path public="1" set="method" line="58" override="1">
			<f a="_appname:_package">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>On platforms where this makes sense, get the application specific writeable data path</haxe_doc>
		</pref_path>
		<new public="1" set="method" line="25"><f a="_app">
	<c path="snow.Snow"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Implemented in the platform specific concrete versions of this class</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.platform.native.StaticSnow" params="" file="/Users/sven/dev/snow/snow/platform/native/StaticSnow.hx"><meta>
	<m n=":keep"/>
	<m n=":cppFileCode"><e>"extern \"C\" void snow_register_prims();"</e></m>
	<m n=":buildXml"><e><![CDATA["\n\n<set name='MSVC_LIB_VERSION' value='-${MSVC_VER}' if='windows'/>\n<set name='DEBUG_SNOW' value='${DBG}' if='debug_snow'/>\n<target id='haxe'>\n  <lib name='${haxelib:snow}/ndll/${BINDIR}/libsnow${DEBUG_SNOW}${LIBEXTRA}${LIBEXT}'/>\n\n    <section if='mac'>\n        <vflag name='-l' value='iconv'/>\n        <vflag name='-framework' value='IOKit' />\n        <vflag name='-framework' value='Foundation' />\n        <vflag name='-framework' value='CoreAudio' />\n        <vflag name='-framework' value='Cocoa' />\n        <vflag name='-framework' value='OpenGL' />\n        <vflag name='-framework' value='AudioToolbox' />\n        <vflag name='-framework' value='AudioUnit' />\n        <vflag name='-framework' value='ForceFeedback' />\n        <vflag name='-framework' value='Carbon' />\n        <vflag name='-framework' value='AppKit' />\n        <vflag name='-framework' value='OpenAL'/>\n    </section>\n\n    <section if='windows'>\n\n        <lib name='gdi32.lib' />\n        <lib name='opengl32.lib' />\n        <lib name='user32.lib' />\n        <lib name='kernel32.lib' />\n        <lib name='advapi32.lib' />\n        <lib name='winmm.lib' />\n        <lib name='imm32.lib'  />\n        <lib name='ole32.lib' />\n        <lib name='oleaut32.lib' />\n        <lib name='version.lib' />\n        <lib name='ws2_32.lib'  />\n        <lib name='wldap32.lib' />\n        <lib name='shell32.lib' />\n        <lib name='comdlg32.lib' />\n\n     </section>\n\n    <section if='linux'>\n\n        <lib name='${HXCPP}/lib/${BINDIR}/liblinuxcompat.a' />\n        <lib name='-lpthread' />\n        <lib name='-lrt' />\n        <lib name='-lGL' />\n\n            <!-- These are from `pkg-config --libs gtk+-3.0` -->\n        <lib name='-lgtk-3'  unless='SNOW_NO_GTK'/>\n        <lib name='-lgdk-3' unless='SNOW_NO_GTK'/>\n        <lib name='-latk-1.0' unless='SNOW_NO_GTK'/>\n        <lib name='-lgio-2.0' unless='SNOW_NO_GTK'/>\n        <lib name='-lpangocairo-1.0' unless='SNOW_NO_GTK'/>\n        <lib name='-lgdk_pixbuf-2.0' unless='SNOW_NO_GTK'/>\n        <lib name='-lcairo-gobject' unless='SNOW_NO_GTK'/>\n        <lib name='-lpango-1.0' unless='SNOW_NO_GTK'/>\n        <lib name='-lcairo' unless='SNOW_NO_GTK'/>\n        <lib name='-lgobject-2.0' unless='SNOW_NO_GTK'/>\n        <lib name='-lglib-2.0'  unless='SNOW_NO_GTK'/>\n\n     </section>\n\n</target>\n"]]></e></m>
	<m n=":keep"/>
</meta></class>
	<class path="snow.platform.native.assets.AssetSystem" params="" file="/Users/sven/dev/snow/snow/platform/native/assets/AssetSystem.hx">
		<extends path="snow.assets.AssetSystemBinding"/>
		<snow_assets_image_load_info line="238" static="1"><f a=":">
	<c path="String"/>
	<t path="Null"><x path="Int"/></t>
	<a>
		<width set="null"><x path="Int"/></width>
		<id set="null"><c path="String"/></id>
		<height set="null"><x path="Int"/></height>
		<data set="null"><unknown/></data>
		<bpp_source set="null"><x path="Int"/></bpp_source>
		<bpp set="null"><x path="Int"/></bpp>
	</a>
</f></snow_assets_image_load_info>
		<snow_assets_image_info_from_bytes line="239" static="1"><f a="::">
	<c path="String"/>
	<t path="snow.utils.ByteArray"/>
	<t path="Null"><x path="Int"/></t>
	<a>
		<width set="null"><x path="Int"/></width>
		<id set="null"><c path="String"/></id>
		<height set="null"><x path="Int"/></height>
		<data set="null"><unknown/></data>
		<bpp_source set="null"><x path="Int"/></bpp_source>
		<bpp set="null"><x path="Int"/></bpp>
	</a>
</f></snow_assets_image_info_from_bytes>
		<snow_assets_audio_load_info_ogg line="241" static="1"><f a=":">
	<c path="String"/>
	<t path="Null"><x path="Bool"/></t>
	<t path="snow.types.AudioInfo"/>
</f></snow_assets_audio_load_info_ogg>
		<snow_assets_audio_read_bytes_ogg line="242" static="1"><f a="::">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.types.AudioDataBlob"/>
</f></snow_assets_audio_read_bytes_ogg>
		<snow_assets_audio_seek_bytes_ogg line="243" static="1"><f a=":">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></snow_assets_audio_seek_bytes_ogg>
		<snow_assets_audio_load_info_wav line="245" static="1"><f a=":">
	<c path="String"/>
	<t path="Null"><x path="Bool"/></t>
	<t path="snow.types.AudioInfo"/>
</f></snow_assets_audio_load_info_wav>
		<snow_assets_audio_read_bytes_wav line="246" static="1"><f a="::">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.types.AudioDataBlob"/>
</f></snow_assets_audio_read_bytes_wav>
		<snow_assets_audio_seek_bytes_wav line="247" static="1"><f a=":">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></snow_assets_audio_seek_bytes_wav>
		<snow_assets_audio_load_info_pcm line="249" static="1"><f a=":">
	<c path="String"/>
	<t path="Null"><x path="Bool"/></t>
	<t path="snow.types.AudioInfo"/>
</f></snow_assets_audio_load_info_pcm>
		<snow_assets_audio_read_bytes_pcm line="250" static="1"><f a="::">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.types.AudioDataBlob"/>
</f></snow_assets_audio_read_bytes_pcm>
		<snow_assets_audio_seek_bytes_pcm line="251" static="1"><f a=":">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></snow_assets_audio_seek_bytes_pcm>
		<exists public="1" set="method" line="24" override="1"><f a="_id:?_strict" v=":true">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></exists>
		<image_load_info public="1" set="method" line="41" override="1"><f a="_path:?_components:?_onload" v=":4:null">
	<c path="String"/>
	<x path="Int"/>
	<f a="?">
		<t path="snow.types.ImageInfo"/>
		<x path="Void"/>
	</f>
	<t path="snow.types.ImageInfo"/>
</f></image_load_info>
		<image_info_from_bytes public="1" set="method" line="74" override="1"><f a="_path:_bytes:?_components" v="::4">
	<c path="String"/>
	<t path="snow.utils.ByteArray"/>
	<x path="Int"/>
	<t path="snow.types.ImageInfo"/>
</f></image_info_from_bytes>
		<audio_load_info public="1" set="method" line="98" override="1"><f a="_path:?_format:?_load:?_onload" v=":null:true:null">
	<c path="String"/>
	<e path="snow.types.AudioFormatType"/>
	<x path="Bool"/>
	<f a="?">
		<t path="snow.types.AudioInfo"/>
		<x path="Void"/>
	</f>
	<t path="snow.types.AudioInfo"/>
</f></audio_load_info>
		<audio_seek_source public="1" set="method" line="144" override="1"><f a="_info:_to">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></audio_seek_source>
		<audio_load_portion public="1" set="method" line="161" override="1"><f a="_info:_start:_len">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.types.AudioDataBlob"/>
</f></audio_load_portion>
		<audio_load_ogg set="method" line="180"><f a="_path:?load" v=":true">
	<c path="String"/>
	<x path="Bool"/>
	<t path="snow.types.AudioInfo"/>
</f></audio_load_ogg>
		<audio_load_portion_ogg set="method" line="184"><f a="_info:_start:_len">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.types.AudioDataBlob"/>
</f></audio_load_portion_ogg>
		<audio_seek_source_ogg set="method" line="188"><f a="_info:_to">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></audio_seek_source_ogg>
		<audio_load_wav set="method" line="194"><f a="_path:?load" v=":true">
	<c path="String"/>
	<x path="Bool"/>
	<t path="snow.types.AudioInfo"/>
</f></audio_load_wav>
		<audio_load_portion_wav set="method" line="198"><f a="_info:_start:_len">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.types.AudioDataBlob"/>
</f></audio_load_portion_wav>
		<audio_seek_source_wav set="method" line="202"><f a="_info:_to">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></audio_seek_source_wav>
		<audio_load_pcm set="method" line="208"><f a="_path:?load" v=":true">
	<c path="String"/>
	<x path="Bool"/>
	<t path="snow.types.AudioInfo"/>
</f></audio_load_pcm>
		<audio_load_portion_pcm set="method" line="212"><f a="_info:_start:_len">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.types.AudioDataBlob"/>
</f></audio_load_portion_pcm>
		<audio_seek_source_pcm set="method" line="216"><f a="_info:_to">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></audio_seek_source_pcm>
		<audio_format_from_int set="method" line="223"><f a="_int">
	<x path="Int"/>
	<e path="snow.types.AudioFormatType"/>
</f></audio_format_from_int>
		<new public="1" set="method" line="16"><f a="_manager">
	<c path="snow.assets.Assets"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.platform.native.audio.AudioSystem" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/AudioSystem.hx">
		<extends path="snow.audio.AudioSystemBinding"/>
		<init public="1" set="method" line="18" override="1"><f a=""><x path="Void"/></f></init>
		<process public="1" set="method" line="19" override="1"><f a=""><x path="Void"/></f></process>
		<destroy public="1" set="method" line="20" override="1"><f a=""><x path="Void"/></f></destroy>
		<suspend public="1" set="method" line="21" override="1"><f a=""><x path="Void"/></f></suspend>
		<resume public="1" set="method" line="22" override="1"><f a=""><x path="Void"/></f></resume>
		<new public="1" set="method" line="11"><f a="_manager:_lib">
	<c path="snow.audio.Audio"/>
	<c path="snow.Snow"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.platform.native.audio.Sound" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/Sound.hx">
		<extends path="snow.audio.SoundBinding"/>
		<length_bytes public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The length of this sound in `bytes`</haxe_doc>
		</length_bytes>
		<position_bytes public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The current playback position of this sound in `bytes`</haxe_doc>
		</position_bytes>
		<bytes_to_seconds public="1" set="method" line="18">
			<f a="_bytes">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>A helper for converting bytes to seconds for this sound source, using the format settings specific to this sound</haxe_doc>
		</bytes_to_seconds>
		<seconds_to_bytes public="1" set="method" line="28">
			<f a="_seconds">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>A helper for converting seconds to bytes for this sound source, using the format settings specific to this sound</haxe_doc>
		</seconds_to_bytes>
		<get_position_bytes set="method" line="37"><f a=""><x path="Int"/></f></get_position_bytes>
		<set_position_bytes set="method" line="41"><f a="_position_bytes">
	<x path="Int"/>
	<x path="Int"/>
</f></set_position_bytes>
		<get_length_bytes set="method" line="45"><f a=""><x path="Int"/></f></get_length_bytes>
		<get_duration set="method" line="49" override="1"><f a=""><x path="Float"/></f></get_duration>
		<new public="1" set="method" line="8"><f a="_manager:_name">
	<c path="snow.audio.Audio"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.platform.native.audio.openal.Sound" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/openal/Sound.hx">
		<extends path="snow.platform.native.audio.Sound"/>
		<half_pi line="188" static="1"><x path="Float"/></half_pi>
		<source public="1">
			<x path="Int"/>
			<haxe_doc>the sound source name</haxe_doc>
		</source>
		<buffer public="1">
			<x path="Int"/>
			<haxe_doc>the sound buffer name</haxe_doc>
		</buffer>
		<format public="1">
			<x path="Int"/>
			<haxe_doc>mono8? stereo16?</haxe_doc>
		</format>
		<play public="1" set="method" line="36" override="1"><f a=""><x path="Void"/></f></play>
		<loop public="1" set="method" line="51" override="1"><f a=""><x path="Void"/></f></loop>
		<pause public="1" set="method" line="65" override="1"><f a=""><x path="Void"/></f></pause>
		<stop public="1" set="method" line="75" override="1"><f a=""><x path="Void"/></f></stop>
		<destroy public="1" set="method" line="88" override="1"><f a=""><x path="Void"/></f></destroy>
		<internal_update public="1" set="method" line="101" override="1"><f a=""><x path="Void"/></f></internal_update>
		<set_info set="method" line="117" override="1"><f a="_info">
	<t path="snow.types.AudioInfo"/>
	<t path="snow.types.AudioInfo"/>
</f></set_info>
		<get_position_bytes set="method" line="190" override="1"><f a=""><x path="Int"/></f></get_position_bytes>
		<get_position set="method" line="196" override="1"><f a=""><x path="Float"/></f></get_position>
		<set_pan set="method" line="202" override="1"><f a="_pan">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pan>
		<set_pitch set="method" line="210" override="1"><f a="_pitch">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pitch>
		<set_volume set="method" line="218" override="1"><f a="_volume">
	<x path="Float"/>
	<x path="Float"/>
</f></set_volume>
		<set_looping set="method" line="226" override="1"><f a="_looping">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_looping>
		<set_position_bytes set="method" line="238" override="1"><f a="_position_bytes">
	<x path="Int"/>
	<x path="Int"/>
</f></set_position_bytes>
		<set_position set="method" line="246" override="1"><f a="_position">
	<x path="Float"/>
	<x path="Float"/>
</f></set_position>
		<new public="1" set="method" line="28"><f a="_manager:_name">
	<c path="snow.audio.Audio"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>The openal specific implementation of Sound</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
			<m n=":log_as"><e>"audio"</e></m>
		</meta>
	</class>
	<class path="snow.platform.native.audio.SoundStream" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/SoundStream.hx">
		<extends path="snow.platform.native.audio.openal.Sound"/>
		<buffer_length public="1">
			<x path="Int"/>
			<haxe_doc>The length of bytes for a single buffer to queue up to stream. default: 176400, about 1 second in 16 bit mono.</haxe_doc>
		</buffer_length>
		<buffer_count public="1">
			<x path="Int"/>
			<haxe_doc>The number of buffers to use in the queue for streaming. default: 4`</haxe_doc>
		</buffer_count>
		<data_get public="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<t path="snow.types.AudioDataBlob"/>
			</f>
			<haxe_doc>The get function, assign a function here if you want to stream data to the source manually, like generative sound.</haxe_doc>
		</data_get>
		<data_seek public="1">
			<f a="">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>The seek function, assign a function here if you want to stream data to the source manually, like generative sound.</haxe_doc>
		</data_seek>
		<default_data_seek set="method" line="33">
			<f a="_to">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Default data seek implementation for `SoundStream` uses `assets.system.audio_seek_source`</haxe_doc>
		</default_data_seek>
		<default_data_get set="method" line="40">
			<f a="_start:_length">
				<x path="Int"/>
				<x path="Int"/>
				<t path="snow.types.AudioDataBlob"/>
			</f>
			<haxe_doc>Default data get implementation for `SoundStream` uses `assets.system.audio_load_portion`</haxe_doc>
		</default_data_get>
		<new public="1" set="method" line="20"><f a="_manager:_name">
	<c path="snow.audio.Audio"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="snow.platform.native.audio.openal.Context" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/openal/AL.hx" module="snow.platform.native.audio.openal.AL">
		<from><icast><t path="Null"><x path="Float"/></t></icast></from>
		<this><t path="Null"><x path="Float"/></t></this>
		<to><icast><t path="Null"><x path="Float"/></t></icast></to>
		<impl><class path="snow.platform.native.audio.openal._AL.Context_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/openal/AL.hx" private="1" module="snow.platform.native.audio.openal.AL" extern="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="snow.platform.native.audio.openal._AL.Context_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/openal/AL.hx" private="1" module="snow.platform.native.audio.openal.AL" extern="1"><meta><m n=":keep"/></meta></class>
	<abstract path="snow.platform.native.audio.openal.Device" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/openal/AL.hx" module="snow.platform.native.audio.openal.AL">
		<from><icast><t path="Null"><x path="Float"/></t></icast></from>
		<this><t path="Null"><x path="Float"/></t></this>
		<to><icast><t path="Null"><x path="Float"/></t></icast></to>
		<impl><class path="snow.platform.native.audio.openal._AL.Device_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/openal/AL.hx" private="1" module="snow.platform.native.audio.openal.AL" extern="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="snow.platform.native.audio.openal._AL.Device_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/openal/AL.hx" private="1" module="snow.platform.native.audio.openal.AL" extern="1"><meta><m n=":keep"/></meta></class>
	<class path="snow.platform.native.audio.openal.AL" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/openal/AL.hx">
		<NONE public="1" line="15" static="1"><x path="Int"/></NONE>
		<FALSE public="1" line="16" static="1"><x path="Int"/></FALSE>
		<TRUE public="1" line="17" static="1"><x path="Int"/></TRUE>
		<SOURCE_RELATIVE public="1" line="19" static="1"><x path="Int"/></SOURCE_RELATIVE>
		<CONE_INNER_ANGLE public="1" line="20" static="1"><x path="Int"/></CONE_INNER_ANGLE>
		<CONE_OUTER_ANGLE public="1" line="21" static="1"><x path="Int"/></CONE_OUTER_ANGLE>
		<PITCH public="1" line="22" static="1"><x path="Int"/></PITCH>
		<POSITION public="1" line="23" static="1"><x path="Int"/></POSITION>
		<DIRECTION public="1" line="24" static="1"><x path="Int"/></DIRECTION>
		<VELOCITY public="1" line="25" static="1"><x path="Int"/></VELOCITY>
		<LOOPING public="1" line="26" static="1"><x path="Int"/></LOOPING>
		<BUFFER public="1" line="27" static="1"><x path="Int"/></BUFFER>
		<GAIN public="1" line="28" static="1"><x path="Int"/></GAIN>
		<MIN_GAIN public="1" line="29" static="1"><x path="Int"/></MIN_GAIN>
		<MAX_GAIN public="1" line="30" static="1"><x path="Int"/></MAX_GAIN>
		<ORIENTATION public="1" line="31" static="1"><x path="Int"/></ORIENTATION>
		<SOURCE_STATE public="1" line="32" static="1"><x path="Int"/></SOURCE_STATE>
		<INITIAL public="1" line="33" static="1"><x path="Int"/></INITIAL>
		<PLAYING public="1" line="34" static="1"><x path="Int"/></PLAYING>
		<PAUSED public="1" line="35" static="1"><x path="Int"/></PAUSED>
		<STOPPED public="1" line="36" static="1"><x path="Int"/></STOPPED>
		<BUFFERS_QUEUED public="1" line="37" static="1"><x path="Int"/></BUFFERS_QUEUED>
		<BUFFERS_PROCESSED public="1" line="38" static="1"><x path="Int"/></BUFFERS_PROCESSED>
		<REFERENCE_DISTANCE public="1" line="39" static="1"><x path="Int"/></REFERENCE_DISTANCE>
		<ROLLOFF_FACTOR public="1" line="40" static="1"><x path="Int"/></ROLLOFF_FACTOR>
		<CONE_OUTER_GAIN public="1" line="41" static="1"><x path="Int"/></CONE_OUTER_GAIN>
		<MAX_DISTANCE public="1" line="42" static="1"><x path="Int"/></MAX_DISTANCE>
		<SEC_OFFSET public="1" line="43" static="1"><x path="Int"/></SEC_OFFSET>
		<SAMPLE_OFFSET public="1" line="44" static="1"><x path="Int"/></SAMPLE_OFFSET>
		<BYTE_OFFSET public="1" line="45" static="1"><x path="Int"/></BYTE_OFFSET>
		<SOURCE_TYPE public="1" line="46" static="1"><x path="Int"/></SOURCE_TYPE>
		<STATIC public="1" line="47" static="1"><x path="Int"/></STATIC>
		<STREAMING public="1" line="48" static="1"><x path="Int"/></STREAMING>
		<UNDETERMINED public="1" line="49" static="1"><x path="Int"/></UNDETERMINED>
		<FORMAT_MONO8 public="1" line="50" static="1"><x path="Int"/></FORMAT_MONO8>
		<FORMAT_MONO16 public="1" line="51" static="1"><x path="Int"/></FORMAT_MONO16>
		<FORMAT_STEREO8 public="1" line="52" static="1"><x path="Int"/></FORMAT_STEREO8>
		<FORMAT_STEREO16 public="1" line="53" static="1"><x path="Int"/></FORMAT_STEREO16>
		<FREQUENCY public="1" line="54" static="1"><x path="Int"/></FREQUENCY>
		<BITS public="1" line="55" static="1"><x path="Int"/></BITS>
		<CHANNELS public="1" line="56" static="1"><x path="Int"/></CHANNELS>
		<SIZE public="1" line="57" static="1"><x path="Int"/></SIZE>
		<NO_ERROR public="1" line="58" static="1"><x path="Int"/></NO_ERROR>
		<INVALID_NAME public="1" line="59" static="1"><x path="Int"/></INVALID_NAME>
		<INVALID_ENUM public="1" line="60" static="1"><x path="Int"/></INVALID_ENUM>
		<INVALID_VALUE public="1" line="61" static="1"><x path="Int"/></INVALID_VALUE>
		<INVALID_OPERATION public="1" line="62" static="1"><x path="Int"/></INVALID_OPERATION>
		<OUT_OF_MEMORY public="1" line="63" static="1"><x path="Int"/></OUT_OF_MEMORY>
		<VENDOR public="1" line="64" static="1"><x path="Int"/></VENDOR>
		<VERSION public="1" line="65" static="1"><x path="Int"/></VERSION>
		<RENDERER public="1" line="66" static="1"><x path="Int"/></RENDERER>
		<EXTENSIONS public="1" line="67" static="1"><x path="Int"/></EXTENSIONS>
		<DOPPLER_FACTOR public="1" line="70" static="1"><x path="Int"/></DOPPLER_FACTOR>
		<SPEED_OF_SOUND public="1" line="71" static="1"><x path="Int"/></SPEED_OF_SOUND>
		<DOPPLER_VELOCITY public="1" line="72" static="1"><x path="Int"/></DOPPLER_VELOCITY>
		<DISTANCE_MODEL public="1" line="74" static="1"><x path="Int"/></DISTANCE_MODEL>
		<INVERSE_DISTANCE public="1" line="75" static="1"><x path="Int"/></INVERSE_DISTANCE>
		<INVERSE_DISTANCE_CLAMPED public="1" line="76" static="1"><x path="Int"/></INVERSE_DISTANCE_CLAMPED>
		<LINEAR_DISTANCE public="1" line="77" static="1"><x path="Int"/></LINEAR_DISTANCE>
		<LINEAR_DISTANCE_CLAMPED public="1" line="78" static="1"><x path="Int"/></LINEAR_DISTANCE_CLAMPED>
		<EXPONENT_DISTANCE public="1" line="79" static="1"><x path="Int"/></EXPONENT_DISTANCE>
		<EXPONENT_DISTANCE_CLAMPED public="1" line="80" static="1"><x path="Int"/></EXPONENT_DISTANCE_CLAMPED>
		<dopplerFactor public="1" set="method" line="84" static="1"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></dopplerFactor>
		<dopplerVelocity public="1" set="method" line="88" static="1"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></dopplerVelocity>
		<speedOfSound public="1" set="method" line="92" static="1"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></speedOfSound>
		<distanceModel public="1" set="method" line="96" static="1"><f a="distanceModel">
	<x path="Int"/>
	<x path="Void"/>
</f></distanceModel>
		<enable public="1" set="method" line="102" static="1"><f a="capability">
	<x path="Int"/>
	<x path="Void"/>
</f></enable>
		<disable public="1" set="method" line="106" static="1"><f a="capability">
	<x path="Int"/>
	<x path="Void"/>
</f></disable>
		<isEnabled public="1" set="method" line="110" static="1"><f a="capability">
	<x path="Int"/>
	<x path="Bool"/>
</f></isEnabled>
		<getString public="1" set="method" line="116" static="1"><f a="param">
	<x path="Int"/>
	<c path="String"/>
</f></getString>
		<getBooleanv public="1" set="method" line="120" static="1"><f a="param:?count" v=":1">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Bool"/></c>
</f></getBooleanv>
		<getIntegerv public="1" set="method" line="124" static="1"><f a="param:?count" v=":1">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></getIntegerv>
		<getFloatv public="1" set="method" line="128" static="1"><f a="param:?count" v=":1">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></getFloatv>
		<getDoublev public="1" set="method" line="132" static="1"><f a="param:?count" v=":1">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></getDoublev>
		<getBoolean public="1" set="method" line="136" static="1"><f a="param">
	<x path="Int"/>
	<x path="Bool"/>
</f></getBoolean>
		<getInteger public="1" set="method" line="140" static="1"><f a="param">
	<x path="Int"/>
	<x path="Int"/>
</f></getInteger>
		<getFloat public="1" set="method" line="144" static="1"><f a="param">
	<x path="Int"/>
	<x path="Float"/>
</f></getFloat>
		<getDouble public="1" set="method" line="148" static="1"><f a="param">
	<x path="Int"/>
	<x path="Float"/>
</f></getDouble>
		<getError public="1" set="method" line="152" static="1"><f a=""><x path="Int"/></f></getError>
		<isExtensionPresent public="1" set="method" line="158" static="1"><f a="extname">
	<c path="String"/>
	<x path="Bool"/>
</f></isExtensionPresent>
		<getProcAddress public="1" set="method" line="163" static="1"><f a="fname">
	<c path="String"/>
	<d/>
</f></getProcAddress>
		<getEnumValue public="1" set="method" line="167" static="1"><f a="ename">
	<c path="String"/>
	<x path="Int"/>
</f></getEnumValue>
		<listenerf public="1" set="method" line="173" static="1"><f a="param:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></listenerf>
		<listener3f public="1" set="method" line="177" static="1"><f a="param:value1:value2:value3">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></listener3f>
		<listenerfv public="1" set="method" line="181" static="1"><f a="param:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></listenerfv>
		<listeneri public="1" set="method" line="185" static="1"><f a="param:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></listeneri>
		<listener3i public="1" set="method" line="189" static="1"><f a="param:value1:value2:value3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></listener3i>
		<listeneriv public="1" set="method" line="193" static="1"><f a="param:values">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></listeneriv>
		<getListenerf public="1" set="method" line="197" static="1"><f a="param">
	<x path="Int"/>
	<x path="Float"/>
</f></getListenerf>
		<getListener3f public="1" set="method" line="201" static="1"><f a="param">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></getListener3f>
		<getListenerfv public="1" set="method" line="205" static="1"><f a="param:?count" v=":1">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></getListenerfv>
		<getListeneri public="1" set="method" line="209" static="1"><f a="param">
	<x path="Int"/>
	<x path="Int"/>
</f></getListeneri>
		<getListener3i public="1" set="method" line="213" static="1"><f a="param">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></getListener3i>
		<getListeneriv public="1" set="method" line="217" static="1"><f a="param:?count" v=":1">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></getListeneriv>
		<genSources public="1" set="method" line="223" static="1"><f a="n">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></genSources>
		<deleteSources public="1" set="method" line="227" static="1"><f a="sources">
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></deleteSources>
		<isSource public="1" set="method" line="231" static="1"><f a="source">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSource>
		<sourcef public="1" set="method" line="237" static="1"><f a="source:param:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></sourcef>
		<source3f public="1" set="method" line="241" static="1"><f a="source:param:value1:value2:value3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></source3f>
		<sourcefv public="1" set="method" line="245" static="1"><f a="source:param:values">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></sourcefv>
		<sourcei public="1" set="method" line="249" static="1"><f a="source:param:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></sourcei>
		<source3i public="1" set="method" line="253" static="1"><f a="source:param:value1:value2:value3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></source3i>
		<sourceiv public="1" set="method" line="257" static="1"><f a="source:param:values">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></sourceiv>
		<getSourcef public="1" set="method" line="261" static="1"><f a="source:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></getSourcef>
		<getSource3f public="1" set="method" line="265" static="1"><f a="source:param">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></getSource3f>
		<getSourcefv public="1" set="method" line="269" static="1"><f a="source:param">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></getSourcefv>
		<getSourcei public="1" set="method" line="273" static="1"><f a="source:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getSourcei>
		<getSource3i public="1" set="method" line="277" static="1"><f a="source:param">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></getSource3i>
		<getSourceiv public="1" set="method" line="281" static="1"><f a="source:param:?count" v="::1">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></getSourceiv>
		<sourcePlayv public="1" set="method" line="287" static="1"><f a="sources">
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></sourcePlayv>
		<sourceStopv public="1" set="method" line="291" static="1"><f a="sources">
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></sourceStopv>
		<sourceRewindv public="1" set="method" line="295" static="1"><f a="sources">
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></sourceRewindv>
		<sourcePausev public="1" set="method" line="299" static="1"><f a="sources">
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></sourcePausev>
		<sourcePlay public="1" set="method" line="303" static="1"><f a="source">
	<x path="Int"/>
	<x path="Void"/>
</f></sourcePlay>
		<sourceStop public="1" set="method" line="307" static="1"><f a="source">
	<x path="Int"/>
	<x path="Void"/>
</f></sourceStop>
		<sourceRewind public="1" set="method" line="311" static="1"><f a="source">
	<x path="Int"/>
	<x path="Void"/>
</f></sourceRewind>
		<sourcePause public="1" set="method" line="315" static="1"><f a="source">
	<x path="Int"/>
	<x path="Void"/>
</f></sourcePause>
		<sourceQueueBuffers public="1" set="method" line="319" static="1"><f a="source:nb:buffers">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></sourceQueueBuffers>
		<sourceUnqueueBuffers public="1" set="method" line="323" static="1"><f a="source:nb">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></sourceUnqueueBuffers>
		<genBuffers public="1" set="method" line="329" static="1"><f a="n">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></genBuffers>
		<deleteBuffers public="1" set="method" line="333" static="1"><f a="buffers">
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></deleteBuffers>
		<isBuffer public="1" set="method" line="337" static="1"><f a="buffer">
	<x path="Int"/>
	<x path="Bool"/>
</f></isBuffer>
		<bufferData public="1" set="method" line="343" static="1"><f a="buffer:format:data:size:freq">
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.utils.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bufferData>
		<bufferf public="1" set="method" line="347" static="1"><f a="buffer:param:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></bufferf>
		<buffer3f public="1" set="method" line="351" static="1"><f a="buffer:param:value1:value2:value3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></buffer3f>
		<bufferfv public="1" set="method" line="355" static="1"><f a="buffer:param:values">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></bufferfv>
		<bufferi public="1" set="method" line="359" static="1"><f a="buffer:param:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bufferi>
		<buffer3i public="1" set="method" line="363" static="1"><f a="buffer:param:value1:value2:value3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></buffer3i>
		<bufferiv public="1" set="method" line="367" static="1"><f a="buffer:param:values">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></bufferiv>
		<getBufferf public="1" set="method" line="371" static="1"><f a="buffer:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></getBufferf>
		<getBuffer3f public="1" set="method" line="375" static="1"><f a="buffer:param">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></getBuffer3f>
		<getBufferfv public="1" set="method" line="379" static="1"><f a="buffer:param:?count" v="::1">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></getBufferfv>
		<getBufferi public="1" set="method" line="383" static="1"><f a="buffer:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getBufferi>
		<getBuffer3i public="1" set="method" line="387" static="1"><f a="buffer:param">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></getBuffer3i>
		<getBufferiv public="1" set="method" line="391" static="1"><f a="buffer:param:?count" v="::1">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></getBufferiv>
		<genSource public="1" set="method" line="398" static="1"><f a=""><x path="Int"/></f></genSource>
		<deleteSource public="1" set="method" line="402" static="1"><f a="source">
	<x path="Int"/>
	<x path="Void"/>
</f></deleteSource>
		<genBuffer public="1" set="method" line="406" static="1"><f a=""><x path="Int"/></f></genBuffer>
		<deleteBuffer public="1" set="method" line="410" static="1"><f a="buffer">
	<x path="Int"/>
	<x path="Void"/>
</f></deleteBuffer>
		<sourceQueueBuffer public="1" set="method" line="414" static="1"><f a="source:buffer">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></sourceQueueBuffer>
		<sourceUnqueueBuffer public="1" set="method" line="418" static="1"><f a="source">
	<x path="Int"/>
	<x path="Int"/>
</f></sourceUnqueueBuffer>
		<INVALID_NAME_MEANING public="1" line="423" static="1"><c path="String"/></INVALID_NAME_MEANING>
		<INVALID_ENUM_MEANING public="1" line="424" static="1"><c path="String"/></INVALID_ENUM_MEANING>
		<INVALID_VALUE_MEANING public="1" line="425" static="1"><c path="String"/></INVALID_VALUE_MEANING>
		<INVALID_OPERATION_MEANING public="1" line="426" static="1"><c path="String"/></INVALID_OPERATION_MEANING>
		<OUT_OF_MEMORY_MEANING public="1" line="427" static="1"><c path="String"/></OUT_OF_MEMORY_MEANING>
		<getErrorMeaning public="1" set="method" line="429" static="1"><f a="error">
	<x path="Int"/>
	<c path="String"/>
</f></getErrorMeaning>
		<alhx_DopplerFactor line="443" static="1"><f a="">
	<x path="Float"/>
	<unknown/>
</f></alhx_DopplerFactor>
		<alhx_DopplerVelocity line="444" static="1"><f a="">
	<x path="Float"/>
	<unknown/>
</f></alhx_DopplerVelocity>
		<alhx_SpeedOfSound line="445" static="1"><f a="">
	<x path="Float"/>
	<unknown/>
</f></alhx_SpeedOfSound>
		<alhx_DistanceModel line="447" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></alhx_DistanceModel>
		<alhx_Enable line="448" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></alhx_Enable>
		<alhx_Disable line="449" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></alhx_Disable>
		<alhx_IsEnabled line="450" static="1"><f a="">
	<x path="Int"/>
	<x path="Bool"/>
</f></alhx_IsEnabled>
		<alhx_GetString line="451" static="1"><f a="">
	<x path="Int"/>
	<c path="String"/>
</f></alhx_GetString>
		<alhx_GetBooleanv line="452" static="1"><f a=":">
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
	<c path="Array"><x path="Bool"/></c>
</f></alhx_GetBooleanv>
		<alhx_GetIntegerv line="453" static="1"><f a=":">
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
	<c path="Array"><x path="Int"/></c>
</f></alhx_GetIntegerv>
		<alhx_GetFloatv line="454" static="1"><f a=":">
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
	<c path="Array"><x path="Float"/></c>
</f></alhx_GetFloatv>
		<alhx_GetDoublev line="455" static="1"><f a=":">
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
	<c path="Array"><x path="Float"/></c>
</f></alhx_GetDoublev>
		<alhx_GetBoolean line="456" static="1"><f a="">
	<x path="Int"/>
	<x path="Bool"/>
</f></alhx_GetBoolean>
		<alhx_GetInteger line="457" static="1"><f a="">
	<x path="Int"/>
	<x path="Int"/>
</f></alhx_GetInteger>
		<alhx_GetFloat line="458" static="1"><f a="">
	<x path="Int"/>
	<x path="Float"/>
</f></alhx_GetFloat>
		<alhx_GetDouble line="459" static="1"><f a="">
	<x path="Int"/>
	<x path="Float"/>
</f></alhx_GetDouble>
		<alhx_GetError line="461" static="1"><f a=""><x path="Int"/></f></alhx_GetError>
		<alhx_IsExtensionPresent line="462" static="1"><f a="">
	<c path="String"/>
	<x path="Bool"/>
</f></alhx_IsExtensionPresent>
		<alhx_GetProcAddress line="463" static="1"><unknown/></alhx_GetProcAddress>
		<alhx_GetEnumValue line="464" static="1"><f a="">
	<c path="String"/>
	<x path="Int"/>
</f></alhx_GetEnumValue>
		<alhx_Listenerf line="466" static="1"><f a=":">
	<x path="Int"/>
	<x path="Float"/>
	<unknown/>
</f></alhx_Listenerf>
		<alhx_Listener3f line="467" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></alhx_Listener3f>
		<alhx_Listenerfv line="468" static="1"><f a=":">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<unknown/>
</f></alhx_Listenerfv>
		<alhx_Listeneri line="469" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></alhx_Listeneri>
		<alhx_Listener3i line="470" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></alhx_Listener3i>
		<alhx_Listeneriv line="471" static="1"><f a=":">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<unknown/>
</f></alhx_Listeneriv>
		<alhx_GetListenerf line="473" static="1"><f a="">
	<x path="Int"/>
	<x path="Float"/>
</f></alhx_GetListenerf>
		<alhx_GetListener3f line="474" static="1"><f a="">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></alhx_GetListener3f>
		<alhx_GetListenerfv line="475" static="1"><f a=":">
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
	<c path="Array"><x path="Float"/></c>
</f></alhx_GetListenerfv>
		<alhx_GetListeneri line="476" static="1"><f a="">
	<x path="Int"/>
	<x path="Int"/>
</f></alhx_GetListeneri>
		<alhx_GetListener3i line="477" static="1"><f a="">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></alhx_GetListener3i>
		<alhx_GetListeneriv line="478" static="1"><f a=":">
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
	<c path="Array"><x path="Int"/></c>
</f></alhx_GetListeneriv>
		<alhx_GenSources line="480" static="1"><f a="">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></alhx_GenSources>
		<alhx_DeleteSources line="481" static="1"><f a=":">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<unknown/>
</f></alhx_DeleteSources>
		<alhx_IsSource line="482" static="1"><f a="">
	<x path="Int"/>
	<x path="Bool"/>
</f></alhx_IsSource>
		<alhx_Sourcef line="484" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<unknown/>
</f></alhx_Sourcef>
		<alhx_Source3f line="485" static="1"><f a="::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></alhx_Source3f>
		<alhx_Sourcefv line="486" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<unknown/>
</f></alhx_Sourcefv>
		<alhx_Sourcei line="487" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></alhx_Sourcei>
		<alhx_Source3i line="488" static="1"><f a="::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></alhx_Source3i>
		<alhx_Sourceiv line="489" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<unknown/>
</f></alhx_Sourceiv>
		<alhx_GetSourcef line="491" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></alhx_GetSourcef>
		<alhx_GetSource3f line="492" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></alhx_GetSource3f>
		<alhx_GetSourcefv line="493" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></alhx_GetSourcefv>
		<alhx_GetSourcei line="494" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></alhx_GetSourcei>
		<alhx_GetSource3i line="495" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></alhx_GetSource3i>
		<alhx_GetSourceiv line="496" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
	<c path="Array"><x path="Int"/></c>
</f></alhx_GetSourceiv>
		<alhx_SourcePlayv line="498" static="1"><f a=":">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<unknown/>
</f></alhx_SourcePlayv>
		<alhx_SourceStopv line="499" static="1"><f a=":">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<unknown/>
</f></alhx_SourceStopv>
		<alhx_SourceRewindv line="500" static="1"><f a=":">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<unknown/>
</f></alhx_SourceRewindv>
		<alhx_SourcePausev line="501" static="1"><f a=":">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<unknown/>
</f></alhx_SourcePausev>
		<alhx_SourceQueueBuffers line="503" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<unknown/>
</f></alhx_SourceQueueBuffers>
		<alhx_SourceUnqueueBuffers line="504" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></alhx_SourceUnqueueBuffers>
		<alhx_SourcePlay line="506" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></alhx_SourcePlay>
		<alhx_SourceStop line="507" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></alhx_SourceStop>
		<alhx_SourceRewind line="508" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></alhx_SourceRewind>
		<alhx_SourcePause line="509" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></alhx_SourcePause>
		<alhx_GenBuffers line="511" static="1"><f a="">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></alhx_GenBuffers>
		<alhx_DeleteBuffers line="512" static="1"><f a=":">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<unknown/>
</f></alhx_DeleteBuffers>
		<alhx_IsBuffer line="513" static="1"><f a="">
	<x path="Int"/>
	<x path="Bool"/>
</f></alhx_IsBuffer>
		<alhx_BufferData line="515" static="1"><f a="::::">
	<x path="Int"/>
	<x path="Int"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></alhx_BufferData>
		<alhx_Bufferf line="517" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<unknown/>
</f></alhx_Bufferf>
		<alhx_Buffer3f line="518" static="1"><f a="::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></alhx_Buffer3f>
		<alhx_Bufferfv line="519" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<unknown/>
</f></alhx_Bufferfv>
		<alhx_Bufferi line="520" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></alhx_Bufferi>
		<alhx_Buffer3i line="521" static="1"><f a="::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></alhx_Buffer3i>
		<alhx_Bufferiv line="522" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<unknown/>
</f></alhx_Bufferiv>
		<alhx_GetBufferf line="524" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></alhx_GetBufferf>
		<alhx_GetBuffer3f line="525" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></alhx_GetBuffer3f>
		<alhx_GetBufferfv line="526" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
	<c path="Array"><x path="Float"/></c>
</f></alhx_GetBufferfv>
		<alhx_GetBufferi line="527" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></alhx_GetBufferi>
		<alhx_GetBuffer3i line="528" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></alhx_GetBuffer3i>
		<alhx_GetBufferiv line="529" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
	<c path="Array"><x path="Int"/></c>
</f></alhx_GetBufferiv>
		<alhx_GenSource line="533" static="1"><f a=""><x path="Int"/></f></alhx_GenSource>
		<alhx_DeleteSource line="534" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></alhx_DeleteSource>
		<alhx_GenBuffer line="535" static="1"><f a=""><x path="Int"/></f></alhx_GenBuffer>
		<alhx_DeleteBuffer line="536" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></alhx_DeleteBuffer>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.platform.native.audio.openal.ALC" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/openal/AL.hx" module="snow.platform.native.audio.openal.AL">
		<FALSE public="1" line="546" static="1"><x path="Int"/></FALSE>
		<TRUE public="1" line="547" static="1"><x path="Int"/></TRUE>
		<FREQUENCY public="1" line="548" static="1"><x path="Int"/></FREQUENCY>
		<REFRESH public="1" line="549" static="1"><x path="Int"/></REFRESH>
		<SYNC public="1" line="550" static="1"><x path="Int"/></SYNC>
		<MONO_SOURCES public="1" line="551" static="1"><x path="Int"/></MONO_SOURCES>
		<STEREO_SOURCES public="1" line="552" static="1"><x path="Int"/></STEREO_SOURCES>
		<NO_ERROR public="1" line="553" static="1"><x path="Int"/></NO_ERROR>
		<INVALID_DEVICE public="1" line="554" static="1"><x path="Int"/></INVALID_DEVICE>
		<INVALID_CONTEXT public="1" line="555" static="1"><x path="Int"/></INVALID_CONTEXT>
		<INVALID_ENUM public="1" line="556" static="1"><x path="Int"/></INVALID_ENUM>
		<INVALID_VALUE public="1" line="557" static="1"><x path="Int"/></INVALID_VALUE>
		<OUT_OF_MEMORY public="1" line="558" static="1"><x path="Int"/></OUT_OF_MEMORY>
		<ATTRIBUTES_SIZE public="1" line="559" static="1"><x path="Int"/></ATTRIBUTES_SIZE>
		<ALL_ATTRIBUTES public="1" line="560" static="1"><x path="Int"/></ALL_ATTRIBUTES>
		<DEFAULT_DEVICE_SPECIFIER public="1" line="561" static="1"><x path="Int"/></DEFAULT_DEVICE_SPECIFIER>
		<DEVICE_SPECIFIER public="1" line="562" static="1"><x path="Int"/></DEVICE_SPECIFIER>
		<EXTENSIONS public="1" line="563" static="1"><x path="Int"/></EXTENSIONS>
		<ENUMERATE_ALL_EXT public="1" line="565" static="1"><x path="Int"/></ENUMERATE_ALL_EXT>
		<DEFAULT_ALL_DEVICES_SPECIFIER public="1" line="566" static="1"><x path="Int"/></DEFAULT_ALL_DEVICES_SPECIFIER>
		<ALL_DEVICES_SPECIFIER public="1" line="567" static="1"><x path="Int"/></ALL_DEVICES_SPECIFIER>
		<createContext public="1" set="method" line="571" static="1"><f a="device:?attrlist" v=":null">
	<x path="snow.platform.native.audio.openal.Device"/>
	<c path="Array"><x path="Int"/></c>
	<x path="snow.platform.native.audio.openal.Context"/>
</f></createContext>
		<makeContextCurrent public="1" set="method" line="575" static="1"><f a="context">
	<x path="snow.platform.native.audio.openal.Context"/>
	<x path="Bool"/>
</f></makeContextCurrent>
		<processContext public="1" set="method" line="579" static="1"><f a="context">
	<x path="snow.platform.native.audio.openal.Context"/>
	<x path="Void"/>
</f></processContext>
		<suspendContext public="1" set="method" line="583" static="1"><f a="context">
	<x path="snow.platform.native.audio.openal.Context"/>
	<x path="Void"/>
</f></suspendContext>
		<destroyContext public="1" set="method" line="587" static="1"><f a="context">
	<x path="snow.platform.native.audio.openal.Context"/>
	<x path="Void"/>
</f></destroyContext>
		<getCurrentContext public="1" set="method" line="591" static="1"><f a=""><x path="snow.platform.native.audio.openal.Context"/></f></getCurrentContext>
		<getContextsDevice public="1" set="method" line="595" static="1"><f a="context">
	<x path="snow.platform.native.audio.openal.Context"/>
	<x path="snow.platform.native.audio.openal.Device"/>
</f></getContextsDevice>
		<openDevice public="1" set="method" line="602" static="1"><f a="?devicename" v="null">
	<c path="String"/>
	<x path="snow.platform.native.audio.openal.Device"/>
</f></openDevice>
		<closeDevice public="1" set="method" line="606" static="1"><f a="device">
	<x path="snow.platform.native.audio.openal.Device"/>
	<x path="Bool"/>
</f></closeDevice>
		<getError public="1" set="method" line="610" static="1"><f a="device">
	<x path="snow.platform.native.audio.openal.Device"/>
	<x path="Int"/>
</f></getError>
		<getString public="1" set="method" line="614" static="1"><f a="device:param">
	<x path="snow.platform.native.audio.openal.Device"/>
	<x path="Int"/>
	<c path="String"/>
</f></getString>
		<getIntegerv public="1" set="method" line="618" static="1"><f a="device:param:size">
	<x path="snow.platform.native.audio.openal.Device"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></getIntegerv>
		<INVALID_DEVICE_MEANING public="1" line="624" static="1"><c path="String"/></INVALID_DEVICE_MEANING>
		<INVALID_CONTEXT_MEANING public="1" line="625" static="1"><c path="String"/></INVALID_CONTEXT_MEANING>
		<INVALID_ENUM_MEANING public="1" line="626" static="1"><c path="String"/></INVALID_ENUM_MEANING>
		<INVALID_VALUE_MEANING public="1" line="627" static="1"><c path="String"/></INVALID_VALUE_MEANING>
		<OUT_OF_MEMORY_MEANING public="1" line="628" static="1"><c path="String"/></OUT_OF_MEMORY_MEANING>
		<getErrorMeaning public="1" set="method" line="630" static="1"><f a="error">
	<x path="Int"/>
	<c path="String"/>
</f></getErrorMeaning>
		<alhx_alcCreateContext line="644" static="1"><f a=":">
	<x path="snow.platform.native.audio.openal.Device"/>
	<c path="Array"><x path="Int"/></c>
	<x path="snow.platform.native.audio.openal.Context"/>
</f></alhx_alcCreateContext>
		<alhx_alcMakeContextCurrent line="645" static="1"><f a="">
	<x path="snow.platform.native.audio.openal.Context"/>
	<x path="Bool"/>
</f></alhx_alcMakeContextCurrent>
		<alhx_alcProcessContext line="646" static="1"><f a="">
	<x path="snow.platform.native.audio.openal.Context"/>
	<unknown/>
</f></alhx_alcProcessContext>
		<alhx_alcSuspendContext line="647" static="1"><f a="">
	<x path="snow.platform.native.audio.openal.Context"/>
	<unknown/>
</f></alhx_alcSuspendContext>
		<alhx_alcDestroyContext line="648" static="1"><f a="">
	<x path="snow.platform.native.audio.openal.Context"/>
	<unknown/>
</f></alhx_alcDestroyContext>
		<alhx_alcGetCurrentContext line="649" static="1"><f a=""><x path="snow.platform.native.audio.openal.Context"/></f></alhx_alcGetCurrentContext>
		<alhx_alcGetContextsDevice line="650" static="1"><f a="">
	<x path="snow.platform.native.audio.openal.Context"/>
	<x path="snow.platform.native.audio.openal.Device"/>
</f></alhx_alcGetContextsDevice>
		<alhx_alcOpenDevice line="652" static="1"><f a="">
	<c path="String"/>
	<x path="snow.platform.native.audio.openal.Device"/>
</f></alhx_alcOpenDevice>
		<alhx_alcCloseDevice line="653" static="1"><f a="">
	<x path="snow.platform.native.audio.openal.Device"/>
	<x path="Bool"/>
</f></alhx_alcCloseDevice>
		<alhx_alcGetError line="655" static="1"><f a="">
	<x path="snow.platform.native.audio.openal.Device"/>
	<x path="Int"/>
</f></alhx_alcGetError>
		<alhx_alcGetString line="656" static="1"><f a=":">
	<x path="snow.platform.native.audio.openal.Device"/>
	<x path="Int"/>
	<c path="String"/>
</f></alhx_alcGetString>
		<alhx_alcGetIntegerv line="657" static="1"><f a="::">
	<x path="snow.platform.native.audio.openal.Device"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></alhx_alcGetIntegerv>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.platform.native.audio.openal.AudioSystem" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/openal/AudioSystem.hx">
		<extends path="snow.platform.native.audio.AudioSystem"/>
		<device><t path="snow.audio.openal.Device"/></device>
		<context><t path="snow.audio.openal.Context"/></context>
		<init public="1" set="method" line="24" override="1"><f a=""><x path="Void"/></f></init>
		<destroy public="1" set="method" line="42" override="1"><f a=""><x path="Void"/></f></destroy>
		<suspend public="1" set="method" line="52" override="1"><f a=""><x path="Void"/></f></suspend>
		<resume public="1" set="method" line="61" override="1"><f a=""><x path="Void"/></f></resume>
		<new public="1" set="method" line="19"><f a="_manager:_lib">
	<c path="snow.audio.Audio"/>
	<c path="snow.Snow"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Internal audio system implementation for OpenAL, interact with this system through `snow.Audio`, not directly</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
			<m n=":log_as"><e>"audio"</e></m>
		</meta>
	</class>
	<class path="snow.platform.native.audio.openal.OpenALHelper" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/openal/OpenALHelper.hx">
		<default_source_setup public="1" set="method" line="17" static="1">
			<f a="source">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set up a source using default values for PITCH, GAIN, POSITION, VELOCITY, and LOOPING</haxe_doc>
		</default_source_setup>
		<determine_format public="1" set="method" line="32" static="1">
			<f a="_info">
				<t path="snow.types.AudioInfo"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Determine the OpenAL format of an `AudioInfo` instance, such as AL.FORMAT_MONO16 or AL.FORMAT_STEREO16</haxe_doc>
		</determine_format>
		<haxe_doc>Internal helper class for interaction with OpenAL.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
			<m n=":log_as"><e>"audio"</e></m>
		</meta>
	</class>
	<class path="snow.platform.native.audio.openal.SoundStream" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/openal/SoundStream.hx">
		<extends path="snow.platform.native.audio.SoundStream"/>
		<half_pi line="338" static="1"><x path="Float"/></half_pi>
		<buffers public="1">
			<c path="Array"><x path="Int"/></c>
			<haxe_doc>the sound buffer names</haxe_doc>
		</buffers>
		<buffers_left public="1">
			<x path="Int"/>
			<haxe_doc>remaining buffers to play</haxe_doc>
		</buffers_left>
		<set_info set="method" line="37" override="1"><f a="_info">
	<t path="snow.types.AudioInfo"/>
	<t path="snow.types.AudioInfo"/>
</f></set_info>
		<fill_buffer set="method" line="105"><f a="_buffer">
	<x path="Int"/>
	<t path="snow.types.AudioDataBlob"/>
</f></fill_buffer>
		<init_queue set="method" line="121"><f a="?_buffer_start" v="-1">
	<x path="Int"/>
	<x path="Void"/>
</f></init_queue>
		<flush_queue set="method" line="140"><f a=""><x path="Void"/></f></flush_queue>
		<update_stream set="method" line="153"><f a=""><x path="Bool"/></f></update_stream>
		<internal_update public="1" set="method" line="227" override="1"><f a=""><x path="Void"/></f></internal_update>
		<internal_pause public="1" set="method" line="241" override="1"><f a=""><x path="Void"/></f></internal_pause>
		<internal_play public="1" set="method" line="249" override="1"><f a=""><x path="Void"/></f></internal_play>
		<play public="1" set="method" line="262" override="1"><f a=""><x path="Void"/></f></play>
		<loop public="1" set="method" line="278" override="1"><f a=""><x path="Void"/></f></loop>
		<pause public="1" set="method" line="293" override="1"><f a=""><x path="Void"/></f></pause>
		<stop public="1" set="method" line="306" override="1"><f a=""><x path="Void"/></f></stop>
		<destroy public="1" set="method" line="319" override="1"><f a=""><x path="Void"/></f></destroy>
		<current_time><x path="Float"/></current_time>
		<get_position_bytes set="method" line="342" override="1"><f a=""><x path="Int"/></f></get_position_bytes>
		<get_position set="method" line="348" override="1"><f a=""><x path="Float"/></f></get_position>
		<set_pan set="method" line="357" override="1"><f a="_pan">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pan>
		<set_pitch set="method" line="365" override="1"><f a="_pitch">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pitch>
		<set_volume set="method" line="373" override="1"><f a="_volume">
	<x path="Float"/>
	<x path="Float"/>
</f></set_volume>
		<set_position_bytes set="method" line="381" override="1"><f a="_position_bytes">
	<x path="Int"/>
	<x path="Int"/>
</f></set_position_bytes>
		<set_looping set="method" line="389" override="1"><f a="_looping">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_looping>
		<set_position set="method" line="395" override="1"><f a="_position">
	<x path="Float"/>
	<x path="Float"/>
</f></set_position>
		<new public="1" set="method" line="27"><f a="_manager:_name">
	<c path="snow.audio.Audio"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>The openal specific implementation of SoundStream</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
			<m n=":log_as"><e>"audio"</e></m>
		</meta>
	</class>
	<class path="snow.platform.native.input.InputSystem" params="" file="/Users/sven/dev/snow/snow/platform/native/input/InputSystem.hx">
		<extends path="snow.input.InputSystemBinding"/>
		<snow_input_text_start line="63" static="1"><f a=""><unknown/></f></snow_input_text_start>
		<snow_input_text_stop line="64" static="1"><f a=""><unknown/></f></snow_input_text_stop>
		<snow_input_text_rect line="65" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_input_text_rect>
		<snow_gamepad_open line="67" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gamepad_open>
		<snow_gamepad_close line="68" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gamepad_close>
		<init public="1" set="method" line="19" override="1"><f a=""><x path="Void"/></f></init>
		<process public="1" set="method" line="22" override="1"><f a=""><x path="Void"/></f></process>
		<destroy public="1" set="method" line="25" override="1"><f a=""><x path="Void"/></f></destroy>
		<listen public="1" set="method" line="28" override="1">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</listen>
		<unlisten public="1" set="method" line="32" override="1">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</unlisten>
		<on_event public="1" set="method" line="36" override="1"><f a="_event">
	<t path="snow.types.InputEvent"/>
	<x path="Void"/>
</f></on_event>
		<text_input_start public="1" set="method" line="41" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Start a system text input state, this includes soft keyboard on mobile. on some platforms like web this does nothing (yet?)</haxe_doc>
		</text_input_start>
		<text_input_stop public="1" set="method" line="46" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>End a system text input state, this includes soft keyboard on mobile. on some platforms like web this does nothing (yet?)</haxe_doc>
		</text_input_stop>
		<text_input_rect public="1" set="method" line="51" override="1">
			<f a="x:y:w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>In a system text input state, this determines the area that is accepting input.</haxe_doc>
		</text_input_rect>
		<gamepad_add public="1" set="method" line="55" override="1"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></gamepad_add>
		<gamepad_remove public="1" set="method" line="59" override="1"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></gamepad_remove>
		<new public="1" set="method" line="12">
			<f a="_manager:_lib">
				<c path="snow.input.Input"/>
				<c path="snow.Snow"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.platform.native.input.sdl.InputSystem" params="" file="/Users/sven/dev/snow/snow/platform/native/input/sdl/InputSystem.hx">
		<extends path="snow.platform.native.input.InputSystem"/>
		<init public="1" set="method" line="11" override="1"><f a=""><x path="Void"/></f></init>
		<process public="1" set="method" line="14" override="1"><f a=""><x path="Void"/></f></process>
		<destroy public="1" set="method" line="17" override="1"><f a=""><x path="Void"/></f></destroy>
		<mod_state_from_event set="method" line="21">
			<f a="event">
				<t path="snow.types.InputEvent"/>
				<t path="snow.types.ModState"/>
			</f>
			<haxe_doc>Helper to return a `ModState` (shift, ctrl etc) from a given `InputEvent`</haxe_doc>
		</mod_state_from_event>
		<on_event public="1" set="method" line="70" override="1"><f a="_event">
	<t path="snow.types.InputEvent"/>
	<x path="Void"/>
</f></on_event>
		<new public="1" set="method" line="8"><f a="_manager:_lib">
	<c path="snow.input.Input"/>
	<c path="snow.Snow"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Internal input system, concrete SDL implementation. Accessed through `app.input`, not directly</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.platform.native.input.sdl.KeyEventType" params="" file="/Users/sven/dev/snow/snow/platform/native/input/sdl/InputSystem.hx" module="snow.platform.native.input.sdl.InputSystem">
		<down public="1" get="inline" set="null" line="279" static="1">
			<x path="Int"/>
			<haxe_doc>A key down event</haxe_doc>
		</down>
		<up public="1" get="inline" set="null" line="281" static="1">
			<x path="Int"/>
			<haxe_doc>A key up event</haxe_doc>
		</up>
		<textedit public="1" get="inline" set="null" line="283" static="1">
			<x path="Int"/>
			<haxe_doc>A text input text edit event</haxe_doc>
		</textedit>
		<textinput public="1" get="inline" set="null" line="285" static="1">
			<x path="Int"/>
			<haxe_doc>A text input typing event</haxe_doc>
		</textinput>
		<names line="287" static="1"><c path="Array"><c path="String"/></c></names>
		<to_string public="1" set="method" line="291" static="1"><f a="_type">
	<x path="Int"/>
	<c path="String"/>
</f></to_string>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.platform.native.input.sdl.ControllerEventType" params="" file="/Users/sven/dev/snow/snow/platform/native/input/sdl/InputSystem.hx" module="snow.platform.native.input.sdl.InputSystem">
		<axis public="1" get="inline" set="null" line="300" static="1">
			<x path="Int"/>
			<haxe_doc>a gamepad axis movement event</haxe_doc>
		</axis>
		<button_down public="1" get="inline" set="null" line="302" static="1">
			<x path="Int"/>
			<haxe_doc>a gamepad button pressed event</haxe_doc>
		</button_down>
		<button_up public="1" get="inline" set="null" line="304" static="1">
			<x path="Int"/>
			<haxe_doc>a gamepad button released event</haxe_doc>
		</button_up>
		<added public="1" get="inline" set="null" line="306" static="1">
			<x path="Int"/>
			<haxe_doc>a gamepad connected event</haxe_doc>
		</added>
		<removed public="1" get="inline" set="null" line="308" static="1">
			<x path="Int"/>
			<haxe_doc>a gamepad disconnected event</haxe_doc>
		</removed>
		<remapped public="1" get="inline" set="null" line="310" static="1">
			<x path="Int"/>
			<haxe_doc>a gamepad remapped event</haxe_doc>
		</remapped>
		<names line="312" static="1"><c path="Array"><c path="String"/></c></names>
		<to_string public="1" set="method" line="316" static="1"><f a="_type">
	<x path="Int"/>
	<c path="String"/>
</f></to_string>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.platform.native.input.sdl.TouchEventType" params="" file="/Users/sven/dev/snow/snow/platform/native/input/sdl/InputSystem.hx" module="snow.platform.native.input.sdl.InputSystem">
		<down public="1" get="inline" set="null" line="325" static="1">
			<x path="Int"/>
			<haxe_doc>A touch has begun</haxe_doc>
		</down>
		<up public="1" get="inline" set="null" line="327" static="1">
			<x path="Int"/>
			<haxe_doc>A touch has ended</haxe_doc>
		</up>
		<move public="1" get="inline" set="null" line="329" static="1">
			<x path="Int"/>
			<haxe_doc>A touch is moving</haxe_doc>
		</move>
		<names line="331" static="1"><c path="Array"><c path="String"/></c></names>
		<to_string public="1" set="method" line="335" static="1"><f a="_type">
	<x path="Int"/>
	<c path="String"/>
</f></to_string>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.platform.native.input.sdl.MouseEventType" params="" file="/Users/sven/dev/snow/snow/platform/native/input/sdl/InputSystem.hx" module="snow.platform.native.input.sdl.InputSystem">
		<move public="1" get="inline" set="null" line="344" static="1">
			<x path="Int"/>
			<haxe_doc>A mouse moved event</haxe_doc>
		</move>
		<down public="1" get="inline" set="null" line="346" static="1">
			<x path="Int"/>
			<haxe_doc>A mouse button pressed event</haxe_doc>
		</down>
		<up public="1" get="inline" set="null" line="348" static="1">
			<x path="Int"/>
			<haxe_doc>A mouse button released event</haxe_doc>
		</up>
		<wheel public="1" get="inline" set="null" line="350" static="1">
			<x path="Int"/>
			<haxe_doc>A mouse wheel or scroll event</haxe_doc>
		</wheel>
		<names line="352" static="1"><c path="Array"><c path="String"/></c></names>
		<to_string public="1" set="method" line="356" static="1"><f a="_type">
	<x path="Int"/>
	<c path="String"/>
</f></to_string>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.platform.native.input.sdl.ModValue" params="" file="/Users/sven/dev/snow/snow/platform/native/input/sdl/InputSystem.hx" module="snow.platform.native.input.sdl.InputSystem">
		<NONE public="1" line="364" static="1"><x path="Int"/></NONE>
		<LSHIFT public="1" line="365" static="1"><x path="Int"/></LSHIFT>
		<RSHIFT public="1" line="366" static="1"><x path="Int"/></RSHIFT>
		<LCTRL public="1" line="367" static="1"><x path="Int"/></LCTRL>
		<RCTRL public="1" line="368" static="1"><x path="Int"/></RCTRL>
		<LALT public="1" line="369" static="1"><x path="Int"/></LALT>
		<RALT public="1" line="370" static="1"><x path="Int"/></RALT>
		<LMETA public="1" line="371" static="1"><x path="Int"/></LMETA>
		<RMETA public="1" line="372" static="1"><x path="Int"/></RMETA>
		<NUM public="1" line="373" static="1"><x path="Int"/></NUM>
		<CAPS public="1" line="374" static="1"><x path="Int"/></CAPS>
		<MODE public="1" line="375" static="1"><x path="Int"/></MODE>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<abstract path="snow.platform.native.io.IOFileHandle" params="" file="/Users/sven/dev/snow/snow/platform/native/io/IOFile.hx" module="snow.platform.native.io.IOFile">
		<from><icast><x path="Float"/></icast></from>
		<this><x path="Float"/></this>
		<to><icast><x path="Float"/></icast></to>
		<impl><class path="snow.platform.native.io._IOFile.IOFileHandle_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/io/IOFile.hx" private="1" module="snow.platform.native.io.IOFile" extern="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="snow.platform.native.io._IOFile.IOFileHandle_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/io/IOFile.hx" private="1" module="snow.platform.native.io.IOFile" extern="1"><meta><m n=":keep"/></meta></class>
	<class path="snow.platform.native.io.IOFile" params="" file="/Users/sven/dev/snow/snow/platform/native/io/IOFile.hx">
		<from_file public="1" set="method" line="48" static="1">
			<f a="_id:?_mode" v=":'rb'">
				<c path="String"/>
				<c path="String"/>
				<c path="snow.platform.native.io.IOFile"/>
			</f>
			<haxe_doc>Create an `IOFile` from a file path `_id`, this bypasses the `Asset` system path helpers.</haxe_doc>
		</from_file>
		<snow_iosrc_from_file line="53" static="1"><f a=":">
	<c path="String"/>
	<c path="String"/>
	<x path="snow.platform.native.io.IOFileHandle"/>
</f></snow_iosrc_from_file>
		<snow_iosrc_file_read line="54" static="1"><f a=":::">
	<x path="snow.platform.native.io.IOFileHandle"/>
	<t path="snow.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_iosrc_file_read>
		<snow_iosrc_file_write line="55" static="1"><f a=":::">
	<x path="snow.platform.native.io.IOFileHandle"/>
	<t path="snow.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_iosrc_file_write>
		<snow_iosrc_file_seek line="56" static="1"><f a="::">
	<x path="snow.platform.native.io.IOFileHandle"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_iosrc_file_seek>
		<snow_iosrc_file_tell line="57" static="1"><f a="">
	<x path="snow.platform.native.io.IOFileHandle"/>
	<unknown/>
</f></snow_iosrc_file_tell>
		<snow_iosrc_file_close line="58" static="1"><f a="">
	<x path="snow.platform.native.io.IOFileHandle"/>
	<unknown/>
</f></snow_iosrc_file_close>
		<handle public="1">
			<x path="snow.platform.native.io.IOFileHandle"/>
			<haxe_doc>The internal native file handle</haxe_doc>
		</handle>
		<read public="1" set="method" line="22">
			<f a="dest:size:maxnum">
				<t path="snow.utils.ByteArray"/>
				<x path="Int"/>
				<x path="Int"/>
				<unknown/>
			</f>
			<haxe_doc>Read a `maxnum` of items of `size` in bytes, into `dest`. Same signature/returns as `fread`</haxe_doc>
		</read>
		<write public="1" set="method" line="27">
			<f a="src:size:num">
				<t path="snow.utils.ByteArray"/>
				<x path="Int"/>
				<x path="Int"/>
				<unknown/>
			</f>
			<haxe_doc>Write `num` of items of `size` in bytes, from `src` into this file. Same signature/returns as `fwrite`</haxe_doc>
		</write>
		<seek public="1" set="method" line="32">
			<f a="offset:whence">
				<x path="Int"/>
				<x path="Int"/>
				<unknown/>
			</f>
			<haxe_doc>Seek `offset` from `whence`, where whence is an int matching `set=0`, `cur=1`, `end=2`. Same signature/returns as `fseek`</haxe_doc>
		</seek>
		<tell public="1" set="method" line="37">
			<f a=""><unknown/></f>
			<haxe_doc>Tell the current position in the file, in bytes</haxe_doc>
		</tell>
		<close public="1" set="method" line="42">
			<f a=""><unknown/></f>
			<haxe_doc>Close the file</haxe_doc>
		</close>
		<new public="1" set="method" line="17">
			<f a="_handle">
				<x path="snow.platform.native.io.IOFileHandle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<haxe_doc>This class is a low level cross platform file access helper, that handles in bundle assets etc.
        If you want a file, use `Assets` instead, unless really required.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.platform.native.io.IOSystem" params="" file="/Users/sven/dev/snow/snow/platform/native/io/IOSystem.hx">
		<extends path="snow.io.IOSystemBinding"/>
		<isAbsolute set="method" line="123" static="1"><f a="path">
	<c path="String"/>
	<x path="Bool"/>
</f></isAbsolute>
		<resolve set="method" line="130" static="1"><f a="_path">
	<c path="String"/>
	<c path="String"/>
</f></resolve>
		<snow_io_url_open line="146" static="1"><f a="">
	<c path="String"/>
	<unknown/>
</f></snow_io_url_open>
		<snow_io_add_watch line="150" static="1"><f a="">
	<c path="String"/>
	<unknown/>
</f></snow_io_add_watch>
		<snow_io_remove_watch line="151" static="1"><f a="">
	<c path="String"/>
	<unknown/>
</f></snow_io_remove_watch>
		<snow_io_dialog_open line="153" static="1"><f a=":">
	<c path="String"/>
	<c path="Array"><t path="snow.types.FileFilter"/></c>
	<c path="String"/>
</f></snow_io_dialog_open>
		<snow_io_dialog_save line="154" static="1"><f a=":">
	<c path="String"/>
	<c path="Array"><t path="snow.types.FileFilter"/></c>
	<c path="String"/>
</f></snow_io_dialog_save>
		<snow_io_dialog_folder line="155" static="1"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></snow_io_dialog_folder>
		<url_open public="1" set="method" line="30" override="1">
			<f a="_url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Opens the specified url in the default browser</haxe_doc>
		</url_open>
		<watch_add public="1" set="method" line="46" override="1">
			<f a="_path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Call this to add a directory to watch for file change notifications.
                This is for directories only. Children files + sub folders children files will notify of change.
                supports:`windows` `mac` `linux` only</haxe_doc>
		</watch_add>
		<watch_remove public="1" set="method" line="56" override="1">
			<f a="_path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Call this to remove a watched directory.
                supports:`windows` `mac` `linux` only</haxe_doc>
		</watch_remove>
		<dialog_open public="1" set="method" line="69" override="1">
			<f a="?_title:?_filters" v="'Select file':null">
				<c path="String"/>
				<c path="Array"><t path="snow.types.FileFilter"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Call this to open a native platform file open dialog.
                Returns a blank string if they cancel or any error occurs.
                supports: `windows` `mac` `linux`</haxe_doc>
		</dialog_open>
		<dialog_save public="1" set="method" line="83" override="1">
			<f a="?_title:?_filter" v="'Save file':null">
				<c path="String"/>
				<t path="snow.types.FileFilter"/>
				<c path="String"/>
			</f>
			<haxe_doc>Call this to open a native platform file save dialog.
                    Returns a blank string if they cancel or any error occurs.
                    supports:`windows` `mac` `linux`</haxe_doc>
		</dialog_save>
		<dialog_folder public="1" set="method" line="101" override="1">
			<f a="?_title" v="'Select folder'">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Call this to open a native platform folder select dialog.
                    Returns a blank string if they cancel or any error occurs.
                    supports:`windows` `mac` `linux`</haxe_doc>
		</dialog_folder>
		<init public="1" set="method" line="111" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</init>
		<process public="1" set="method" line="113" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</process>
		<destroy public="1" set="method" line="115" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</destroy>
		<on_event public="1" set="method" line="117" override="1">
			<f a="_event">
				<t path="snow.types.SystemEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</on_event>
		<new public="1" set="method" line="20">
			<f a="_manager:_lib">
				<c path="snow.io.IO"/>
				<c path="snow.Snow"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<haxe_doc>This class is a low level cross platform IO helper.
        If you want file access, use `Assets` instead, unless really required.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<typedef path="snow.platform.native.render.opengl.GLActiveInfo" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL"><a>
	<type><x path="Int"/></type>
	<size><x path="Int"/></size>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="snow.platform.native.render.opengl.GLShaderPrecisionFormat" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL"><a>
	<rangeMin><x path="Int"/></rangeMin>
	<rangeMax><x path="Int"/></rangeMax>
	<precision><x path="Int"/></precision>
</a></typedef>
	<typedef path="snow.platform.native.render.opengl.GLContextAttributes" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL"><a>
	<stencil><x path="Bool"/></stencil>
	<preserveDrawingBuffer><x path="Bool"/></preserveDrawingBuffer>
	<premultipliedAlpha><x path="Bool"/></premultipliedAlpha>
	<depth><x path="Bool"/></depth>
	<antialias><x path="Bool"/></antialias>
	<alpha><x path="Bool"/></alpha>
</a></typedef>
	<typedef path="snow.platform.native.render.opengl.GLUniformLocation" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL"><x path="Int"/></typedef>
	<class path="snow.platform.native.render.opengl.GLObject" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL">
		<id public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The native GL handle/id. read only</haxe_doc>
		</id>
		<invalidated public="1" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The invalidated state. read only</haxe_doc>
		</invalidated>
		<toString set="method" line="56"><f a=""><c path="String"/></f></toString>
		<set_invalidated set="method" line="62"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_invalidated>
		<new public="1" set="method" line="50"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.platform.native.render.opengl.GLBuffer" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL">
		<extends path="snow.platform.native.render.opengl.GLObject"/>
		<toString set="method" line="73" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="71"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.platform.native.render.opengl.GLFBO" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL">
		<extends path="snow.platform.native.render.opengl.GLObject"/>
		<toString set="method" line="82" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="80"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.platform.native.render.opengl.GLRBO" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL">
		<extends path="snow.platform.native.render.opengl.GLObject"/>
		<toString set="method" line="90" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="88"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="snow.platform.native.render.opengl.GLFramebuffer" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL">
		<from>
			<icast field="fromInt"><x path="Int"/></icast>
			<icast field="fromDynamic"><d/></icast>
		</from>
		<this><c path="snow.platform.native.render.opengl.GLFBO"/></this>
		<impl><class path="snow.platform.native.render.opengl._GL.GLFramebuffer_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" private="1" module="snow.platform.native.render.opengl.GL">
	<id public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</id>
	<invalidated public="1" get="accessor" set="accessor" static="1">
		<x path="Bool"/>
		<meta><m n=":impl"/></meta>
	</invalidated>
	<_new public="1" get="inline" set="null" line="102" static="1">
		<f a="_id">
			<x path="Int"/>
			<c path="snow.platform.native.render.opengl.GLFBO"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_id get="inline" set="null" line="106" static="1">
		<f a="this">
			<c path="snow.platform.native.render.opengl.GLFBO"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_id>
	<get_invalidated get="inline" set="null" line="110" static="1">
		<f a="this">
			<c path="snow.platform.native.render.opengl.GLFBO"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_invalidated>
	<set_invalidated get="inline" set="null" line="114" static="1">
		<f a="this:_invalidated">
			<c path="snow.platform.native.render.opengl.GLFBO"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_invalidated>
	<fromInt public="1" get="inline" set="null" line="119" static="1">
		<f a="_id">
			<x path="Int"/>
			<x path="snow.platform.native.render.opengl.GLFramebuffer"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromInt>
	<fromDynamic public="1" get="inline" set="null" line="124" static="1">
		<f a="_id">
			<d/>
			<x path="snow.platform.native.render.opengl.GLFramebuffer"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromDynamic>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="snow.platform.native.render.opengl._GL.GLFramebuffer_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" private="1" module="snow.platform.native.render.opengl.GL">
		<id public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</id>
		<invalidated public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<meta><m n=":impl"/></meta>
		</invalidated>
		<_new public="1" get="inline" set="null" line="102" static="1">
			<f a="_id">
				<x path="Int"/>
				<c path="snow.platform.native.render.opengl.GLFBO"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_id get="inline" set="null" line="106" static="1">
			<f a="this">
				<c path="snow.platform.native.render.opengl.GLFBO"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_id>
		<get_invalidated get="inline" set="null" line="110" static="1">
			<f a="this">
				<c path="snow.platform.native.render.opengl.GLFBO"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_invalidated>
		<set_invalidated get="inline" set="null" line="114" static="1">
			<f a="this:_invalidated">
				<c path="snow.platform.native.render.opengl.GLFBO"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_invalidated>
		<fromInt public="1" get="inline" set="null" line="119" static="1">
			<f a="_id">
				<x path="Int"/>
				<x path="snow.platform.native.render.opengl.GLFramebuffer"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromInt>
		<fromDynamic public="1" get="inline" set="null" line="124" static="1">
			<f a="_id">
				<d/>
				<x path="snow.platform.native.render.opengl.GLFramebuffer"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromDynamic>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="snow.platform.native.render.opengl.GLRenderbuffer" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL">
		<from>
			<icast field="fromInt"><x path="Int"/></icast>
			<icast field="fromDynamic"><d/></icast>
		</from>
		<this><c path="snow.platform.native.render.opengl.GLRBO"/></this>
		<impl><class path="snow.platform.native.render.opengl._GL.GLRenderbuffer_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" private="1" module="snow.platform.native.render.opengl.GL">
	<id public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</id>
	<invalidated public="1" get="accessor" set="accessor" static="1">
		<x path="Bool"/>
		<meta><m n=":impl"/></meta>
	</invalidated>
	<_new public="1" get="inline" set="null" line="135" static="1">
		<f a="_id">
			<x path="Int"/>
			<c path="snow.platform.native.render.opengl.GLRBO"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_id get="inline" set="null" line="139" static="1">
		<f a="this">
			<c path="snow.platform.native.render.opengl.GLRBO"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_id>
	<get_invalidated get="inline" set="null" line="143" static="1">
		<f a="this">
			<c path="snow.platform.native.render.opengl.GLRBO"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_invalidated>
	<set_invalidated get="inline" set="null" line="147" static="1">
		<f a="this:_invalidated">
			<c path="snow.platform.native.render.opengl.GLRBO"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_invalidated>
	<fromInt public="1" get="inline" set="null" line="152" static="1">
		<f a="_id">
			<x path="Int"/>
			<x path="snow.platform.native.render.opengl.GLRenderbuffer"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromInt>
	<fromDynamic public="1" get="inline" set="null" line="157" static="1">
		<f a="_id">
			<d/>
			<x path="snow.platform.native.render.opengl.GLRenderbuffer"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromDynamic>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="snow.platform.native.render.opengl._GL.GLRenderbuffer_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" private="1" module="snow.platform.native.render.opengl.GL">
		<id public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</id>
		<invalidated public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<meta><m n=":impl"/></meta>
		</invalidated>
		<_new public="1" get="inline" set="null" line="135" static="1">
			<f a="_id">
				<x path="Int"/>
				<c path="snow.platform.native.render.opengl.GLRBO"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_id get="inline" set="null" line="139" static="1">
			<f a="this">
				<c path="snow.platform.native.render.opengl.GLRBO"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_id>
		<get_invalidated get="inline" set="null" line="143" static="1">
			<f a="this">
				<c path="snow.platform.native.render.opengl.GLRBO"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_invalidated>
		<set_invalidated get="inline" set="null" line="147" static="1">
			<f a="this:_invalidated">
				<c path="snow.platform.native.render.opengl.GLRBO"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_invalidated>
		<fromInt public="1" get="inline" set="null" line="152" static="1">
			<f a="_id">
				<x path="Int"/>
				<x path="snow.platform.native.render.opengl.GLRenderbuffer"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromInt>
		<fromDynamic public="1" get="inline" set="null" line="157" static="1">
			<f a="_id">
				<d/>
				<x path="snow.platform.native.render.opengl.GLRenderbuffer"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromDynamic>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.platform.native.render.opengl.GLShader" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL">
		<extends path="snow.platform.native.render.opengl.GLObject"/>
		<toString set="method" line="166" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="164"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.platform.native.render.opengl.GLTexture" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL">
		<extends path="snow.platform.native.render.opengl.GLObject"/>
		<toString set="method" line="175" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="173"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.platform.native.render.opengl.GLProgram" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL">
		<extends path="snow.platform.native.render.opengl.GLObject"/>
		<shaders public="1"><c path="Array"><c path="snow.platform.native.render.opengl.GLShader"/></c></shaders>
		<toString set="method" line="193" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="186"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.platform.native.render.opengl.GL" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx">
		<DEPTH_BUFFER_BIT public="1" get="inline" set="null" line="207" static="1"><x path="Int"/></DEPTH_BUFFER_BIT>
		<STENCIL_BUFFER_BIT public="1" get="inline" set="null" line="208" static="1"><x path="Int"/></STENCIL_BUFFER_BIT>
		<COLOR_BUFFER_BIT public="1" get="inline" set="null" line="209" static="1"><x path="Int"/></COLOR_BUFFER_BIT>
		<POINTS public="1" get="inline" set="null" line="212" static="1"><x path="Int"/></POINTS>
		<LINES public="1" get="inline" set="null" line="213" static="1"><x path="Int"/></LINES>
		<LINE_LOOP public="1" get="inline" set="null" line="214" static="1"><x path="Int"/></LINE_LOOP>
		<LINE_STRIP public="1" get="inline" set="null" line="215" static="1"><x path="Int"/></LINE_STRIP>
		<TRIANGLES public="1" get="inline" set="null" line="216" static="1"><x path="Int"/></TRIANGLES>
		<TRIANGLE_STRIP public="1" get="inline" set="null" line="217" static="1"><x path="Int"/></TRIANGLE_STRIP>
		<TRIANGLE_FAN public="1" get="inline" set="null" line="218" static="1"><x path="Int"/></TRIANGLE_FAN>
		<ZERO public="1" get="inline" set="null" line="230" static="1"><x path="Int"/></ZERO>
		<ONE public="1" get="inline" set="null" line="231" static="1"><x path="Int"/></ONE>
		<SRC_COLOR public="1" get="inline" set="null" line="232" static="1"><x path="Int"/></SRC_COLOR>
		<ONE_MINUS_SRC_COLOR public="1" get="inline" set="null" line="233" static="1"><x path="Int"/></ONE_MINUS_SRC_COLOR>
		<SRC_ALPHA public="1" get="inline" set="null" line="234" static="1"><x path="Int"/></SRC_ALPHA>
		<ONE_MINUS_SRC_ALPHA public="1" get="inline" set="null" line="235" static="1"><x path="Int"/></ONE_MINUS_SRC_ALPHA>
		<DST_ALPHA public="1" get="inline" set="null" line="236" static="1"><x path="Int"/></DST_ALPHA>
		<ONE_MINUS_DST_ALPHA public="1" get="inline" set="null" line="237" static="1"><x path="Int"/></ONE_MINUS_DST_ALPHA>
		<DST_COLOR public="1" get="inline" set="null" line="242" static="1"><x path="Int"/></DST_COLOR>
		<ONE_MINUS_DST_COLOR public="1" get="inline" set="null" line="243" static="1"><x path="Int"/></ONE_MINUS_DST_COLOR>
		<SRC_ALPHA_SATURATE public="1" get="inline" set="null" line="244" static="1"><x path="Int"/></SRC_ALPHA_SATURATE>
		<FUNC_ADD public="1" get="inline" set="null" line="250" static="1"><x path="Int"/></FUNC_ADD>
		<BLEND_EQUATION public="1" get="inline" set="null" line="251" static="1"><x path="Int"/></BLEND_EQUATION>
		<BLEND_EQUATION_RGB public="1" get="inline" set="null" line="252" static="1"><x path="Int"/></BLEND_EQUATION_RGB>
		<BLEND_EQUATION_ALPHA public="1" get="inline" set="null" line="253" static="1"><x path="Int"/></BLEND_EQUATION_ALPHA>
		<FUNC_SUBTRACT public="1" get="inline" set="null" line="256" static="1"><x path="Int"/></FUNC_SUBTRACT>
		<FUNC_REVERSE_SUBTRACT public="1" get="inline" set="null" line="257" static="1"><x path="Int"/></FUNC_REVERSE_SUBTRACT>
		<BLEND_DST_RGB public="1" get="inline" set="null" line="260" static="1"><x path="Int"/></BLEND_DST_RGB>
		<BLEND_SRC_RGB public="1" get="inline" set="null" line="261" static="1"><x path="Int"/></BLEND_SRC_RGB>
		<BLEND_DST_ALPHA public="1" get="inline" set="null" line="262" static="1"><x path="Int"/></BLEND_DST_ALPHA>
		<BLEND_SRC_ALPHA public="1" get="inline" set="null" line="263" static="1"><x path="Int"/></BLEND_SRC_ALPHA>
		<CONSTANT_COLOR public="1" get="inline" set="null" line="264" static="1"><x path="Int"/></CONSTANT_COLOR>
		<ONE_MINUS_CONSTANT_COLOR public="1" get="inline" set="null" line="265" static="1"><x path="Int"/></ONE_MINUS_CONSTANT_COLOR>
		<CONSTANT_ALPHA public="1" get="inline" set="null" line="266" static="1"><x path="Int"/></CONSTANT_ALPHA>
		<ONE_MINUS_CONSTANT_ALPHA public="1" get="inline" set="null" line="267" static="1"><x path="Int"/></ONE_MINUS_CONSTANT_ALPHA>
		<BLEND_COLOR public="1" get="inline" set="null" line="268" static="1"><x path="Int"/></BLEND_COLOR>
		<ARRAY_BUFFER public="1" get="inline" set="null" line="271" static="1"><x path="Int"/></ARRAY_BUFFER>
		<ELEMENT_ARRAY_BUFFER public="1" get="inline" set="null" line="272" static="1"><x path="Int"/></ELEMENT_ARRAY_BUFFER>
		<ARRAY_BUFFER_BINDING public="1" get="inline" set="null" line="273" static="1"><x path="Int"/></ARRAY_BUFFER_BINDING>
		<ELEMENT_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" line="274" static="1"><x path="Int"/></ELEMENT_ARRAY_BUFFER_BINDING>
		<STREAM_DRAW public="1" get="inline" set="null" line="276" static="1"><x path="Int"/></STREAM_DRAW>
		<STATIC_DRAW public="1" get="inline" set="null" line="277" static="1"><x path="Int"/></STATIC_DRAW>
		<DYNAMIC_DRAW public="1" get="inline" set="null" line="278" static="1"><x path="Int"/></DYNAMIC_DRAW>
		<BUFFER_SIZE public="1" get="inline" set="null" line="280" static="1"><x path="Int"/></BUFFER_SIZE>
		<BUFFER_USAGE public="1" get="inline" set="null" line="281" static="1"><x path="Int"/></BUFFER_USAGE>
		<CURRENT_VERTEX_ATTRIB public="1" get="inline" set="null" line="283" static="1"><x path="Int"/></CURRENT_VERTEX_ATTRIB>
		<FRONT public="1" get="inline" set="null" line="286" static="1"><x path="Int"/></FRONT>
		<BACK public="1" get="inline" set="null" line="287" static="1"><x path="Int"/></BACK>
		<FRONT_AND_BACK public="1" get="inline" set="null" line="288" static="1"><x path="Int"/></FRONT_AND_BACK>
		<CULL_FACE public="1" get="inline" set="null" line="301" static="1"><x path="Int"/></CULL_FACE>
		<BLEND public="1" get="inline" set="null" line="302" static="1"><x path="Int"/></BLEND>
		<DITHER public="1" get="inline" set="null" line="303" static="1"><x path="Int"/></DITHER>
		<STENCIL_TEST public="1" get="inline" set="null" line="304" static="1"><x path="Int"/></STENCIL_TEST>
		<DEPTH_TEST public="1" get="inline" set="null" line="305" static="1"><x path="Int"/></DEPTH_TEST>
		<SCISSOR_TEST public="1" get="inline" set="null" line="306" static="1"><x path="Int"/></SCISSOR_TEST>
		<POLYGON_OFFSET_FILL public="1" get="inline" set="null" line="307" static="1"><x path="Int"/></POLYGON_OFFSET_FILL>
		<SAMPLE_ALPHA_TO_COVERAGE public="1" get="inline" set="null" line="308" static="1"><x path="Int"/></SAMPLE_ALPHA_TO_COVERAGE>
		<SAMPLE_COVERAGE public="1" get="inline" set="null" line="309" static="1"><x path="Int"/></SAMPLE_COVERAGE>
		<NO_ERROR public="1" get="inline" set="null" line="312" static="1"><x path="Int"/></NO_ERROR>
		<INVALID_ENUM public="1" get="inline" set="null" line="313" static="1"><x path="Int"/></INVALID_ENUM>
		<INVALID_VALUE public="1" get="inline" set="null" line="314" static="1"><x path="Int"/></INVALID_VALUE>
		<INVALID_OPERATION public="1" get="inline" set="null" line="315" static="1"><x path="Int"/></INVALID_OPERATION>
		<OUT_OF_MEMORY public="1" get="inline" set="null" line="316" static="1"><x path="Int"/></OUT_OF_MEMORY>
		<CW public="1" get="inline" set="null" line="319" static="1"><x path="Int"/></CW>
		<CCW public="1" get="inline" set="null" line="320" static="1"><x path="Int"/></CCW>
		<LINE_WIDTH public="1" get="inline" set="null" line="323" static="1"><x path="Int"/></LINE_WIDTH>
		<ALIASED_POINT_SIZE_RANGE public="1" get="inline" set="null" line="324" static="1"><x path="Int"/></ALIASED_POINT_SIZE_RANGE>
		<ALIASED_LINE_WIDTH_RANGE public="1" get="inline" set="null" line="325" static="1"><x path="Int"/></ALIASED_LINE_WIDTH_RANGE>
		<CULL_FACE_MODE public="1" get="inline" set="null" line="326" static="1"><x path="Int"/></CULL_FACE_MODE>
		<FRONT_FACE public="1" get="inline" set="null" line="327" static="1"><x path="Int"/></FRONT_FACE>
		<DEPTH_RANGE public="1" get="inline" set="null" line="328" static="1"><x path="Int"/></DEPTH_RANGE>
		<DEPTH_WRITEMASK public="1" get="inline" set="null" line="329" static="1"><x path="Int"/></DEPTH_WRITEMASK>
		<DEPTH_CLEAR_VALUE public="1" get="inline" set="null" line="330" static="1"><x path="Int"/></DEPTH_CLEAR_VALUE>
		<DEPTH_FUNC public="1" get="inline" set="null" line="331" static="1"><x path="Int"/></DEPTH_FUNC>
		<STENCIL_CLEAR_VALUE public="1" get="inline" set="null" line="332" static="1"><x path="Int"/></STENCIL_CLEAR_VALUE>
		<STENCIL_FUNC public="1" get="inline" set="null" line="333" static="1"><x path="Int"/></STENCIL_FUNC>
		<STENCIL_FAIL public="1" get="inline" set="null" line="334" static="1"><x path="Int"/></STENCIL_FAIL>
		<STENCIL_PASS_DEPTH_FAIL public="1" get="inline" set="null" line="335" static="1"><x path="Int"/></STENCIL_PASS_DEPTH_FAIL>
		<STENCIL_PASS_DEPTH_PASS public="1" get="inline" set="null" line="336" static="1"><x path="Int"/></STENCIL_PASS_DEPTH_PASS>
		<STENCIL_REF public="1" get="inline" set="null" line="337" static="1"><x path="Int"/></STENCIL_REF>
		<STENCIL_VALUE_MASK public="1" get="inline" set="null" line="338" static="1"><x path="Int"/></STENCIL_VALUE_MASK>
		<STENCIL_WRITEMASK public="1" get="inline" set="null" line="339" static="1"><x path="Int"/></STENCIL_WRITEMASK>
		<STENCIL_BACK_FUNC public="1" get="inline" set="null" line="340" static="1"><x path="Int"/></STENCIL_BACK_FUNC>
		<STENCIL_BACK_FAIL public="1" get="inline" set="null" line="341" static="1"><x path="Int"/></STENCIL_BACK_FAIL>
		<STENCIL_BACK_PASS_DEPTH_FAIL public="1" get="inline" set="null" line="342" static="1"><x path="Int"/></STENCIL_BACK_PASS_DEPTH_FAIL>
		<STENCIL_BACK_PASS_DEPTH_PASS public="1" get="inline" set="null" line="343" static="1"><x path="Int"/></STENCIL_BACK_PASS_DEPTH_PASS>
		<STENCIL_BACK_REF public="1" get="inline" set="null" line="344" static="1"><x path="Int"/></STENCIL_BACK_REF>
		<STENCIL_BACK_VALUE_MASK public="1" get="inline" set="null" line="345" static="1"><x path="Int"/></STENCIL_BACK_VALUE_MASK>
		<STENCIL_BACK_WRITEMASK public="1" get="inline" set="null" line="346" static="1"><x path="Int"/></STENCIL_BACK_WRITEMASK>
		<VIEWPORT public="1" get="inline" set="null" line="347" static="1"><x path="Int"/></VIEWPORT>
		<SCISSOR_BOX public="1" get="inline" set="null" line="348" static="1"><x path="Int"/></SCISSOR_BOX>
		<COLOR_CLEAR_VALUE public="1" get="inline" set="null" line="350" static="1"><x path="Int"/></COLOR_CLEAR_VALUE>
		<COLOR_WRITEMASK public="1" get="inline" set="null" line="351" static="1"><x path="Int"/></COLOR_WRITEMASK>
		<UNPACK_ALIGNMENT public="1" get="inline" set="null" line="352" static="1"><x path="Int"/></UNPACK_ALIGNMENT>
		<PACK_ALIGNMENT public="1" get="inline" set="null" line="353" static="1"><x path="Int"/></PACK_ALIGNMENT>
		<MAX_TEXTURE_SIZE public="1" get="inline" set="null" line="354" static="1"><x path="Int"/></MAX_TEXTURE_SIZE>
		<MAX_VIEWPORT_DIMS public="1" get="inline" set="null" line="355" static="1"><x path="Int"/></MAX_VIEWPORT_DIMS>
		<SUBPIXEL_BITS public="1" get="inline" set="null" line="356" static="1"><x path="Int"/></SUBPIXEL_BITS>
		<RED_BITS public="1" get="inline" set="null" line="357" static="1"><x path="Int"/></RED_BITS>
		<GREEN_BITS public="1" get="inline" set="null" line="358" static="1"><x path="Int"/></GREEN_BITS>
		<BLUE_BITS public="1" get="inline" set="null" line="359" static="1"><x path="Int"/></BLUE_BITS>
		<ALPHA_BITS public="1" get="inline" set="null" line="360" static="1"><x path="Int"/></ALPHA_BITS>
		<DEPTH_BITS public="1" get="inline" set="null" line="361" static="1"><x path="Int"/></DEPTH_BITS>
		<STENCIL_BITS public="1" get="inline" set="null" line="362" static="1"><x path="Int"/></STENCIL_BITS>
		<POLYGON_OFFSET_UNITS public="1" get="inline" set="null" line="363" static="1"><x path="Int"/></POLYGON_OFFSET_UNITS>
		<POLYGON_OFFSET_FACTOR public="1" get="inline" set="null" line="365" static="1"><x path="Int"/></POLYGON_OFFSET_FACTOR>
		<TEXTURE_BINDING_2D public="1" get="inline" set="null" line="366" static="1"><x path="Int"/></TEXTURE_BINDING_2D>
		<SAMPLE_BUFFERS public="1" get="inline" set="null" line="367" static="1"><x path="Int"/></SAMPLE_BUFFERS>
		<SAMPLES public="1" get="inline" set="null" line="368" static="1"><x path="Int"/></SAMPLES>
		<SAMPLE_COVERAGE_VALUE public="1" get="inline" set="null" line="369" static="1"><x path="Int"/></SAMPLE_COVERAGE_VALUE>
		<SAMPLE_COVERAGE_INVERT public="1" get="inline" set="null" line="370" static="1"><x path="Int"/></SAMPLE_COVERAGE_INVERT>
		<COMPRESSED_TEXTURE_FORMATS public="1" get="inline" set="null" line="377" static="1"><x path="Int"/></COMPRESSED_TEXTURE_FORMATS>
		<DONT_CARE public="1" get="inline" set="null" line="380" static="1"><x path="Int"/></DONT_CARE>
		<FASTEST public="1" get="inline" set="null" line="381" static="1"><x path="Int"/></FASTEST>
		<NICEST public="1" get="inline" set="null" line="382" static="1"><x path="Int"/></NICEST>
		<GENERATE_MIPMAP_HINT public="1" get="inline" set="null" line="385" static="1"><x path="Int"/></GENERATE_MIPMAP_HINT>
		<BYTE public="1" get="inline" set="null" line="388" static="1"><x path="Int"/></BYTE>
		<UNSIGNED_BYTE public="1" get="inline" set="null" line="389" static="1"><x path="Int"/></UNSIGNED_BYTE>
		<SHORT public="1" get="inline" set="null" line="390" static="1"><x path="Int"/></SHORT>
		<UNSIGNED_SHORT public="1" get="inline" set="null" line="391" static="1"><x path="Int"/></UNSIGNED_SHORT>
		<INT public="1" get="inline" set="null" line="392" static="1"><x path="Int"/></INT>
		<UNSIGNED_INT public="1" get="inline" set="null" line="393" static="1"><x path="Int"/></UNSIGNED_INT>
		<FLOAT public="1" get="inline" set="null" line="394" static="1"><x path="Int"/></FLOAT>
		<DEPTH_COMPONENT public="1" get="inline" set="null" line="397" static="1"><x path="Int"/></DEPTH_COMPONENT>
		<ALPHA public="1" get="inline" set="null" line="398" static="1"><x path="Int"/></ALPHA>
		<RGB public="1" get="inline" set="null" line="399" static="1"><x path="Int"/></RGB>
		<RGBA public="1" get="inline" set="null" line="400" static="1"><x path="Int"/></RGBA>
		<LUMINANCE public="1" get="inline" set="null" line="401" static="1"><x path="Int"/></LUMINANCE>
		<LUMINANCE_ALPHA public="1" get="inline" set="null" line="402" static="1"><x path="Int"/></LUMINANCE_ALPHA>
		<UNSIGNED_SHORT_4_4_4_4 public="1" get="inline" set="null" line="406" static="1"><x path="Int"/></UNSIGNED_SHORT_4_4_4_4>
		<UNSIGNED_SHORT_5_5_5_1 public="1" get="inline" set="null" line="407" static="1"><x path="Int"/></UNSIGNED_SHORT_5_5_5_1>
		<UNSIGNED_SHORT_5_6_5 public="1" get="inline" set="null" line="408" static="1"><x path="Int"/></UNSIGNED_SHORT_5_6_5>
		<FRAGMENT_SHADER public="1" get="inline" set="null" line="411" static="1"><x path="Int"/></FRAGMENT_SHADER>
		<VERTEX_SHADER public="1" get="inline" set="null" line="412" static="1"><x path="Int"/></VERTEX_SHADER>
		<MAX_VERTEX_ATTRIBS public="1" get="inline" set="null" line="413" static="1"><x path="Int"/></MAX_VERTEX_ATTRIBS>
		<MAX_VERTEX_UNIFORM_VECTORS public="1" get="inline" set="null" line="414" static="1"><x path="Int"/></MAX_VERTEX_UNIFORM_VECTORS>
		<MAX_VARYING_VECTORS public="1" get="inline" set="null" line="415" static="1"><x path="Int"/></MAX_VARYING_VECTORS>
		<MAX_COMBINED_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" line="416" static="1"><x path="Int"/></MAX_COMBINED_TEXTURE_IMAGE_UNITS>
		<MAX_VERTEX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" line="417" static="1"><x path="Int"/></MAX_VERTEX_TEXTURE_IMAGE_UNITS>
		<MAX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" line="418" static="1"><x path="Int"/></MAX_TEXTURE_IMAGE_UNITS>
		<MAX_FRAGMENT_UNIFORM_VECTORS public="1" get="inline" set="null" line="419" static="1"><x path="Int"/></MAX_FRAGMENT_UNIFORM_VECTORS>
		<SHADER_TYPE public="1" get="inline" set="null" line="420" static="1"><x path="Int"/></SHADER_TYPE>
		<DELETE_STATUS public="1" get="inline" set="null" line="421" static="1"><x path="Int"/></DELETE_STATUS>
		<LINK_STATUS public="1" get="inline" set="null" line="422" static="1"><x path="Int"/></LINK_STATUS>
		<VALIDATE_STATUS public="1" get="inline" set="null" line="423" static="1"><x path="Int"/></VALIDATE_STATUS>
		<ATTACHED_SHADERS public="1" get="inline" set="null" line="424" static="1"><x path="Int"/></ATTACHED_SHADERS>
		<ACTIVE_UNIFORMS public="1" get="inline" set="null" line="425" static="1"><x path="Int"/></ACTIVE_UNIFORMS>
		<ACTIVE_ATTRIBUTES public="1" get="inline" set="null" line="426" static="1"><x path="Int"/></ACTIVE_ATTRIBUTES>
		<SHADING_LANGUAGE_VERSION public="1" get="inline" set="null" line="427" static="1"><x path="Int"/></SHADING_LANGUAGE_VERSION>
		<CURRENT_PROGRAM public="1" get="inline" set="null" line="428" static="1"><x path="Int"/></CURRENT_PROGRAM>
		<NEVER public="1" get="inline" set="null" line="431" static="1"><x path="Int"/></NEVER>
		<LESS public="1" get="inline" set="null" line="432" static="1"><x path="Int"/></LESS>
		<EQUAL public="1" get="inline" set="null" line="433" static="1"><x path="Int"/></EQUAL>
		<LEQUAL public="1" get="inline" set="null" line="434" static="1"><x path="Int"/></LEQUAL>
		<GREATER public="1" get="inline" set="null" line="435" static="1"><x path="Int"/></GREATER>
		<NOTEQUAL public="1" get="inline" set="null" line="436" static="1"><x path="Int"/></NOTEQUAL>
		<GEQUAL public="1" get="inline" set="null" line="437" static="1"><x path="Int"/></GEQUAL>
		<ALWAYS public="1" get="inline" set="null" line="438" static="1"><x path="Int"/></ALWAYS>
		<KEEP public="1" get="inline" set="null" line="442" static="1"><x path="Int"/></KEEP>
		<REPLACE public="1" get="inline" set="null" line="443" static="1"><x path="Int"/></REPLACE>
		<INCR public="1" get="inline" set="null" line="444" static="1"><x path="Int"/></INCR>
		<DECR public="1" get="inline" set="null" line="445" static="1"><x path="Int"/></DECR>
		<INVERT public="1" get="inline" set="null" line="446" static="1"><x path="Int"/></INVERT>
		<INCR_WRAP public="1" get="inline" set="null" line="447" static="1"><x path="Int"/></INCR_WRAP>
		<DECR_WRAP public="1" get="inline" set="null" line="448" static="1"><x path="Int"/></DECR_WRAP>
		<VENDOR public="1" get="inline" set="null" line="451" static="1"><x path="Int"/></VENDOR>
		<RENDERER public="1" get="inline" set="null" line="452" static="1"><x path="Int"/></RENDERER>
		<VERSION public="1" get="inline" set="null" line="453" static="1"><x path="Int"/></VERSION>
		<NEAREST public="1" get="inline" set="null" line="456" static="1"><x path="Int"/></NEAREST>
		<LINEAR public="1" get="inline" set="null" line="457" static="1"><x path="Int"/></LINEAR>
		<NEAREST_MIPMAP_NEAREST public="1" get="inline" set="null" line="462" static="1"><x path="Int"/></NEAREST_MIPMAP_NEAREST>
		<LINEAR_MIPMAP_NEAREST public="1" get="inline" set="null" line="463" static="1"><x path="Int"/></LINEAR_MIPMAP_NEAREST>
		<NEAREST_MIPMAP_LINEAR public="1" get="inline" set="null" line="464" static="1"><x path="Int"/></NEAREST_MIPMAP_LINEAR>
		<LINEAR_MIPMAP_LINEAR public="1" get="inline" set="null" line="465" static="1"><x path="Int"/></LINEAR_MIPMAP_LINEAR>
		<TEXTURE_MAG_FILTER public="1" get="inline" set="null" line="468" static="1"><x path="Int"/></TEXTURE_MAG_FILTER>
		<TEXTURE_MIN_FILTER public="1" get="inline" set="null" line="469" static="1"><x path="Int"/></TEXTURE_MIN_FILTER>
		<TEXTURE_WRAP_S public="1" get="inline" set="null" line="470" static="1"><x path="Int"/></TEXTURE_WRAP_S>
		<TEXTURE_WRAP_T public="1" get="inline" set="null" line="471" static="1"><x path="Int"/></TEXTURE_WRAP_T>
		<TEXTURE_2D public="1" get="inline" set="null" line="474" static="1"><x path="Int"/></TEXTURE_2D>
		<TEXTURE public="1" get="inline" set="null" line="475" static="1"><x path="Int"/></TEXTURE>
		<TEXTURE_CUBE_MAP public="1" get="inline" set="null" line="477" static="1"><x path="Int"/></TEXTURE_CUBE_MAP>
		<TEXTURE_BINDING_CUBE_MAP public="1" get="inline" set="null" line="478" static="1"><x path="Int"/></TEXTURE_BINDING_CUBE_MAP>
		<TEXTURE_CUBE_MAP_POSITIVE_X public="1" get="inline" set="null" line="479" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_POSITIVE_X>
		<TEXTURE_CUBE_MAP_NEGATIVE_X public="1" get="inline" set="null" line="480" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_NEGATIVE_X>
		<TEXTURE_CUBE_MAP_POSITIVE_Y public="1" get="inline" set="null" line="481" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_POSITIVE_Y>
		<TEXTURE_CUBE_MAP_NEGATIVE_Y public="1" get="inline" set="null" line="482" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_NEGATIVE_Y>
		<TEXTURE_CUBE_MAP_POSITIVE_Z public="1" get="inline" set="null" line="483" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_POSITIVE_Z>
		<TEXTURE_CUBE_MAP_NEGATIVE_Z public="1" get="inline" set="null" line="484" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_NEGATIVE_Z>
		<MAX_CUBE_MAP_TEXTURE_SIZE public="1" get="inline" set="null" line="485" static="1"><x path="Int"/></MAX_CUBE_MAP_TEXTURE_SIZE>
		<TEXTURE0 public="1" get="inline" set="null" line="488" static="1"><x path="Int"/></TEXTURE0>
		<TEXTURE1 public="1" get="inline" set="null" line="489" static="1"><x path="Int"/></TEXTURE1>
		<TEXTURE2 public="1" get="inline" set="null" line="490" static="1"><x path="Int"/></TEXTURE2>
		<TEXTURE3 public="1" get="inline" set="null" line="491" static="1"><x path="Int"/></TEXTURE3>
		<TEXTURE4 public="1" get="inline" set="null" line="492" static="1"><x path="Int"/></TEXTURE4>
		<TEXTURE5 public="1" get="inline" set="null" line="493" static="1"><x path="Int"/></TEXTURE5>
		<TEXTURE6 public="1" get="inline" set="null" line="494" static="1"><x path="Int"/></TEXTURE6>
		<TEXTURE7 public="1" get="inline" set="null" line="495" static="1"><x path="Int"/></TEXTURE7>
		<TEXTURE8 public="1" get="inline" set="null" line="496" static="1"><x path="Int"/></TEXTURE8>
		<TEXTURE9 public="1" get="inline" set="null" line="497" static="1"><x path="Int"/></TEXTURE9>
		<TEXTURE10 public="1" get="inline" set="null" line="498" static="1"><x path="Int"/></TEXTURE10>
		<TEXTURE11 public="1" get="inline" set="null" line="499" static="1"><x path="Int"/></TEXTURE11>
		<TEXTURE12 public="1" get="inline" set="null" line="500" static="1"><x path="Int"/></TEXTURE12>
		<TEXTURE13 public="1" get="inline" set="null" line="501" static="1"><x path="Int"/></TEXTURE13>
		<TEXTURE14 public="1" get="inline" set="null" line="502" static="1"><x path="Int"/></TEXTURE14>
		<TEXTURE15 public="1" get="inline" set="null" line="503" static="1"><x path="Int"/></TEXTURE15>
		<TEXTURE16 public="1" get="inline" set="null" line="504" static="1"><x path="Int"/></TEXTURE16>
		<TEXTURE17 public="1" get="inline" set="null" line="505" static="1"><x path="Int"/></TEXTURE17>
		<TEXTURE18 public="1" get="inline" set="null" line="506" static="1"><x path="Int"/></TEXTURE18>
		<TEXTURE19 public="1" get="inline" set="null" line="507" static="1"><x path="Int"/></TEXTURE19>
		<TEXTURE20 public="1" get="inline" set="null" line="508" static="1"><x path="Int"/></TEXTURE20>
		<TEXTURE21 public="1" get="inline" set="null" line="509" static="1"><x path="Int"/></TEXTURE21>
		<TEXTURE22 public="1" get="inline" set="null" line="510" static="1"><x path="Int"/></TEXTURE22>
		<TEXTURE23 public="1" get="inline" set="null" line="511" static="1"><x path="Int"/></TEXTURE23>
		<TEXTURE24 public="1" get="inline" set="null" line="512" static="1"><x path="Int"/></TEXTURE24>
		<TEXTURE25 public="1" get="inline" set="null" line="513" static="1"><x path="Int"/></TEXTURE25>
		<TEXTURE26 public="1" get="inline" set="null" line="514" static="1"><x path="Int"/></TEXTURE26>
		<TEXTURE27 public="1" get="inline" set="null" line="515" static="1"><x path="Int"/></TEXTURE27>
		<TEXTURE28 public="1" get="inline" set="null" line="516" static="1"><x path="Int"/></TEXTURE28>
		<TEXTURE29 public="1" get="inline" set="null" line="517" static="1"><x path="Int"/></TEXTURE29>
		<TEXTURE30 public="1" get="inline" set="null" line="518" static="1"><x path="Int"/></TEXTURE30>
		<TEXTURE31 public="1" get="inline" set="null" line="519" static="1"><x path="Int"/></TEXTURE31>
		<ACTIVE_TEXTURE public="1" get="inline" set="null" line="520" static="1"><x path="Int"/></ACTIVE_TEXTURE>
		<REPEAT public="1" get="inline" set="null" line="523" static="1"><x path="Int"/></REPEAT>
		<CLAMP_TO_EDGE public="1" get="inline" set="null" line="524" static="1"><x path="Int"/></CLAMP_TO_EDGE>
		<MIRRORED_REPEAT public="1" get="inline" set="null" line="525" static="1"><x path="Int"/></MIRRORED_REPEAT>
		<FLOAT_VEC2 public="1" get="inline" set="null" line="528" static="1"><x path="Int"/></FLOAT_VEC2>
		<FLOAT_VEC3 public="1" get="inline" set="null" line="529" static="1"><x path="Int"/></FLOAT_VEC3>
		<FLOAT_VEC4 public="1" get="inline" set="null" line="530" static="1"><x path="Int"/></FLOAT_VEC4>
		<INT_VEC2 public="1" get="inline" set="null" line="531" static="1"><x path="Int"/></INT_VEC2>
		<INT_VEC3 public="1" get="inline" set="null" line="532" static="1"><x path="Int"/></INT_VEC3>
		<INT_VEC4 public="1" get="inline" set="null" line="533" static="1"><x path="Int"/></INT_VEC4>
		<BOOL public="1" get="inline" set="null" line="534" static="1"><x path="Int"/></BOOL>
		<BOOL_VEC2 public="1" get="inline" set="null" line="535" static="1"><x path="Int"/></BOOL_VEC2>
		<BOOL_VEC3 public="1" get="inline" set="null" line="536" static="1"><x path="Int"/></BOOL_VEC3>
		<BOOL_VEC4 public="1" get="inline" set="null" line="537" static="1"><x path="Int"/></BOOL_VEC4>
		<FLOAT_MAT2 public="1" get="inline" set="null" line="538" static="1"><x path="Int"/></FLOAT_MAT2>
		<FLOAT_MAT3 public="1" get="inline" set="null" line="539" static="1"><x path="Int"/></FLOAT_MAT3>
		<FLOAT_MAT4 public="1" get="inline" set="null" line="540" static="1"><x path="Int"/></FLOAT_MAT4>
		<SAMPLER_2D public="1" get="inline" set="null" line="541" static="1"><x path="Int"/></SAMPLER_2D>
		<SAMPLER_CUBE public="1" get="inline" set="null" line="542" static="1"><x path="Int"/></SAMPLER_CUBE>
		<VERTEX_ATTRIB_ARRAY_ENABLED public="1" get="inline" set="null" line="545" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_ENABLED>
		<VERTEX_ATTRIB_ARRAY_SIZE public="1" get="inline" set="null" line="546" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_SIZE>
		<VERTEX_ATTRIB_ARRAY_STRIDE public="1" get="inline" set="null" line="547" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_STRIDE>
		<VERTEX_ATTRIB_ARRAY_TYPE public="1" get="inline" set="null" line="548" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_TYPE>
		<VERTEX_ATTRIB_ARRAY_NORMALIZED public="1" get="inline" set="null" line="549" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_NORMALIZED>
		<VERTEX_ATTRIB_ARRAY_POINTER public="1" get="inline" set="null" line="550" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_POINTER>
		<VERTEX_ATTRIB_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" line="551" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_BUFFER_BINDING>
		<VERTEX_PROGRAM_POINT_SIZE public="1" get="inline" set="null" line="554" static="1"><x path="Int"/></VERTEX_PROGRAM_POINT_SIZE>
		<POINT_SPRITE public="1" get="inline" set="null" line="555" static="1"><x path="Int"/></POINT_SPRITE>
		<COMPILE_STATUS public="1" get="inline" set="null" line="558" static="1"><x path="Int"/></COMPILE_STATUS>
		<LOW_FLOAT public="1" get="inline" set="null" line="561" static="1"><x path="Int"/></LOW_FLOAT>
		<MEDIUM_FLOAT public="1" get="inline" set="null" line="562" static="1"><x path="Int"/></MEDIUM_FLOAT>
		<HIGH_FLOAT public="1" get="inline" set="null" line="563" static="1"><x path="Int"/></HIGH_FLOAT>
		<LOW_INT public="1" get="inline" set="null" line="564" static="1"><x path="Int"/></LOW_INT>
		<MEDIUM_INT public="1" get="inline" set="null" line="565" static="1"><x path="Int"/></MEDIUM_INT>
		<HIGH_INT public="1" get="inline" set="null" line="566" static="1"><x path="Int"/></HIGH_INT>
		<FRAMEBUFFER public="1" get="inline" set="null" line="569" static="1"><x path="Int"/></FRAMEBUFFER>
		<RENDERBUFFER public="1" get="inline" set="null" line="570" static="1"><x path="Int"/></RENDERBUFFER>
		<RGBA4 public="1" get="inline" set="null" line="572" static="1"><x path="Int"/></RGBA4>
		<RGB5_A1 public="1" get="inline" set="null" line="573" static="1"><x path="Int"/></RGB5_A1>
		<RGB565 public="1" get="inline" set="null" line="574" static="1"><x path="Int"/></RGB565>
		<DEPTH_COMPONENT16 public="1" get="inline" set="null" line="575" static="1"><x path="Int"/></DEPTH_COMPONENT16>
		<STENCIL_INDEX public="1" get="inline" set="null" line="576" static="1"><x path="Int"/></STENCIL_INDEX>
		<STENCIL_INDEX8 public="1" get="inline" set="null" line="577" static="1"><x path="Int"/></STENCIL_INDEX8>
		<DEPTH_STENCIL public="1" get="inline" set="null" line="578" static="1"><x path="Int"/></DEPTH_STENCIL>
		<RENDERBUFFER_WIDTH public="1" get="inline" set="null" line="580" static="1"><x path="Int"/></RENDERBUFFER_WIDTH>
		<RENDERBUFFER_HEIGHT public="1" get="inline" set="null" line="581" static="1"><x path="Int"/></RENDERBUFFER_HEIGHT>
		<RENDERBUFFER_INTERNAL_FORMAT public="1" get="inline" set="null" line="582" static="1"><x path="Int"/></RENDERBUFFER_INTERNAL_FORMAT>
		<RENDERBUFFER_RED_SIZE public="1" get="inline" set="null" line="583" static="1"><x path="Int"/></RENDERBUFFER_RED_SIZE>
		<RENDERBUFFER_GREEN_SIZE public="1" get="inline" set="null" line="584" static="1"><x path="Int"/></RENDERBUFFER_GREEN_SIZE>
		<RENDERBUFFER_BLUE_SIZE public="1" get="inline" set="null" line="585" static="1"><x path="Int"/></RENDERBUFFER_BLUE_SIZE>
		<RENDERBUFFER_ALPHA_SIZE public="1" get="inline" set="null" line="586" static="1"><x path="Int"/></RENDERBUFFER_ALPHA_SIZE>
		<RENDERBUFFER_DEPTH_SIZE public="1" get="inline" set="null" line="587" static="1"><x path="Int"/></RENDERBUFFER_DEPTH_SIZE>
		<RENDERBUFFER_STENCIL_SIZE public="1" get="inline" set="null" line="588" static="1"><x path="Int"/></RENDERBUFFER_STENCIL_SIZE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE public="1" get="inline" set="null" line="590" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_NAME public="1" get="inline" set="null" line="591" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_OBJECT_NAME>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL public="1" get="inline" set="null" line="592" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE public="1" get="inline" set="null" line="593" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE>
		<COLOR_ATTACHMENT0 public="1" get="inline" set="null" line="595" static="1"><x path="Int"/></COLOR_ATTACHMENT0>
		<DEPTH_ATTACHMENT public="1" get="inline" set="null" line="596" static="1"><x path="Int"/></DEPTH_ATTACHMENT>
		<STENCIL_ATTACHMENT public="1" get="inline" set="null" line="597" static="1"><x path="Int"/></STENCIL_ATTACHMENT>
		<DEPTH_STENCIL_ATTACHMENT public="1" get="inline" set="null" line="598" static="1"><x path="Int"/></DEPTH_STENCIL_ATTACHMENT>
		<NONE public="1" get="inline" set="null" line="600" static="1"><x path="Int"/></NONE>
		<FRAMEBUFFER_COMPLETE public="1" get="inline" set="null" line="602" static="1"><x path="Int"/></FRAMEBUFFER_COMPLETE>
		<FRAMEBUFFER_INCOMPLETE_ATTACHMENT public="1" get="inline" set="null" line="603" static="1"><x path="Int"/></FRAMEBUFFER_INCOMPLETE_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT public="1" get="inline" set="null" line="604" static="1"><x path="Int"/></FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_DIMENSIONS public="1" get="inline" set="null" line="605" static="1"><x path="Int"/></FRAMEBUFFER_INCOMPLETE_DIMENSIONS>
		<FRAMEBUFFER_UNSUPPORTED public="1" get="inline" set="null" line="606" static="1"><x path="Int"/></FRAMEBUFFER_UNSUPPORTED>
		<FRAMEBUFFER_BINDING public="1" get="inline" set="null" line="608" static="1"><x path="Int"/></FRAMEBUFFER_BINDING>
		<RENDERBUFFER_BINDING public="1" get="inline" set="null" line="609" static="1"><x path="Int"/></RENDERBUFFER_BINDING>
		<MAX_RENDERBUFFER_SIZE public="1" get="inline" set="null" line="610" static="1"><x path="Int"/></MAX_RENDERBUFFER_SIZE>
		<INVALID_FRAMEBUFFER_OPERATION public="1" get="inline" set="null" line="612" static="1"><x path="Int"/></INVALID_FRAMEBUFFER_OPERATION>
		<UNPACK_FLIP_Y_WEBGL public="1" get="inline" set="null" line="615" static="1"><x path="Int"/></UNPACK_FLIP_Y_WEBGL>
		<UNPACK_PREMULTIPLY_ALPHA_WEBGL public="1" get="inline" set="null" line="616" static="1"><x path="Int"/></UNPACK_PREMULTIPLY_ALPHA_WEBGL>
		<CONTEXT_LOST_WEBGL public="1" get="inline" set="null" line="617" static="1"><x path="Int"/></CONTEXT_LOST_WEBGL>
		<UNPACK_COLORSPACE_CONVERSION_WEBGL public="1" get="inline" set="null" line="618" static="1"><x path="Int"/></UNPACK_COLORSPACE_CONVERSION_WEBGL>
		<BROWSER_DEFAULT_WEBGL public="1" get="inline" set="null" line="619" static="1"><x path="Int"/></BROWSER_DEFAULT_WEBGL>
		<versionString public="1" set="method" line="621" static="1"><f a=""><c path="String"/></f></versionString>
		<activeTexture public="1" set="method" line="625" static="1"><f a="texture">
	<x path="Int"/>
	<x path="Void"/>
</f></activeTexture>
		<attachShader public="1" set="method" line="630" static="1"><f a="program:shader">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<c path="snow.platform.native.render.opengl.GLShader"/>
	<x path="Void"/>
</f></attachShader>
		<bindAttribLocation public="1" set="method" line="636" static="1"><f a="program:index:name">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></bindAttribLocation>
		<bindBuffer public="1" set="method" line="641" static="1"><f a="target:buffer">
	<x path="Int"/>
	<c path="snow.platform.native.render.opengl.GLBuffer"/>
	<x path="Void"/>
</f></bindBuffer>
		<bindFramebuffer public="1" set="method" line="646" static="1"><f a="target:framebuffer">
	<x path="Int"/>
	<x path="snow.platform.native.render.opengl.GLFramebuffer"/>
	<x path="Void"/>
</f></bindFramebuffer>
		<bindRenderbuffer public="1" set="method" line="651" static="1"><f a="target:renderbuffer">
	<x path="Int"/>
	<x path="snow.platform.native.render.opengl.GLRenderbuffer"/>
	<x path="Void"/>
</f></bindRenderbuffer>
		<bindTexture public="1" set="method" line="656" static="1"><f a="target:texture">
	<x path="Int"/>
	<c path="snow.platform.native.render.opengl.GLTexture"/>
	<x path="Void"/>
</f></bindTexture>
		<blendColor public="1" set="method" line="661" static="1"><f a="red:green:blue:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></blendColor>
		<blendEquation public="1" set="method" line="666" static="1"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquation>
		<blendEquationSeparate public="1" set="method" line="671" static="1"><f a="modeRGB:modeAlpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquationSeparate>
		<blendFunc public="1" set="method" line="676" static="1"><f a="sfactor:dfactor">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFunc>
		<blendFuncSeparate public="1" set="method" line="681" static="1"><f a="srcRGB:dstRGB:srcAlpha:dstAlpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFuncSeparate>
		<bufferData public="1" set="method" line="686" static="1"><f a="target:data:usage">
	<x path="Int"/>
	<c path="snow.utils.IMemoryRange"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bufferData>
		<bufferSubData public="1" set="method" line="691" static="1"><f a="target:offset:data">
	<x path="Int"/>
	<x path="Int"/>
	<c path="snow.utils.IMemoryRange"/>
	<x path="Void"/>
</f></bufferSubData>
		<checkFramebufferStatus public="1" set="method" line="696" static="1"><f a="target">
	<x path="Int"/>
	<x path="Int"/>
</f></checkFramebufferStatus>
		<clear public="1" set="method" line="701" static="1"><f a="mask">
	<x path="Int"/>
	<x path="Void"/>
</f></clear>
		<clearColor public="1" set="method" line="706" static="1"><f a="red:green:blue:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></clearColor>
		<clearDepth public="1" set="method" line="711" static="1"><f a="depth">
	<x path="Float"/>
	<x path="Void"/>
</f></clearDepth>
		<clearStencil public="1" set="method" line="716" static="1"><f a="s">
	<x path="Int"/>
	<x path="Void"/>
</f></clearStencil>
		<colorMask public="1" set="method" line="721" static="1"><f a="red:green:blue:alpha">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></colorMask>
		<compileShader public="1" set="method" line="726" static="1"><f a="shader">
	<c path="snow.platform.native.render.opengl.GLShader"/>
	<x path="Void"/>
</f></compileShader>
		<compressedTexImage2D public="1" set="method" line="731" static="1"><f a="target:level:internalformat:width:height:border:data">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="snow.utils.IMemoryRange"/>
	<x path="Void"/>
</f></compressedTexImage2D>
		<compressedTexSubImage2D public="1" set="method" line="736" static="1"><f a="target:level:xoffset:yoffset:width:height:format:data">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="snow.utils.IMemoryRange"/>
	<x path="Void"/>
</f></compressedTexSubImage2D>
		<copyTexImage2D public="1" set="method" line="741" static="1"><f a="target:level:internalformat:x:y:width:height:border">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexImage2D>
		<copyTexSubImage2D public="1" set="method" line="746" static="1"><f a="target:level:xoffset:yoffset:x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexSubImage2D>
		<createBuffer public="1" set="method" line="751" static="1"><f a=""><c path="snow.platform.native.render.opengl.GLBuffer"/></f></createBuffer>
		<createFramebuffer public="1" set="method" line="756" static="1"><f a=""><x path="snow.platform.native.render.opengl.GLFramebuffer"/></f></createFramebuffer>
		<createProgram public="1" set="method" line="761" static="1"><f a=""><c path="snow.platform.native.render.opengl.GLProgram"/></f></createProgram>
		<createRenderbuffer public="1" set="method" line="766" static="1"><f a=""><x path="snow.platform.native.render.opengl.GLRenderbuffer"/></f></createRenderbuffer>
		<createShader public="1" set="method" line="771" static="1"><f a="type">
	<x path="Int"/>
	<c path="snow.platform.native.render.opengl.GLShader"/>
</f></createShader>
		<createTexture public="1" set="method" line="776" static="1"><f a=""><c path="snow.platform.native.render.opengl.GLTexture"/></f></createTexture>
		<cullFace public="1" set="method" line="781" static="1"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></cullFace>
		<deleteBuffer public="1" set="method" line="786" static="1"><f a="buffer">
	<c path="snow.platform.native.render.opengl.GLBuffer"/>
	<x path="Void"/>
</f></deleteBuffer>
		<deleteFramebuffer public="1" set="method" line="792" static="1"><f a="framebuffer">
	<x path="snow.platform.native.render.opengl.GLFramebuffer"/>
	<x path="Void"/>
</f></deleteFramebuffer>
		<deleteProgram public="1" set="method" line="798" static="1"><f a="program">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<x path="Void"/>
</f></deleteProgram>
		<deleteRenderbuffer public="1" set="method" line="804" static="1"><f a="renderbuffer">
	<x path="snow.platform.native.render.opengl.GLRenderbuffer"/>
	<x path="Void"/>
</f></deleteRenderbuffer>
		<deleteShader public="1" set="method" line="810" static="1"><f a="shader">
	<c path="snow.platform.native.render.opengl.GLShader"/>
	<x path="Void"/>
</f></deleteShader>
		<deleteTexture public="1" set="method" line="816" static="1"><f a="texture">
	<c path="snow.platform.native.render.opengl.GLTexture"/>
	<x path="Void"/>
</f></deleteTexture>
		<depthFunc public="1" set="method" line="822" static="1"><f a="func">
	<x path="Int"/>
	<x path="Void"/>
</f></depthFunc>
		<depthMask public="1" set="method" line="827" static="1"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></depthMask>
		<depthRange public="1" set="method" line="832" static="1"><f a="zNear:zFar">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></depthRange>
		<detachShader public="1" set="method" line="837" static="1"><f a="program:shader">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<c path="snow.platform.native.render.opengl.GLShader"/>
	<x path="Void"/>
</f></detachShader>
		<disable public="1" set="method" line="842" static="1"><f a="cap">
	<x path="Int"/>
	<x path="Void"/>
</f></disable>
		<disableVertexAttribArray public="1" set="method" line="847" static="1"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></disableVertexAttribArray>
		<drawArrays public="1" set="method" line="852" static="1"><f a="mode:first:count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawArrays>
		<drawElements public="1" set="method" line="857" static="1"><f a="mode:count:type:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawElements>
		<enable public="1" set="method" line="862" static="1"><f a="cap">
	<x path="Int"/>
	<x path="Void"/>
</f></enable>
		<enableVertexAttribArray public="1" set="method" line="867" static="1"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></enableVertexAttribArray>
		<finish public="1" set="method" line="872" static="1"><f a=""><x path="Void"/></f></finish>
		<flush public="1" set="method" line="877" static="1"><f a=""><x path="Void"/></f></flush>
		<framebufferRenderbuffer public="1" set="method" line="882" static="1"><f a="target:attachment:renderbuffertarget:renderbuffer">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="snow.platform.native.render.opengl.GLRenderbuffer"/>
	<x path="Void"/>
</f></framebufferRenderbuffer>
		<framebufferTexture2D public="1" set="method" line="887" static="1"><f a="target:attachment:textarget:texture:level">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="snow.platform.native.render.opengl.GLTexture"/>
	<x path="Int"/>
	<x path="Void"/>
</f></framebufferTexture2D>
		<frontFace public="1" set="method" line="892" static="1"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></frontFace>
		<generateMipmap public="1" set="method" line="897" static="1"><f a="target">
	<x path="Int"/>
	<x path="Void"/>
</f></generateMipmap>
		<getActiveAttrib public="1" set="method" line="902" static="1"><f a="program:index">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<x path="Int"/>
	<t path="snow.platform.native.render.opengl.GLActiveInfo"/>
</f></getActiveAttrib>
		<getActiveUniform public="1" set="method" line="907" static="1"><f a="program:index">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<x path="Int"/>
	<t path="snow.platform.native.render.opengl.GLActiveInfo"/>
</f></getActiveUniform>
		<getAttachedShaders public="1" set="method" line="912" static="1"><f a="program">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<c path="Array"><c path="snow.platform.native.render.opengl.GLShader"/></c>
</f></getAttachedShaders>
		<getAttribLocation public="1" set="method" line="917" static="1"><f a="program:name">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<c path="String"/>
	<x path="Int"/>
</f></getAttribLocation>
		<getBufferParameter public="1" set="method" line="922" static="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getBufferParameter>
		<getContextAttributes public="1" set="method" line="927" static="1"><f a=""><t path="snow.platform.native.render.opengl.GLContextAttributes"/></f></getContextAttributes>
		<getError public="1" set="method" line="934" static="1"><f a=""><x path="Int"/></f></getError>
		<getExtension public="1" set="method" line="939" static="1"><f a="name">
	<c path="String"/>
	<d/>
</f></getExtension>
		<getFramebufferAttachmentParameter public="1" set="method" line="946" static="1"><f a="target:attachment:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getFramebufferAttachmentParameter>
		<getParameter public="1" set="method" line="951" static="1"><f a="pname">
	<x path="Int"/>
	<d/>
</f></getParameter>
		<getProgramInfoLog public="1" set="method" line="956" static="1"><f a="program">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<c path="String"/>
</f></getProgramInfoLog>
		<getProgramParameter public="1" set="method" line="961" static="1"><f a="program:pname">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getProgramParameter>
		<getRenderbufferParameter public="1" set="method" line="966" static="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getRenderbufferParameter>
		<getShaderInfoLog public="1" set="method" line="971" static="1"><f a="shader">
	<c path="snow.platform.native.render.opengl.GLShader"/>
	<c path="String"/>
</f></getShaderInfoLog>
		<getShaderParameter public="1" set="method" line="976" static="1"><f a="shader:pname">
	<c path="snow.platform.native.render.opengl.GLShader"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getShaderParameter>
		<getShaderPrecisionFormat public="1" set="method" line="981" static="1"><f a="shadertype:precisiontype">
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.platform.native.render.opengl.GLShaderPrecisionFormat"/>
</f></getShaderPrecisionFormat>
		<getShaderSource public="1" set="method" line="986" static="1"><f a="shader">
	<c path="snow.platform.native.render.opengl.GLShader"/>
	<c path="String"/>
</f></getShaderSource>
		<getSupportedExtensions public="1" set="method" line="991" static="1"><f a=""><c path="Array"><c path="String"/></c></f></getSupportedExtensions>
		<getTexParameter public="1" set="method" line="998" static="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getTexParameter>
		<getUniform public="1" set="method" line="1003" static="1"><f a="program:location">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<d/>
</f></getUniform>
		<getUniformLocation public="1" set="method" line="1008" static="1"><f a="program:name">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<c path="String"/>
	<d/>
</f></getUniformLocation>
		<getVertexAttrib public="1" set="method" line="1013" static="1"><f a="index:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getVertexAttrib>
		<getVertexAttribOffset public="1" set="method" line="1018" static="1"><f a="index:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getVertexAttribOffset>
		<hint public="1" set="method" line="1023" static="1"><f a="target:mode">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></hint>
		<isBuffer public="1" set="method" line="1028" static="1"><f a="buffer">
	<c path="snow.platform.native.render.opengl.GLBuffer"/>
	<x path="Bool"/>
</f></isBuffer>
		<isEnabled public="1" set="method" line="1035" static="1"><f a="cap">
	<x path="Int"/>
	<x path="Bool"/>
</f></isEnabled>
		<isFramebuffer public="1" set="method" line="1040" static="1"><f a="framebuffer">
	<x path="snow.platform.native.render.opengl.GLFramebuffer"/>
	<x path="Bool"/>
</f></isFramebuffer>
		<isProgram public="1" set="method" line="1045" static="1"><f a="program">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<x path="Bool"/>
</f></isProgram>
		<isRenderbuffer public="1" set="method" line="1050" static="1"><f a="renderbuffer">
	<x path="snow.platform.native.render.opengl.GLRenderbuffer"/>
	<x path="Bool"/>
</f></isRenderbuffer>
		<isShader public="1" set="method" line="1055" static="1"><f a="shader">
	<c path="snow.platform.native.render.opengl.GLShader"/>
	<x path="Bool"/>
</f></isShader>
		<isTexture public="1" set="method" line="1060" static="1"><f a="texture">
	<c path="snow.platform.native.render.opengl.GLTexture"/>
	<x path="Bool"/>
</f></isTexture>
		<lineWidth public="1" set="method" line="1065" static="1"><f a="width">
	<x path="Float"/>
	<x path="Void"/>
</f></lineWidth>
		<linkProgram public="1" set="method" line="1070" static="1"><f a="program">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<x path="Void"/>
</f></linkProgram>
		<load set="method" line="1075" static="1"><f a="inName:inArgCount">
	<c path="String"/>
	<x path="Int"/>
	<d/>
</f></load>
		<pixelStorei public="1" set="method" line="1085" static="1"><f a="pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></pixelStorei>
		<polygonOffset public="1" set="method" line="1090" static="1"><f a="factor:units">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></polygonOffset>
		<readPixels public="1" set="method" line="1095" static="1"><f a="x:y:width:height:format:type:pixels">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.utils.ArrayBufferView"/>
	<x path="Void"/>
</f></readPixels>
		<renderbufferStorage public="1" set="method" line="1100" static="1"><f a="target:internalformat:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></renderbufferStorage>
		<sampleCoverage public="1" set="method" line="1105" static="1"><f a="value:invert">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></sampleCoverage>
		<scissor public="1" set="method" line="1110" static="1"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scissor>
		<shaderSource public="1" set="method" line="1115" static="1"><f a="shader:source">
	<c path="snow.platform.native.render.opengl.GLShader"/>
	<c path="String"/>
	<x path="Void"/>
</f></shaderSource>
		<stencilFunc public="1" set="method" line="1120" static="1"><f a="func:ref:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFunc>
		<stencilFuncSeparate public="1" set="method" line="1125" static="1"><f a="face:func:ref:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFuncSeparate>
		<stencilMask public="1" set="method" line="1130" static="1"><f a="mask">
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMask>
		<stencilMaskSeparate public="1" set="method" line="1135" static="1"><f a="face:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMaskSeparate>
		<stencilOp public="1" set="method" line="1140" static="1"><f a="fail:zfail:zpass">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOp>
		<stencilOpSeparate public="1" set="method" line="1145" static="1"><f a="face:fail:zfail:zpass">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOpSeparate>
		<texImage2D public="1" set="method" line="1150" static="1"><f a="target:level:internalformat:width:height:border:format:type:pixels">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.utils.ArrayBufferView"/>
	<x path="Void"/>
</f></texImage2D>
		<texParameterf public="1" set="method" line="1155" static="1"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></texParameterf>
		<texParameteri public="1" set="method" line="1160" static="1"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texParameteri>
		<texSubImage2D public="1" set="method" line="1165" static="1"><f a="target:level:xoffset:yoffset:width:height:format:type:pixels">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.utils.ArrayBufferView"/>
	<x path="Void"/>
</f></texSubImage2D>
		<uniform1f public="1" set="method" line="1170" static="1"><f a="location:x">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform1f>
		<uniform1fv public="1" set="method" line="1175" static="1"><f a="location:x">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<t path="snow.utils.Float32Array"/>
	<x path="Void"/>
</f></uniform1fv>
		<uniform1i public="1" set="method" line="1180" static="1"><f a="location:x">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1i>
		<uniform1iv public="1" set="method" line="1185" static="1"><f a="location:v">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<t path="snow.utils.Int32Array"/>
	<x path="Void"/>
</f></uniform1iv>
		<uniform2f public="1" set="method" line="1190" static="1"><f a="location:x:y">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform2f>
		<uniform2fv public="1" set="method" line="1195" static="1"><f a="location:v">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<t path="snow.utils.Float32Array"/>
	<x path="Void"/>
</f></uniform2fv>
		<uniform2i public="1" set="method" line="1200" static="1"><f a="location:x:y">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2i>
		<uniform2iv public="1" set="method" line="1205" static="1"><f a="location:v">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<t path="snow.utils.Int32Array"/>
	<x path="Void"/>
</f></uniform2iv>
		<uniform3f public="1" set="method" line="1210" static="1"><f a="location:x:y:z">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform3f>
		<uniform3fv public="1" set="method" line="1215" static="1"><f a="location:v">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<t path="snow.utils.Float32Array"/>
	<x path="Void"/>
</f></uniform3fv>
		<uniform3i public="1" set="method" line="1220" static="1"><f a="location:x:y:z">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3i>
		<uniform3iv public="1" set="method" line="1225" static="1"><f a="location:v">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<t path="snow.utils.Int32Array"/>
	<x path="Void"/>
</f></uniform3iv>
		<uniform4f public="1" set="method" line="1230" static="1"><f a="location:x:y:z:w">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform4f>
		<uniform4fv public="1" set="method" line="1235" static="1"><f a="location:v">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<t path="snow.utils.Float32Array"/>
	<x path="Void"/>
</f></uniform4fv>
		<uniform4i public="1" set="method" line="1240" static="1"><f a="location:x:y:z:w">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4i>
		<uniform4iv public="1" set="method" line="1245" static="1"><f a="location:v">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<t path="snow.utils.Int32Array"/>
	<x path="Void"/>
</f></uniform4iv>
		<uniformMatrix2fv public="1" set="method" line="1250" static="1"><f a="location:transpose:v">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Bool"/>
	<t path="snow.utils.Float32Array"/>
	<x path="Void"/>
</f></uniformMatrix2fv>
		<uniformMatrix3fv public="1" set="method" line="1255" static="1"><f a="location:transpose:v">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Bool"/>
	<t path="snow.utils.Float32Array"/>
	<x path="Void"/>
</f></uniformMatrix3fv>
		<uniformMatrix4fv public="1" set="method" line="1260" static="1"><f a="location:transpose:v">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Bool"/>
	<t path="snow.utils.Float32Array"/>
	<x path="Void"/>
</f></uniformMatrix4fv>
		<useProgram public="1" set="method" line="1265" static="1"><f a="program">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<x path="Void"/>
</f></useProgram>
		<validateProgram public="1" set="method" line="1270" static="1"><f a="program">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<x path="Void"/>
</f></validateProgram>
		<vertexAttrib1f public="1" set="method" line="1275" static="1"><f a="indx:x">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib1f>
		<vertexAttrib1fv public="1" set="method" line="1280" static="1"><f a="indx:values">
	<x path="Int"/>
	<t path="snow.utils.Float32Array"/>
	<x path="Void"/>
</f></vertexAttrib1fv>
		<vertexAttrib2f public="1" set="method" line="1285" static="1"><f a="indx:x:y">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib2f>
		<vertexAttrib2fv public="1" set="method" line="1290" static="1"><f a="indx:values">
	<x path="Int"/>
	<t path="snow.utils.Float32Array"/>
	<x path="Void"/>
</f></vertexAttrib2fv>
		<vertexAttrib3f public="1" set="method" line="1295" static="1"><f a="indx:x:y:z">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib3f>
		<vertexAttrib3fv public="1" set="method" line="1300" static="1"><f a="indx:values">
	<x path="Int"/>
	<t path="snow.utils.Float32Array"/>
	<x path="Void"/>
</f></vertexAttrib3fv>
		<vertexAttrib4f public="1" set="method" line="1305" static="1"><f a="indx:x:y:z:w">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib4f>
		<vertexAttrib4fv public="1" set="method" line="1310" static="1"><f a="indx:values">
	<x path="Int"/>
	<t path="snow.utils.Float32Array"/>
	<x path="Void"/>
</f></vertexAttrib4fv>
		<vertexAttribPointer public="1" set="method" line="1315" static="1"><f a="indx:size:type:normalized:stride:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribPointer>
		<viewport public="1" set="method" line="1320" static="1"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></viewport>
		<get_version set="method" line="1333" static="1"><f a=""><x path="Int"/></f></get_version>
		<snow_gl_active_texture line="1343" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_active_texture>
		<snow_gl_attach_shader line="1344" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_attach_shader>
		<snow_gl_bind_attrib_location line="1345" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<unknown/>
</f></snow_gl_bind_attrib_location>
		<snow_gl_bind_buffer line="1346" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_bind_buffer>
		<snow_gl_bind_framebuffer line="1347" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_bind_framebuffer>
		<snow_gl_bind_renderbuffer line="1348" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_bind_renderbuffer>
		<snow_gl_bind_texture line="1349" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_bind_texture>
		<snow_gl_blend_color line="1350" static="1"><f a=":::">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_blend_color>
		<snow_gl_blend_equation line="1351" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_blend_equation>
		<snow_gl_blend_equation_separate line="1352" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_blend_equation_separate>
		<snow_gl_blend_func line="1353" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_blend_func>
		<snow_gl_blend_func_separate line="1354" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_blend_func_separate>
		<snow_gl_buffer_data line="1355" static="1"><f a="::::">
	<x path="Int"/>
	<t path="snow.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_buffer_data>
		<snow_gl_buffer_sub_data line="1356" static="1"><f a="::::">
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_buffer_sub_data>
		<snow_gl_check_framebuffer_status line="1357" static="1"><f a="">
	<x path="Int"/>
	<x path="Int"/>
</f></snow_gl_check_framebuffer_status>
		<snow_gl_clear line="1358" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_clear>
		<snow_gl_clear_color line="1359" static="1"><f a=":::">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_clear_color>
		<snow_gl_clear_depth line="1360" static="1"><f a="">
	<x path="Float"/>
	<unknown/>
</f></snow_gl_clear_depth>
		<snow_gl_clear_stencil line="1361" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_clear_stencil>
		<snow_gl_color_mask line="1362" static="1"><f a=":::">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<unknown/>
</f></snow_gl_color_mask>
		<snow_gl_compile_shader line="1363" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_compile_shader>
		<snow_gl_compressed_tex_image_2d line="1364" static="1"><f a=":::::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="Null"><c path="snow.platform.native.utils.ByteArray"/></t>
	<t path="Null"><x path="Int"/></t>
	<unknown/>
</f></snow_gl_compressed_tex_image_2d>
		<snow_gl_compressed_tex_sub_image_2d line="1365" static="1"><f a="::::::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="Null"><c path="snow.platform.native.utils.ByteArray"/></t>
	<t path="Null"><x path="Int"/></t>
	<unknown/>
</f></snow_gl_compressed_tex_sub_image_2d>
		<snow_gl_copy_tex_image_2d line="1366" static="1"><f a=":::::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_copy_tex_image_2d>
		<snow_gl_copy_tex_sub_image_2d line="1367" static="1"><f a=":::::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_copy_tex_sub_image_2d>
		<snow_gl_create_buffer line="1368" static="1"><f a=""><x path="Int"/></f></snow_gl_create_buffer>
		<snow_gl_create_framebuffer line="1369" static="1"><f a=""><x path="Int"/></f></snow_gl_create_framebuffer>
		<snow_gl_create_program line="1370" static="1"><f a=""><x path="Int"/></f></snow_gl_create_program>
		<snow_gl_create_render_buffer line="1371" static="1"><f a=""><x path="Int"/></f></snow_gl_create_render_buffer>
		<snow_gl_create_shader line="1372" static="1"><f a="">
	<x path="Int"/>
	<x path="Int"/>
</f></snow_gl_create_shader>
		<snow_gl_create_texture line="1373" static="1"><f a=""><x path="Int"/></f></snow_gl_create_texture>
		<snow_gl_cull_face line="1374" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_cull_face>
		<snow_gl_delete_buffer line="1375" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_delete_buffer>
		<snow_gl_delete_framebuffer line="1376" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_delete_framebuffer>
		<snow_gl_delete_program line="1377" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_delete_program>
		<snow_gl_delete_render_buffer line="1378" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_delete_render_buffer>
		<snow_gl_delete_shader line="1379" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_delete_shader>
		<snow_gl_delete_texture line="1380" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_delete_texture>
		<snow_gl_depth_func line="1381" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_depth_func>
		<snow_gl_depth_mask line="1382" static="1"><f a="">
	<x path="Bool"/>
	<unknown/>
</f></snow_gl_depth_mask>
		<snow_gl_depth_range line="1383" static="1"><f a=":">
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_depth_range>
		<snow_gl_detach_shader line="1384" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_detach_shader>
		<snow_gl_disable line="1385" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_disable>
		<snow_gl_disable_vertex_attrib_array line="1386" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_disable_vertex_attrib_array>
		<snow_gl_draw_arrays line="1387" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_draw_arrays>
		<snow_gl_draw_elements line="1388" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_draw_elements>
		<snow_gl_enable line="1389" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_enable>
		<snow_gl_enable_vertex_attrib_array line="1390" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_enable_vertex_attrib_array>
		<snow_gl_finish line="1391" static="1"><f a=""><unknown/></f></snow_gl_finish>
		<snow_gl_flush line="1392" static="1"><f a=""><unknown/></f></snow_gl_flush>
		<snow_gl_framebuffer_renderbuffer line="1393" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_framebuffer_renderbuffer>
		<snow_gl_framebuffer_texture2D line="1394" static="1"><f a="::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_framebuffer_texture2D>
		<snow_gl_front_face line="1395" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_front_face>
		<snow_gl_generate_mipmap line="1396" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_generate_mipmap>
		<snow_gl_get_active_attrib line="1397" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.platform.native.render.opengl.GLActiveInfo"/>
</f></snow_gl_get_active_attrib>
		<snow_gl_get_active_uniform line="1398" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.platform.native.render.opengl.GLActiveInfo"/>
</f></snow_gl_get_active_uniform>
		<snow_gl_get_attrib_location line="1399" static="1"><f a=":">
	<x path="Int"/>
	<c path="String"/>
	<x path="Int"/>
</f></snow_gl_get_attrib_location>
		<snow_gl_get_buffer_paramerter line="1400" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_get_buffer_paramerter>
		<snow_gl_get_context_attributes line="1401" static="1"><f a=""><t path="snow.platform.native.render.opengl.GLContextAttributes"/></f></snow_gl_get_context_attributes>
		<snow_gl_get_error line="1402" static="1"><f a=""><x path="Int"/></f></snow_gl_get_error>
		<snow_gl_get_framebuffer_attachment_parameter line="1403" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_get_framebuffer_attachment_parameter>
		<snow_gl_get_parameter line="1404" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_get_parameter>
		<snow_gl_get_program_info_log line="1406" static="1"><f a="">
	<x path="Int"/>
	<c path="String"/>
</f></snow_gl_get_program_info_log>
		<snow_gl_get_program_parameter line="1407" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></snow_gl_get_program_parameter>
		<snow_gl_get_render_buffer_parameter line="1408" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_get_render_buffer_parameter>
		<snow_gl_get_shader_info_log line="1409" static="1"><f a="">
	<x path="Int"/>
	<c path="String"/>
</f></snow_gl_get_shader_info_log>
		<snow_gl_get_shader_parameter line="1410" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></snow_gl_get_shader_parameter>
		<snow_gl_get_shader_precision_format line="1411" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.platform.native.render.opengl.GLShaderPrecisionFormat"/>
</f></snow_gl_get_shader_precision_format>
		<snow_gl_get_shader_source line="1412" static="1"><f a="">
	<x path="Int"/>
	<c path="String"/>
</f></snow_gl_get_shader_source>
		<snow_gl_get_supported_extensions line="1413" static="1"><f a="">
	<c path="Array"><c path="String"/></c>
	<unknown/>
</f></snow_gl_get_supported_extensions>
		<snow_gl_get_tex_parameter line="1414" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_get_tex_parameter>
		<snow_gl_get_uniform line="1415" static="1"><f a=":">
	<x path="Int"/>
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<unknown/>
</f></snow_gl_get_uniform>
		<snow_gl_get_uniform_location line="1416" static="1"><f a=":">
	<x path="Int"/>
	<c path="String"/>
	<unknown/>
</f></snow_gl_get_uniform_location>
		<snow_gl_get_vertex_attrib line="1417" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_get_vertex_attrib>
		<snow_gl_get_vertex_attrib_offset line="1418" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></snow_gl_get_vertex_attrib_offset>
		<snow_gl_hint line="1419" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_hint>
		<snow_gl_is_buffer line="1420" static="1"><f a="">
	<x path="Int"/>
	<x path="Bool"/>
</f></snow_gl_is_buffer>
		<snow_gl_is_enabled line="1421" static="1"><f a="">
	<x path="Int"/>
	<x path="Bool"/>
</f></snow_gl_is_enabled>
		<snow_gl_is_framebuffer line="1422" static="1"><f a="">
	<x path="Int"/>
	<x path="Bool"/>
</f></snow_gl_is_framebuffer>
		<snow_gl_is_program line="1423" static="1"><f a="">
	<x path="Int"/>
	<x path="Bool"/>
</f></snow_gl_is_program>
		<snow_gl_is_renderbuffer line="1424" static="1"><f a="">
	<x path="Int"/>
	<x path="Bool"/>
</f></snow_gl_is_renderbuffer>
		<snow_gl_is_shader line="1425" static="1"><f a="">
	<x path="Int"/>
	<x path="Bool"/>
</f></snow_gl_is_shader>
		<snow_gl_is_texture line="1426" static="1"><f a="">
	<x path="Int"/>
	<x path="Bool"/>
</f></snow_gl_is_texture>
		<snow_gl_line_width line="1427" static="1"><f a="">
	<x path="Float"/>
	<unknown/>
</f></snow_gl_line_width>
		<snow_gl_link_program line="1428" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_link_program>
		<snow_gl_pixel_storei line="1429" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_pixel_storei>
		<snow_gl_polygon_offset line="1430" static="1"><f a=":">
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_polygon_offset>
		<snow_gl_read_pixels line="1431" static="1"><f a=":::::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="Null"><c path="snow.platform.native.utils.ByteArray"/></t>
	<t path="Null"><x path="Int"/></t>
	<unknown/>
</f></snow_gl_read_pixels>
		<snow_gl_renderbuffer_storage line="1432" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_renderbuffer_storage>
		<snow_gl_sample_coverage line="1433" static="1"><f a=":">
	<x path="Float"/>
	<x path="Bool"/>
	<unknown/>
</f></snow_gl_sample_coverage>
		<snow_gl_scissor line="1434" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_scissor>
		<snow_gl_shader_source line="1435" static="1"><f a=":">
	<x path="Int"/>
	<c path="String"/>
	<unknown/>
</f></snow_gl_shader_source>
		<snow_gl_stencil_func line="1436" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_stencil_func>
		<snow_gl_stencil_func_separate line="1437" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_stencil_func_separate>
		<snow_gl_stencil_mask line="1438" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_stencil_mask>
		<snow_gl_stencil_mask_separate line="1439" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_stencil_mask_separate>
		<snow_gl_stencil_op line="1440" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_stencil_op>
		<snow_gl_stencil_op_separate line="1441" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_stencil_op_separate>
		<snow_gl_tex_image_2d line="1442" static="1"><f a=":::::::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="Null"><c path="snow.platform.native.utils.ByteArray"/></t>
	<t path="Null"><x path="Int"/></t>
	<unknown/>
</f></snow_gl_tex_image_2d>
		<snow_gl_tex_parameterf line="1443" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_tex_parameterf>
		<snow_gl_tex_parameteri line="1444" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_tex_parameteri>
		<snow_gl_tex_sub_image_2d line="1445" static="1"><f a=":::::::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="Null"><c path="snow.platform.native.utils.ByteArray"/></t>
	<t path="Null"><x path="Int"/></t>
	<unknown/>
</f></snow_gl_tex_sub_image_2d>
		<snow_gl_uniform1f line="1446" static="1"><f a=":">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_uniform1f>
		<snow_gl_uniform1fv line="1447" static="1"><f a=":">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_gl_uniform1fv>
		<snow_gl_uniform1i line="1448" static="1"><f a=":">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_uniform1i>
		<snow_gl_uniform1iv line="1449" static="1"><f a=":">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_gl_uniform1iv>
		<snow_gl_uniform2f line="1450" static="1"><f a="::">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_uniform2f>
		<snow_gl_uniform2fv line="1451" static="1"><f a=":">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_gl_uniform2fv>
		<snow_gl_uniform2i line="1452" static="1"><f a="::">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_uniform2i>
		<snow_gl_uniform2iv line="1453" static="1"><f a=":">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_gl_uniform2iv>
		<snow_gl_uniform3f line="1454" static="1"><f a=":::">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_uniform3f>
		<snow_gl_uniform3fv line="1455" static="1"><f a=":">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_gl_uniform3fv>
		<snow_gl_uniform3i line="1456" static="1"><f a=":::">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_uniform3i>
		<snow_gl_uniform3iv line="1457" static="1"><f a=":">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_gl_uniform3iv>
		<snow_gl_uniform4f line="1458" static="1"><f a="::::">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_uniform4f>
		<snow_gl_uniform4fv line="1459" static="1"><f a=":">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_gl_uniform4fv>
		<snow_gl_uniform4i line="1460" static="1"><f a="::::">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_uniform4i>
		<snow_gl_uniform4iv line="1461" static="1"><f a=":">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_gl_uniform4iv>
		<snow_gl_uniform_matrix line="1462" static="1"><f a=":::">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Bool"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_uniform_matrix>
		<snow_gl_use_program line="1463" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_use_program>
		<snow_gl_validate_program line="1464" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_validate_program>
		<snow_gl_version line="1465" static="1"><f a=""><c path="String"/></f></snow_gl_version>
		<snow_gl_vertex_attrib1f line="1466" static="1"><f a=":">
	<x path="Int"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_vertex_attrib1f>
		<snow_gl_vertex_attrib1fv line="1467" static="1"><f a=":">
	<x path="Int"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_gl_vertex_attrib1fv>
		<snow_gl_vertex_attrib2f line="1468" static="1"><f a="::">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_vertex_attrib2f>
		<snow_gl_vertex_attrib2fv line="1469" static="1"><f a=":">
	<x path="Int"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_gl_vertex_attrib2fv>
		<snow_gl_vertex_attrib3f line="1470" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_vertex_attrib3f>
		<snow_gl_vertex_attrib3fv line="1471" static="1"><f a=":">
	<x path="Int"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_gl_vertex_attrib3fv>
		<snow_gl_vertex_attrib4f line="1472" static="1"><f a="::::">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_vertex_attrib4f>
		<snow_gl_vertex_attrib4fv line="1473" static="1"><f a=":">
	<x path="Int"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_gl_vertex_attrib4fv>
		<snow_gl_vertex_attrib_pointer line="1474" static="1"><f a=":::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_vertex_attrib_pointer>
		<snow_gl_viewport line="1475" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_viewport>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="snow.platform.native.utils.ArrayBuffer" params="" file="/Users/sven/dev/snow/snow/platform/native/utils/ArrayBuffer.hx"><c path="snow.platform.native.utils.ByteArray"/></typedef>
	<class path="snow.utils.IMemoryRange" params="" file="/Users/sven/dev/snow/snow/utils/IMemoryRange.hx" interface="1">
		<getByteBuffer public="1" set="method"><f a=""><t path="snow.utils.ByteArray"/></f></getByteBuffer>
		<getStart public="1" set="method"><f a=""><x path="Int"/></f></getStart>
		<getLength public="1" set="method"><f a=""><x path="Int"/></f></getLength>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.platform.native.utils.ArrayBufferView" params="" file="/Users/sven/dev/snow/snow/platform/native/utils/ArrayBufferView.hx">
		<implements path="snow.utils.IMemoryRange"/>
		<buffer public="1" set="null"><c path="snow.platform.native.utils.ByteArray"/></buffer>
		<byteOffset public="1" set="null"><x path="Int"/></byteOffset>
		<byteLength public="1" set="null"><x path="Int"/></byteLength>
		<bytes><t path="haxe.io.BytesData"/></bytes>
		<getByteBuffer public="1" set="method" line="67"><f a=""><c path="snow.platform.native.utils.ByteArray"/></f></getByteBuffer>
		<getLength public="1" set="method" line="73"><f a=""><x path="Int"/></f></getLength>
		<getStart public="1" set="method" line="79"><f a=""><x path="Int"/></f></getStart>
		<getInt8 public="1" get="inline" set="null" line="85"><f a="position">
	<x path="Int"/>
	<x path="Int"/>
</f></getInt8>
		<setInt8 public="1" get="inline" set="null" line="96"><f a="position:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt8>
		<getUInt8 public="1" get="inline" set="null" line="107"><f a="position">
	<x path="Int"/>
	<x path="Int"/>
</f></getUInt8>
		<setUInt8 public="1" get="inline" set="null" line="118"><f a="position:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setUInt8>
		<getInt16 public="1" get="inline" set="null" line="129"><f a="position">
	<x path="Int"/>
	<x path="Int"/>
</f></getInt16>
		<setInt16 public="1" get="inline" set="null" line="140"><f a="position:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt16>
		<getUInt16 public="1" get="inline" set="null" line="151"><f a="position">
	<x path="Int"/>
	<x path="Int"/>
</f></getUInt16>
		<setUInt16 public="1" get="inline" set="null" line="162"><f a="position:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setUInt16>
		<getInt32 public="1" get="inline" set="null" line="173"><f a="position">
	<x path="Int"/>
	<x path="Int"/>
</f></getInt32>
		<setInt32 public="1" get="inline" set="null" line="184"><f a="position:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt32>
		<getUInt32 public="1" get="inline" set="null" line="195"><f a="position">
	<x path="Int"/>
	<x path="Int"/>
</f></getUInt32>
		<setUInt32 public="1" get="inline" set="null" line="206"><f a="position:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setUInt32>
		<getFloat32 public="1" get="inline" set="null" line="217"><f a="position">
	<x path="Int"/>
	<x path="Float"/>
</f></getFloat32>
		<setFloat32 public="1" get="inline" set="null" line="228"><f a="position:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setFloat32>
		<new set="method" line="21"><f a="lengthOrBuffer:?byteOffset:?length" v=":0:null">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.utils.IDataInput" params="" file="/Users/sven/dev/snow/snow/utils/IDataInput.hx" interface="1">
		<bytesAvailable public="1" get="accessor" set="null"><x path="Int"/></bytesAvailable>
		<endian public="1" get="accessor" set="accessor"><c path="String"/></endian>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method"><f a="outData:?inOffset:?inLen">
	<t path="snow.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readBytes>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readUnsignedByte public="1" set="method"><f a=""><x path="Int"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><x path="Int"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><x path="Int"/></f></readUnsignedShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="inLen">
	<x path="Int"/>
	<c path="String"/>
</f></readUTFBytes>
		<get_bytesAvailable set="method"><f a=""><x path="Int"/></f></get_bytesAvailable>
		<get_endian set="method"><f a=""><c path="String"/></f></get_endian>
		<set_endian set="method"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></set_endian>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.platform.native.utils.ByteArray" params="" file="/Users/sven/dev/snow/snow/platform/native/utils/ByteArray.hx">
		<extends path="haxe.io.Bytes"/>
		<implements path="snow.utils.IMemoryRange"/>
		<implements path="snow.utils.IDataInput"/>
		<fromBytes public="1" set="method" line="206" static="1"><f a="inBytes">
	<c path="haxe.io.Bytes"/>
	<c path="snow.platform.native.utils.ByteArray"/>
</f></fromBytes>
		<readFile public="1" set="method" line="620" static="1"><f a="inString:?async:?onload" v=":false:null">
	<c path="String"/>
	<x path="Bool"/>
	<f a="">
		<c path="snow.platform.native.utils.ByteArray"/>
		<x path="Void"/>
	</f>
	<c path="snow.platform.native.utils.ByteArray"/>
</f></readFile>
		<BIG_ENDIAN public="1" get="inline" set="null" line="725" static="1"><c path="String"/></BIG_ENDIAN>
		<LITTLE_ENDIAN public="1" get="inline" set="null" line="726" static="1"><c path="String"/></LITTLE_ENDIAN>
		<std_double_bytes line="750" static="1"><f a=":">
	<x path="Float"/>
	<x path="Bool"/>
	<t path="haxe.io.BytesData"/>
</f></std_double_bytes>
		<std_double_of_bytes line="751" static="1"><f a=":">
	<t path="haxe.io.BytesData"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></std_double_of_bytes>
		<std_float_bytes line="752" static="1"><f a=":">
	<x path="Float"/>
	<x path="Bool"/>
	<t path="haxe.io.BytesData"/>
</f></std_float_bytes>
		<std_float_of_bytes line="753" static="1"><f a=":">
	<t path="haxe.io.BytesData"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></std_float_of_bytes>
		<snow_lzma_encode line="755" static="1"><f a="">
	<unknown/>
	<t path="haxe.io.BytesData"/>
</f></snow_lzma_encode>
		<snow_lzma_decode line="756" static="1"><f a="">
	<t path="haxe.io.BytesData"/>
	<t path="haxe.io.BytesData"/>
</f></snow_lzma_decode>
		<snow_byte_array_overwrite_file line="760" static="1"><f a=":">
	<c path="String"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_byte_array_overwrite_file>
		<snow_byte_array_read_file line="761" static="1"><f a="">
	<c path="String"/>
	<c path="snow.platform.native.utils.ByteArray"/>
</f></snow_byte_array_read_file>
		<bigEndian public="1"><x path="Bool"/></bigEndian>
		<bytesAvailable public="1" get="accessor" set="null"><x path="Int"/></bytesAvailable>
		<endian public="1" get="accessor" set="accessor"><c path="String"/></endian>
		<position public="1"><x path="Int"/></position>
		<byteLength public="1" get="accessor" set="null"><x path="Int"/></byteLength>
		<__get public="1" get="inline" set="null" line="67">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":keep"/></meta>
		</__get>
		<__set public="1" get="inline" set="null" line="78">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":keep"/></meta>
		</__set>
		<asString public="1" set="method" line="88"><f a=""><c path="String"/></f></asString>
		<checkData public="1" set="method" line="94"><f a="inLength">
	<x path="Int"/>
	<x path="Void"/>
</f></checkData>
		<clear public="1" set="method" line="102"><f a=""><x path="Void"/></f></clear>
		<compress public="1" set="method" line="110"><f a="?algorithm" v="null">
	<e path="snow.platform.native.utils.Compression"/>
	<x path="Void"/>
</f></compress>
		<uncompress public="1" set="method" line="150"><f a="?algorithm" v="null">
	<e path="snow.platform.native.utils.Compression"/>
	<x path="Void"/>
</f></uncompress>
		<deflate public="1" set="method" line="194"><f a=""><x path="Void"/></f></deflate>
		<inflate public="1" set="method" line="200"><f a=""><x path="Void"/></f></inflate>
		<getLength public="1" set="method" line="216"><f a=""><x path="Int"/></f></getLength>
		<getByteBuffer public="1" set="method" line="223"><f a=""><c path="snow.platform.native.utils.ByteArray"/></f></getByteBuffer>
		<getStart public="1" set="method" line="229"><f a=""><x path="Int"/></f></getStart>
		<setLength public="1" set="method" line="236"><f a="inLength">
	<x path="Int"/>
	<x path="Void"/>
</f></setLength>
		<slice public="1" set="method" line="247"><f a="inBegin:?inEnd" v=":null">
	<x path="Int"/>
	<x path="Int"/>
	<c path="snow.platform.native.utils.ByteArray"/>
</f></slice>
		<readBoolean public="1" get="inline" set="null" line="291"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" get="inline" set="null" line="297"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="305"><f a="outData:?inOffset:?inLen" v=":0:0">
	<c path="snow.platform.native.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readBytes>
		<readDouble public="1" set="method" line="338"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method" line="356"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method" line="374"><f a=""><x path="Int"/></f></readInt>
		<readMultiByte public="1" get="inline" set="null" line="388"><f a="inLen:charSet">
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readShort public="1" set="method" line="395"><f a=""><x path="Int"/></f></readShort>
		<readUnsignedByte public="1" get="inline" set="null" line="411"><f a=""><x path="Int"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method" line="417"><f a=""><x path="Int"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method" line="431"><f a=""><x path="Int"/></f></readUnsignedShort>
		<readUTF public="1" set="method" line="443"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method" line="451"><f a="inLen">
	<x path="Int"/>
	<c path="String"/>
</f></readUTFBytes>
		<write_uncheck get="inline" set="null" line="479"><f a="inByte">
	<x path="Int"/>
	<x path="Void"/>
</f></write_uncheck>
		<writeBoolean public="1" set="method" line="489"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte public="1" get="inline" set="null" line="495"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="507"><f a="bytes:?inOffset:?inLength" v=":0:0">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeBytes>
		<writeDouble public="1" set="method" line="522"><f a="x">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method" line="534"><f a="x">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method" line="546"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeShort public="1" set="method" line="570"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeUnsignedInt public="1" set="method" line="584"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeUnsignedInt>
		<writeUTF public="1" set="method" line="590"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method" line="603"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeFile public="1" set="method" line="632"><f a="inString">
	<c path="String"/>
	<x path="Void"/>
</f></writeFile>
		<ensureElem set="method" line="678"><f a="inSize:inUpdateLength">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></ensureElem>
		<internal_from_bytes get="inline" set="null" line="705"><f a="inBytes">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></internal_from_bytes>
		<ThrowEOFi set="method" line="717"><f a=""><x path="Int"/></f></ThrowEOFi>
		<get_bytesAvailable set="method" line="729"><f a=""><x path="Int"/></f></get_bytesAvailable>
		<get_byteLength set="method" line="733"><f a=""><x path="Int"/></f></get_byteLength>
		<get_endian set="method" line="737"><f a=""><c path="String"/></f></get_endian>
		<set_endian set="method" line="741"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></set_endian>
		<new public="1" set="method" line="37"><f a="?inSize" v="0">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<enum path="snow.platform.native.utils.Compression" params="" file="/Users/sven/dev/snow/snow/platform/native/utils/ByteArray.hx" module="snow.platform.native.utils.ByteArray">
		<DEFLATE/>
		<ZLIB/>
		<LZMA/>
		<GZIP/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="snow.platform.native.utils.Float32Array" params="" file="/Users/sven/dev/snow/snow/platform/native/utils/Float32Array.hx">
		<extends path="snow.platform.native.utils.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" set="null"><x path="Int"/></BYTES_PER_ELEMENT>
		<length public="1" set="null"><x path="Int"/></length>
		<set public="1" set="method" line="76"><f a="bufferOrArray:?offset" v=":0">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<subarray public="1" set="method" line="102"><f a="start:?end" v=":null">
	<x path="Int"/>
	<x path="Int"/>
	<c path="snow.platform.native.utils.Float32Array"/>
</f></subarray>
		<__get public="1" get="inline" set="null" line="109">
			<f a="index">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="110">
			<f a="index:value">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</__set>
		<new public="1" set="method" line="9"><f a="bufferOrArray:?start:?length" v=":0:null">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.platform.native.utils.Int16Array" params="" file="/Users/sven/dev/snow/snow/platform/native/utils/Int16Array.hx">
		<extends path="snow.platform.native.utils.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" set="null"><x path="Int"/></BYTES_PER_ELEMENT>
		<length public="1" set="null"><x path="Int"/></length>
		<set public="1" set="method" line="76"><f a="bufferOrArray:?offset" v=":0">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<subarray public="1" set="method" line="102"><f a="start:?end" v=":null">
	<x path="Int"/>
	<x path="Int"/>
	<c path="snow.platform.native.utils.Int16Array"/>
</f></subarray>
		<__get public="1" get="inline" set="null" line="109">
			<f a="index">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="110">
			<f a="index:value">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</__set>
		<new public="1" set="method" line="9"><f a="bufferOrArray:?start:?length" v=":0:null">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.platform.native.utils.Int32Array" params="" file="/Users/sven/dev/snow/snow/platform/native/utils/Int32Array.hx">
		<extends path="snow.platform.native.utils.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" set="null"><x path="Int"/></BYTES_PER_ELEMENT>
		<length public="1" set="null"><x path="Int"/></length>
		<set public="1" set="method" line="78"><f a="bufferOrArray:?offset" v=":0">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<subarray public="1" set="method" line="104"><f a="start:?end" v=":null">
	<x path="Int"/>
	<x path="Int"/>
	<c path="snow.platform.native.utils.Int32Array"/>
</f></subarray>
		<__get public="1" get="inline" set="null" line="111">
			<f a="index">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="112">
			<f a="index:value">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</__set>
		<new public="1" set="method" line="11"><f a="bufferOrArray:?start:?length" v=":0:null">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.platform.native.utils.Int8Array" params="" file="/Users/sven/dev/snow/snow/platform/native/utils/Int8Array.hx">
		<extends path="snow.platform.native.utils.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" set="null"><x path="Int"/></BYTES_PER_ELEMENT>
		<length public="1" set="null"><x path="Int"/></length>
		<set public="1" set="method" line="69"><f a="bufferOrArray:?offset" v=":0">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<subarray public="1" set="method" line="95"><f a="start:?end" v=":null">
	<x path="Int"/>
	<x path="Int"/>
	<c path="snow.platform.native.utils.Int8Array"/>
</f></subarray>
		<__get public="1" get="inline" set="null" line="102">
			<f a="index">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="103">
			<f a="index:value">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</__set>
		<new public="1" set="method" line="11"><f a="bufferOrArray:?start:?length" v=":0:null">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.platform.native.utils.UInt16Array" params="" file="/Users/sven/dev/snow/snow/platform/native/utils/UInt16Array.hx">
		<extends path="snow.platform.native.utils.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" set="null"><x path="Int"/></BYTES_PER_ELEMENT>
		<length public="1" set="null"><x path="Int"/></length>
		<set public="1" set="method" line="78"><f a="bufferOrArray:?offset" v=":0">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<subarray public="1" set="method" line="104"><f a="start:?end" v=":null">
	<x path="Int"/>
	<x path="Int"/>
	<c path="snow.platform.native.utils.UInt16Array"/>
</f></subarray>
		<__get public="1" get="inline" set="null" line="111">
			<f a="index">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="112">
			<f a="index:value">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</__set>
		<new public="1" set="method" line="11"><f a="bufferOrArray:?start:?length" v=":0:null">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.platform.native.utils.UInt32Array" params="" file="/Users/sven/dev/snow/snow/platform/native/utils/UInt32Array.hx">
		<extends path="snow.platform.native.utils.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" set="null"><x path="Int"/></BYTES_PER_ELEMENT>
		<length public="1" set="null"><x path="Int"/></length>
		<set public="1" set="method" line="78"><f a="bufferOrArray:?offset" v=":0">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<subarray public="1" set="method" line="104"><f a="start:?end" v=":null">
	<x path="Int"/>
	<x path="Int"/>
	<c path="snow.platform.native.utils.UInt32Array"/>
</f></subarray>
		<__get public="1" get="inline" set="null" line="111">
			<f a="index">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="112">
			<f a="index:value">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</__set>
		<new public="1" set="method" line="11"><f a="bufferOrArray:?start:?length" v=":0:null">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.platform.native.utils.UInt8Array" params="" file="/Users/sven/dev/snow/snow/platform/native/utils/UInt8Array.hx">
		<extends path="snow.platform.native.utils.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" set="null"><x path="Int"/></BYTES_PER_ELEMENT>
		<length public="1" set="null"><x path="Int"/></length>
		<set public="1" set="method" line="69"><f a="bufferOrArray:?offset" v=":0">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<subarray public="1" set="method" line="95"><f a="start:?end" v=":null">
	<x path="Int"/>
	<x path="Int"/>
	<c path="snow.platform.native.utils.UInt8Array"/>
</f></subarray>
		<__get public="1" get="inline" set="null" line="102">
			<f a="index">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="103">
			<f a="index:value">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</__set>
		<new public="1" set="method" line="11"><f a="bufferOrArray:?start:?length" v=":0:null">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.platform.native.utils.UInt8ClampedArray" params="" file="/Users/sven/dev/snow/snow/platform/native/utils/UInt8ClampedArray.hx">
		<extends path="snow.platform.native.utils.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" set="null"><x path="Int"/></BYTES_PER_ELEMENT>
		<length public="1" set="null"><x path="Int"/></length>
		<_clamp get="inline" set="null" line="75"><f a="_in">
	<x path="Int"/>
	<x path="Int"/>
</f></_clamp>
		<set public="1" set="method" line="82"><f a="bufferOrArray:?offset" v=":0">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<subarray public="1" set="method" line="108"><f a="start:?end" v=":null">
	<x path="Int"/>
	<x path="Int"/>
	<c path="snow.platform.native.utils.UInt8ClampedArray"/>
</f></subarray>
		<__get public="1" get="inline" set="null" line="115">
			<f a="index">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="116">
			<f a="index:value">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</__set>
		<new public="1" set="method" line="15"><f a="bufferOrArray:?start:?length" v=":0:null">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Note that this class is included for completeness and perhaps doesn't yield
        the performance benefits one might assume by the smaller size. The difference between UInt8Array and
        Uint8Clamped array is simply that a clamp is applied to any value added into the array,
        such that the values never go below 0 and above 255.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.window.WindowSystemBinding" params="" file="/Users/sven/dev/snow/snow/window/WindowSystem.hx" module="snow.window.WindowSystem">
		<implements path="snow.utils.AbstractClass"/>
		<manager public="1"><c path="snow.window.Windowing"/></manager>
		<lib public="1"><c path="snow.Snow"/></lib>
		<init public="1" set="method" line="35">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the window manager initializes this system</haxe_doc>
		</init>
		<process public="1" set="method" line="37">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the window manager updates this system</haxe_doc>
		</process>
		<destroy public="1" set="method" line="39">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the window manager destroys this system</haxe_doc>
		</destroy>
		<listen public="1" set="method" line="41">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called to set up any listeners on the given window</haxe_doc>
		</listen>
		<unlisten public="1" set="method" line="43">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called to remove any listeners on the given window</haxe_doc>
		</unlisten>
		<create public="1" set="method" line="47">
			<f a="config:on_created">
				<t path="snow.types.WindowConfig"/>
				<f a="::">
					<t path="snow.types.WindowHandle"/>
					<x path="Int"/>
					<t path="snow.types.WindowConfig"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a window with config, calls on_created when complete passing the handle, the ID,
            and the actual config that was used since the requested config could fail</haxe_doc>
		</create>
		<close public="1" set="method" line="49">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Close a given window</haxe_doc>
		</close>
		<show public="1" set="method" line="51">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<haxe_doc>reopen this window once closed. Destroyed windows cannot be reopened, it must use create again</haxe_doc>
		</show>
		<destroy_window public="1" set="method" line="53">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Close a given window</haxe_doc>
		</destroy_window>
		<update public="1" set="method" line="55">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Update a given window</haxe_doc>
		</update>
		<render public="1" set="method" line="57">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Render a given window</haxe_doc>
		</render>
		<swap public="1" set="method" line="59">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Swap a given window</haxe_doc>
		</swap>
		<simple_message public="1" set="method" line="61">
			<f a="window:message:?title" v="::''">
				<c path="snow.window.Window"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Display a message on a window</haxe_doc>
		</simple_message>
		<set_size public="1" set="method" line="63">
			<f a="window:w:h">
				<c path="snow.window.Window"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the size of a window</haxe_doc>
		</set_size>
		<set_position public="1" set="method" line="65">
			<f a="window:x:y">
				<c path="snow.window.Window"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the position of a window</haxe_doc>
		</set_position>
		<set_title public="1" set="method" line="67">
			<f a="window:title">
				<c path="snow.window.Window"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the title of a window</haxe_doc>
		</set_title>
		<set_max_size public="1" set="method" line="69">
			<f a="window:w:h">
				<c path="snow.window.Window"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the max size of a window</haxe_doc>
		</set_max_size>
		<set_min_size public="1" set="method" line="71">
			<f a="window:w:h">
				<c path="snow.window.Window"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the min size of a window</haxe_doc>
		</set_min_size>
		<fullscreen public="1" set="method" line="73">
			<f a="window:fullscreen:?fullscreen_desktop" v="::true">
				<c path="snow.window.Window"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the fullscreen state of a window</haxe_doc>
		</fullscreen>
		<bordered public="1" set="method" line="75">
			<f a="window:bordered">
				<c path="snow.window.Window"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the bordered state of a window</haxe_doc>
		</bordered>
		<grab public="1" set="method" line="79">
			<f a="window:grabbed">
				<c path="snow.window.Window"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the grab state of a window</haxe_doc>
		</grab>
		<set_cursor_position public="1" set="method" line="81">
			<f a="window:x:y">
				<c path="snow.window.Window"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the cursor position inside of a given window</haxe_doc>
		</set_cursor_position>
		<system_enable_cursor public="1" set="method" line="86">
			<f a="enable">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Toggle the OS cursor. This is not window specific but system wide</haxe_doc>
		</system_enable_cursor>
		<system_lock_cursor public="1" set="method" line="88">
			<f a="enable">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Lock the OS cursor to the foreground window. This hides the cursor and prevents it from leaving, reporting relative coordinates.</haxe_doc>
		</system_lock_cursor>
		<system_enable_vsync public="1" set="method" line="90">
			<f a="enable">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Toggle vertical refresh. This is not window specific but context wide, returns 0 on success or -1 if not supported</haxe_doc>
		</system_enable_vsync>
		<display_count public="1" set="method" line="95">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Get the number of displays present</haxe_doc>
		</display_count>
		<display_mode_count public="1" set="method" line="97">
			<f a="display">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Get the number of display modes present</haxe_doc>
		</display_mode_count>
		<display_native_mode public="1" set="method" line="99">
			<f a="display">
				<x path="Int"/>
				<t path="snow.types.DisplayMode"/>
			</f>
			<haxe_doc>Get the native mode information of the display by index</haxe_doc>
		</display_native_mode>
		<display_current_mode public="1" set="method" line="101">
			<f a="display">
				<x path="Int"/>
				<t path="snow.types.DisplayMode"/>
			</f>
			<haxe_doc>Get the current mode information of the display by index</haxe_doc>
		</display_current_mode>
		<display_mode public="1" set="method" line="103">
			<f a="display:mode_index">
				<x path="Int"/>
				<x path="Int"/>
				<t path="snow.types.DisplayMode"/>
			</f>
			<haxe_doc>Get the information from a specific mode index, the index obtrained from iterating with `display_mode_count` value</haxe_doc>
		</display_mode>
		<display_bounds public="1" set="method" line="105">
			<f a="display">
				<x path="Int"/>
				<a>
					<y><x path="Int"/></y>
					<x><x path="Int"/></x>
					<width><x path="Int"/></width>
					<height><x path="Int"/></height>
				</a>
			</f>
			<haxe_doc>Get the bounds of the display by index</haxe_doc>
		</display_bounds>
		<display_name public="1" set="method" line="107">
			<f a="display">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the name of the display by index, where available</haxe_doc>
		</display_name>
		<haxe_doc>Internal class handled by `Windowing`, a less concrete implementation of the platform window bindings.
    WindowBinding is bound to snow.platform.native.WindowSystem, snow.platform.native.WindowSystem etc</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.platform.native.window.WindowSystem" params="" file="/Users/sven/dev/snow/snow/platform/native/window/WindowSystem.hx">
		<extends path="snow.window.WindowSystemBinding"/>
		<snow_window_create line="161" static="1"><f a=":">
	<t path="snow.types.WindowConfig"/>
	<f a="::">
		<t path="snow.types.WindowHandle"/>
		<x path="Int"/>
		<t path="snow.types.WindowConfig"/>
		<x path="Void"/>
	</f>
	<unknown/>
</f></snow_window_create>
		<snow_window_close line="162" static="1"><f a="">
	<t path="snow.types.WindowHandle"/>
	<unknown/>
</f></snow_window_close>
		<snow_window_show line="163" static="1"><f a="">
	<t path="snow.types.WindowHandle"/>
	<unknown/>
</f></snow_window_show>
		<snow_window_destroy_window line="164" static="1"><f a="">
	<t path="snow.types.WindowHandle"/>
	<unknown/>
</f></snow_window_destroy_window>
		<snow_window_update line="165" static="1"><f a="">
	<t path="snow.types.WindowHandle"/>
	<unknown/>
</f></snow_window_update>
		<snow_window_render line="166" static="1"><f a="">
	<t path="snow.types.WindowHandle"/>
	<unknown/>
</f></snow_window_render>
		<snow_window_swap line="167" static="1"><f a="">
	<t path="snow.types.WindowHandle"/>
	<unknown/>
</f></snow_window_swap>
		<snow_window_simple_message line="168" static="1"><f a="::">
	<t path="snow.types.WindowHandle"/>
	<c path="String"/>
	<c path="String"/>
	<unknown/>
</f></snow_window_simple_message>
		<snow_window_set_size line="169" static="1"><f a="::">
	<t path="snow.types.WindowHandle"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_window_set_size>
		<snow_window_set_position line="170" static="1"><f a="::">
	<t path="snow.types.WindowHandle"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_window_set_position>
		<snow_window_set_title line="171" static="1"><f a=":">
	<t path="snow.types.WindowHandle"/>
	<c path="String"/>
	<unknown/>
</f></snow_window_set_title>
		<snow_window_set_max_size line="172" static="1"><f a="::">
	<t path="snow.types.WindowHandle"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_window_set_max_size>
		<snow_window_set_min_size line="173" static="1"><f a="::">
	<t path="snow.types.WindowHandle"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_window_set_min_size>
		<snow_window_fullscreen line="174" static="1"><f a="::">
	<t path="snow.types.WindowHandle"/>
	<x path="Bool"/>
	<x path="Int"/>
	<unknown/>
</f></snow_window_fullscreen>
		<snow_window_bordered line="175" static="1"><f a=":">
	<t path="snow.types.WindowHandle"/>
	<x path="Bool"/>
	<unknown/>
</f></snow_window_bordered>
		<snow_window_grab line="176" static="1"><f a=":">
	<t path="snow.types.WindowHandle"/>
	<x path="Bool"/>
	<unknown/>
</f></snow_window_grab>
		<snow_window_set_cursor_position line="177" static="1"><f a="::">
	<t path="snow.types.WindowHandle"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_window_set_cursor_position>
		<snow_system_show_cursor line="181" static="1"><f a="">
	<x path="Bool"/>
	<unknown/>
</f></snow_system_show_cursor>
		<snow_system_lock_cursor line="182" static="1"><f a="">
	<x path="Bool"/>
	<unknown/>
</f></snow_system_lock_cursor>
		<snow_system_enable_vsync line="183" static="1"><f a="">
	<x path="Bool"/>
	<x path="Int"/>
</f></snow_system_enable_vsync>
		<snow_desktop_get_display_count line="187" static="1"><f a=""><x path="Int"/></f></snow_desktop_get_display_count>
		<snow_desktop_get_display_mode_count line="188" static="1"><f a="">
	<x path="Int"/>
	<x path="Int"/>
</f></snow_desktop_get_display_mode_count>
		<snow_desktop_get_display_native_mode line="189" static="1"><f a="">
	<x path="Int"/>
	<t path="snow.types.DisplayMode"/>
</f></snow_desktop_get_display_native_mode>
		<snow_desktop_get_display_current_mode line="190" static="1"><f a="">
	<x path="Int"/>
	<t path="snow.types.DisplayMode"/>
</f></snow_desktop_get_display_current_mode>
		<snow_desktop_get_display_mode line="191" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.types.DisplayMode"/>
</f></snow_desktop_get_display_mode>
		<snow_desktop_get_display_bounds line="192" static="1"><f a="">
	<x path="Int"/>
	<a>
		<y><x path="Int"/></y>
		<x><x path="Int"/></x>
		<width><x path="Int"/></width>
		<height><x path="Int"/></height>
	</a>
</f></snow_desktop_get_display_bounds>
		<snow_desktop_get_display_name line="193" static="1"><f a="">
	<x path="Int"/>
	<c path="String"/>
</f></snow_desktop_get_display_name>
		<init public="1" set="method" line="24" override="1"><f a=""><x path="Void"/></f></init>
		<process public="1" set="method" line="27" override="1"><f a=""><x path="Void"/></f></process>
		<destroy public="1" set="method" line="30" override="1"><f a=""><x path="Void"/></f></destroy>
		<listen public="1" set="method" line="33" override="1">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</listen>
		<unlisten public="1" set="method" line="36" override="1">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</unlisten>
		<create public="1" set="method" line="39" override="1"><f a="config:on_created">
	<t path="snow.types.WindowConfig"/>
	<f a="::">
		<t path="snow.types.WindowHandle"/>
		<x path="Int"/>
		<t path="snow.types.WindowConfig"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></create>
		<close public="1" set="method" line="43" override="1"><f a="window">
	<c path="snow.window.Window"/>
	<x path="Void"/>
</f></close>
		<show public="1" set="method" line="47" override="1"><f a="window">
	<c path="snow.window.Window"/>
	<x path="Void"/>
</f></show>
		<destroy_window public="1" set="method" line="51" override="1"><f a="window">
	<c path="snow.window.Window"/>
	<x path="Void"/>
</f></destroy_window>
		<update public="1" set="method" line="55" override="1"><f a="window">
	<c path="snow.window.Window"/>
	<x path="Void"/>
</f></update>
		<render public="1" set="method" line="59" override="1"><f a="window">
	<c path="snow.window.Window"/>
	<x path="Void"/>
</f></render>
		<swap public="1" set="method" line="63" override="1"><f a="window">
	<c path="snow.window.Window"/>
	<x path="Void"/>
</f></swap>
		<simple_message public="1" set="method" line="67" override="1"><f a="window:message:?title" v="::''">
	<c path="snow.window.Window"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></simple_message>
		<set_size public="1" set="method" line="71" override="1"><f a="window:w:h">
	<c path="snow.window.Window"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set_size>
		<set_position public="1" set="method" line="75" override="1"><f a="window:x:y">
	<c path="snow.window.Window"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set_position>
		<set_title public="1" set="method" line="79" override="1"><f a="window:title">
	<c path="snow.window.Window"/>
	<c path="String"/>
	<x path="Void"/>
</f></set_title>
		<set_max_size public="1" set="method" line="83" override="1"><f a="window:w:h">
	<c path="snow.window.Window"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set_max_size>
		<set_min_size public="1" set="method" line="87" override="1"><f a="window:w:h">
	<c path="snow.window.Window"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set_min_size>
		<fullscreen public="1" set="method" line="91" override="1"><f a="window:fullscreen:?fullscreen_desktop" v="::true">
	<c path="snow.window.Window"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></fullscreen>
		<bordered public="1" set="method" line="95" override="1"><f a="window:bordered">
	<c path="snow.window.Window"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></bordered>
		<grab public="1" set="method" line="99" override="1"><f a="window:grabbed">
	<c path="snow.window.Window"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></grab>
		<set_cursor_position public="1" set="method" line="103" override="1"><f a="window:x:y">
	<c path="snow.window.Window"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set_cursor_position>
		<system_lock_cursor public="1" set="method" line="111" override="1">
			<f a="enable">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Lock the OS cursor to the foreground window. This hides the cursor and prevents it from leaving, reporting relative coordinates.</haxe_doc>
		</system_lock_cursor>
		<system_enable_cursor public="1" set="method" line="116" override="1">
			<f a="enable">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Toggle the OS cursor. This is not window specific but system wide</haxe_doc>
		</system_enable_cursor>
		<system_enable_vsync public="1" set="method" line="121" override="1">
			<f a="enable">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Toggle vertical refresh. This is not window specific but context wide</haxe_doc>
		</system_enable_vsync>
		<display_count public="1" set="method" line="129" override="1"><f a=""><x path="Int"/></f></display_count>
		<display_mode_count public="1" set="method" line="133" override="1"><f a="display">
	<x path="Int"/>
	<x path="Int"/>
</f></display_mode_count>
		<display_native_mode public="1" set="method" line="137" override="1"><f a="display">
	<x path="Int"/>
	<t path="snow.types.DisplayMode"/>
</f></display_native_mode>
		<display_current_mode public="1" set="method" line="141" override="1"><f a="display">
	<x path="Int"/>
	<t path="snow.types.DisplayMode"/>
</f></display_current_mode>
		<display_mode public="1" set="method" line="145" override="1"><f a="display:mode_index">
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.types.DisplayMode"/>
</f></display_mode>
		<display_bounds public="1" set="method" line="149" override="1"><f a="display">
	<x path="Int"/>
	<a>
		<y><x path="Int"/></y>
		<x><x path="Int"/></x>
		<width><x path="Int"/></width>
		<height><x path="Int"/></height>
	</a>
</f></display_bounds>
		<display_name public="1" set="method" line="153" override="1"><f a="display">
	<x path="Int"/>
	<c path="String"/>
</f></display_name>
		<new public="1" set="method" line="17"><f a="_manager:_lib">
	<c path="snow.window.Windowing"/>
	<c path="snow.Snow"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.platform.native.window.sdl.WindowSystem" params="" file="/Users/sven/dev/snow/snow/platform/native/window/sdl/WindowSystem.hx">
		<extends path="snow.platform.native.window.WindowSystem"/>
		<new public="1" set="method" line="11"><f a="_manager:_lib">
	<c path="snow.window.Windowing"/>
	<c path="snow.Snow"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.platform.web.assets.psd.PSD" params="" file="/Users/sven/dev/snow/snow/platform/web/assets/psd/PSD.hx">
		<_PSD><d/></_PSD>
		<open public="1" set="method" line="18"><f a="_url:_psd_onload">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></open>
		<new public="1" set="method" line="14"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.platform.web.audio.AudioSystem" params="" file="/Users/sven/dev/snow/snow/platform/web/audio/AudioSystem.hx">
		<extends path="snow.audio.AudioSystemBinding"/>
		<init public="1" set="method" line="17" override="1"><f a=""><x path="Void"/></f></init>
		<process public="1" set="method" line="21" override="1"><f a=""><x path="Void"/></f></process>
		<destroy public="1" set="method" line="25" override="1"><f a=""><x path="Void"/></f></destroy>
		<suspend public="1" set="method" line="29" override="1"><f a=""><x path="Void"/></f></suspend>
		<resume public="1" set="method" line="33" override="1"><f a=""><x path="Void"/></f></resume>
		<new public="1" set="method" line="10"><f a="_manager:_lib">
	<c path="snow.audio.Audio"/>
	<c path="snow.Snow"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.platform.web.audio.Sound" params="" file="/Users/sven/dev/snow/snow/platform/web/audio/Sound.hx">
		<extends path="snow.audio.SoundBinding"/>
		<new public="1" set="method" line="8"><f a="_manager:_name">
	<c path="snow.audio.Audio"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.platform.web.audio.SoundStream" params="" file="/Users/sven/dev/snow/snow/platform/web/audio/SoundStream.hx">
		<extends path="snow.platform.native.audio.openal.Sound"/>
		<new public="1" set="method" line="8"><f a="_manager:_name">
	<c path="snow.audio.Audio"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.platform.web.audio.howlerjs.AudioSystem" params="" file="/Users/sven/dev/snow/snow/platform/web/audio/howlerjs/AudioSystem.hx">
		<extends path="snow.platform.web.audio.AudioSystem"/>
		<init public="1" set="method" line="8" override="1"><f a=""><x path="Void"/></f></init>
		<process public="1" set="method" line="12" override="1"><f a=""><x path="Void"/></f></process>
		<destroy public="1" set="method" line="16" override="1"><f a=""><x path="Void"/></f></destroy>
		<suspend public="1" set="method" line="20" override="1"><f a=""><x path="Void"/></f></suspend>
		<resume public="1" set="method" line="24" override="1"><f a=""><x path="Void"/></f></resume>
		<_on_end public="1" set="method" line="31"><f a="handle">
	<t path="snow.types.AudioHandle"/>
	<x path="Void"/>
</f></_on_end>
		<new public="1" set="method" line="6"><f a="_manager:_lib">
	<c path="snow.audio.Audio"/>
	<c path="snow.Snow"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.platform.web.audio.howlerjs.Howl" params="" file="/Users/sven/dev/snow/snow/platform/web/audio/howlerjs/Howl.hx" extern="1">
		<load public="1" set="method"><f a=""><c path="snow.platform.web.audio.howlerjs.Howl"/></f></load>
		<urls public="1" set="method"><f a="urls">
	<c path="Array"><c path="String"/></c>
	<d/>
</f></urls>
		<play public="1" set="method"><f a="?sprite:?callBack">
	<c path="String"/>
	<f a="?">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<c path="snow.platform.web.audio.howlerjs.Howl"/>
</f></play>
		<pause public="1" set="method"><f a="?id:?timerId">
	<c path="String"/>
	<c path="String"/>
	<c path="snow.platform.web.audio.howlerjs.Howl"/>
</f></pause>
		<stop public="1" set="method"><f a="?id:?timerId">
	<c path="String"/>
	<c path="String"/>
	<c path="snow.platform.web.audio.howlerjs.Howl"/>
</f></stop>
		<mute public="1" set="method"><f a="?id">
	<c path="String"/>
	<c path="snow.platform.web.audio.howlerjs.Howl"/>
</f></mute>
		<unmute public="1" set="method"><f a="?id">
	<c path="String"/>
	<c path="snow.platform.web.audio.howlerjs.Howl"/>
</f></unmute>
		<volume public="1" set="method"><f a="?vol:?id">
	<x path="Float"/>
	<c path="String"/>
	<d/>
</f></volume>
		<loop public="1" set="method"><f a="loop">
	<x path="Bool"/>
	<d/>
</f></loop>
		<sprite public="1" set="method"><f a="sprite">
	<t path="snow.platform.web.audio.howlerjs.SpriteParams"/>
	<d/>
</f></sprite>
		<pos public="1" set="method"><f a="?pos:?id">
	<x path="Float"/>
	<c path="String"/>
	<d/>
</f></pos>
		<pos3d public="1" set="method"><f a="?x:?y:?z:?id">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="String"/>
	<d/>
</f></pos3d>
		<fade public="1" set="method"><f a="from:to:len:?callBack:?id">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<f a=""><x path="Void"/></f>
	<c path="String"/>
	<c path="snow.platform.web.audio.howlerjs.Howl"/>
</f></fade>
		<fadeIn public="1" set="method"><f a="to:len:callBack">
	<x path="Float"/>
	<x path="Float"/>
	<f a=""><x path="Void"/></f>
	<c path="snow.platform.web.audio.howlerjs.Howl"/>
</f></fadeIn>
		<fadeOut public="1" set="method"><f a="to:len:calBack:?id">
	<x path="Float"/>
	<x path="Float"/>
	<f a=""><x path="Void"/></f>
	<c path="String"/>
	<c path="snow.platform.web.audio.howlerjs.Howl"/>
</f></fadeOut>
		<on public="1" set="method"><f a="event:fn">
	<c path="String"/>
	<d/>
	<c path="snow.platform.web.audio.howlerjs.Howl"/>
</f></on>
		<off public="1" set="method"><f a="event:fn">
	<c path="String"/>
	<d/>
	<c path="snow.platform.web.audio.howlerjs.Howl"/>
</f></off>
		<unload public="1" set="method"><f a=""><x path="Void"/></f></unload>
		<new public="1" set="method"><f a="o">
	<d/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":native"><e>"window.Howl"</e></m>
		</meta>
	</class>
	<typedef path="snow.platform.web.audio.howlerjs.SpriteParams" params="" file="/Users/sven/dev/snow/snow/platform/web/audio/howlerjs/Howl.hx" module="snow.platform.web.audio.howlerjs.Howl"><a>
	<offset>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</offset>
	<loop>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</loop>
	<duration>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</duration>
</a></typedef>
	<typedef path="snow.platform.web.audio.howlerjs.AudioParams" params="" file="/Users/sven/dev/snow/snow/platform/web/audio/howlerjs/Howl.hx" module="snow.platform.web.audio.howlerjs.Howl"><a>
	<volume>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</volume>
	<urls>
		<c path="Array"><c path="String"/></c>
		<meta><m n=":optional"/></meta>
	</urls>
	<src>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
	</src>
	<sprite>
		<d/>
		<meta><m n=":optional"/></meta>
	</sprite>
	<rate>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</rate>
	<pos3d>
		<c path="Array"><x path="Float"/></c>
		<meta><m n=":optional"/></meta>
	</pos3d>
	<onplay>
		<t path="Null"><f a=""><x path="Void"/></f></t>
		<meta><m n=":optional"/></meta>
	</onplay>
	<onpause>
		<t path="Null"><f a=""><x path="Void"/></f></t>
		<meta><m n=":optional"/></meta>
	</onpause>
	<onloaderror>
		<t path="Null"><f a=""><x path="Void"/></f></t>
		<meta><m n=":optional"/></meta>
	</onloaderror>
	<onload>
		<t path="Null"><f a=""><x path="Void"/></f></t>
		<meta><m n=":optional"/></meta>
	</onload>
	<onend>
		<t path="Null"><f a=""><x path="Void"/></f></t>
		<meta><m n=":optional"/></meta>
	</onend>
	<loop>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</loop>
	<format>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</format>
	<duration>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</duration>
	<buffer>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</buffer>
	<autoplay>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</autoplay>
</a></typedef>
	<class path="snow.platform.web.audio.howlerjs.Howler" params="" file="/Users/sven/dev/snow/snow/platform/web/audio/howlerjs/Howler.hx" extern="1">
		<volume public="1" set="method" static="1"><f a="vol">
	<x path="Float"/>
	<d/>
</f></volume>
		<mute public="1" set="method" static="1"><f a=""><c path="snow.platform.web.audio.howlerjs.Howler"/></f></mute>
		<unmute public="1" set="method" static="1"><f a=""><c path="snow.platform.web.audio.howlerjs.Howler"/></f></unmute>
		<meta>
			<m n=":keep"/>
			<m n=":native"><e>"window.Howler"</e></m>
		</meta>
	</class>
	<class path="snow.platform.web.audio.howlerjs.SoundStream" params="" file="/Users/sven/dev/snow/snow/platform/web/audio/howlerjs/SoundStream.hx">
		<extends path="snow.platform.web.audio.SoundStream"/>
		<new public="1" set="method" line="6"><f a="_manager:_name">
	<c path="snow.audio.Audio"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="snow.render.opengl.GL" params="" file="/Users/sven/dev/snow/snow/render/opengl/GL.hx"><c path="snow.platform.native.render.opengl.GL"/></typedef>
	<typedef path="snow.render.opengl.GLActiveInfo" params="" file="/Users/sven/dev/snow/snow/render/opengl/GL.hx" module="snow.render.opengl.GL"><t path="snow.platform.native.render.opengl.GLActiveInfo"/></typedef>
	<typedef path="snow.render.opengl.GLBuffer" params="" file="/Users/sven/dev/snow/snow/render/opengl/GL.hx" module="snow.render.opengl.GL"><c path="snow.platform.native.render.opengl.GLBuffer"/></typedef>
	<typedef path="snow.render.opengl.GLContextAttributes" params="" file="/Users/sven/dev/snow/snow/render/opengl/GL.hx" module="snow.render.opengl.GL"><t path="snow.platform.native.render.opengl.GLContextAttributes"/></typedef>
	<typedef path="snow.render.opengl.GLFramebuffer" params="" file="/Users/sven/dev/snow/snow/render/opengl/GL.hx" module="snow.render.opengl.GL"><x path="snow.platform.native.render.opengl.GLFramebuffer"/></typedef>
	<typedef path="snow.render.opengl.GLProgram" params="" file="/Users/sven/dev/snow/snow/render/opengl/GL.hx" module="snow.render.opengl.GL"><c path="snow.platform.native.render.opengl.GLProgram"/></typedef>
	<typedef path="snow.render.opengl.GLRenderbuffer" params="" file="/Users/sven/dev/snow/snow/render/opengl/GL.hx" module="snow.render.opengl.GL"><x path="snow.platform.native.render.opengl.GLRenderbuffer"/></typedef>
	<typedef path="snow.render.opengl.GLShader" params="" file="/Users/sven/dev/snow/snow/render/opengl/GL.hx" module="snow.render.opengl.GL"><c path="snow.platform.native.render.opengl.GLShader"/></typedef>
	<typedef path="snow.render.opengl.GLTexture" params="" file="/Users/sven/dev/snow/snow/render/opengl/GL.hx" module="snow.render.opengl.GL"><c path="snow.platform.native.render.opengl.GLTexture"/></typedef>
	<typedef path="snow.render.opengl.GLUniformLocation" params="" file="/Users/sven/dev/snow/snow/render/opengl/GL.hx" module="snow.render.opengl.GL"><t path="snow.platform.native.render.opengl.GLUniformLocation"/></typedef>
	<typedef path="snow.types.Key" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types"><c path="snow.input.Keycodes"/></typedef>
	<typedef path="snow.types.Scan" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types"><c path="snow.input.Scancodes"/></typedef>
	<typedef path="snow.types.AssetInfo" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<type>
				<c path="String"/>
				<haxe_doc>a convenience type indicator</haxe_doc>
			</type>
			<path>
				<c path="String"/>
				<haxe_doc>the location of the asset</haxe_doc>
			</path>
			<id>
				<c path="String"/>
				<haxe_doc>the asset id</haxe_doc>
			</id>
			<ext>
				<c path="String"/>
				<haxe_doc>the asset extension, if any</haxe_doc>
			</ext>
		</a>
		<haxe_doc>Information for a single asset</haxe_doc>
	</typedef>
	<enum path="snow.types.AssetType" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<bytes/>
		<text/>
		<image/>
		<audio/>
		<haxe_doc>A type to identify assets when stored as an Asset</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="snow.types.AssetBytesOptions" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<strict>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
			</strict>
			<onload>
				<t path="Null"><f a="">
	<c path="snow.assets.AssetBytes"/>
	<x path="Void"/>
</f></t>
				<meta><m n=":optional"/></meta>
			</onload>
			<async>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
			</async>
		</a>
		<haxe_doc>The options for an `AssetBytes` asset.
    Get assets from the `Assets` class, via `app.assets`</haxe_doc>
	</typedef>
	<typedef path="snow.types.AssetTextOptions" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<strict>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
			</strict>
			<onload>
				<t path="Null"><f a="">
	<c path="snow.assets.AssetText"/>
	<x path="Void"/>
</f></t>
				<meta><m n=":optional"/></meta>
			</onload>
			<async>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
			</async>
		</a>
		<haxe_doc>The options for an `AssetText` asset.
    Get assets from the `Assets` class, via `app.assets`</haxe_doc>
	</typedef>
	<typedef path="snow.types.AssetImageOptions" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<strict>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
			</strict>
			<onload>
				<t path="Null"><f a="">
	<c path="snow.assets.AssetImage"/>
	<x path="Void"/>
</f></t>
				<meta><m n=":optional"/></meta>
			</onload>
			<components>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
			</components>
			<bytes>
				<t path="snow.utils.ByteArray"/>
				<meta><m n=":optional"/></meta>
			</bytes>
		</a>
		<haxe_doc>The options for an `AssetImage` asset.
    Get assets from the `Assets` class, via `app.assets`</haxe_doc>
	</typedef>
	<typedef path="snow.types.AssetAudioOptions" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<type>
				<c path="String"/>
				<meta><m n=":optional"/></meta>
			</type>
			<strict>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
			</strict>
			<onload>
				<t path="Null"><f a="">
	<c path="snow.assets.AssetAudio"/>
	<x path="Void"/>
</f></t>
				<meta><m n=":optional"/></meta>
			</onload>
			<load>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
			</load>
		</a>
		<haxe_doc>The options for an `AssetAudio` asset</haxe_doc>
	</typedef>
	<typedef path="snow.types.SnowConfig" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<has_loop>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>whether or not the core should run a loop at all, default: true</haxe_doc>
			</has_loop>
			<config_runtime_path>
				<c path="String"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The default place to find the runtime config file, default: `config.json`</haxe_doc>
			</config_runtime_path>
			<config_custom_runtime>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If set, no default runtime config will be loaded (use `App.config` to load a config manually). default: false</haxe_doc>
			</config_custom_runtime>
			<config_custom_assets>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If set, no default asset list will be loaded (use `App.config` to load a config manually). default: false</haxe_doc>
			</config_custom_assets>
			<config_assets_path>
				<c path="String"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The default place to find the asset manifest file, default: `manifest`</haxe_doc>
			</config_assets_path>
		</a>
		<haxe_doc>Snow specific configurations, set from build config</haxe_doc>
	</typedef>
	<typedef path="snow.types.AppConfig" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<window>
				<t path="Null"><t path="snow.types.WindowConfig"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the window config for the default window, if `has_window` is true. default: see `WindowConfig` docs</haxe_doc>
			</window>
			<web>
				<t path="Null"><t path="snow.types.AppConfigWeb"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>config specific to the web target</haxe_doc>
			</web>
			<runtime>
				<d/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the user specific config, by default, read from a json file at runtime</haxe_doc>
			</runtime>
			<native>
				<t path="Null"><t path="snow.types.AppConfigNative"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>config specific to the web target</haxe_doc>
			</native>
			<has_window>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>whether or not to create and run a default window, default: true</haxe_doc>
			</has_window>
			<assets>
				<c path="Array"><t path="snow.types.AssetInfo"/></c>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the raw list of assets. use the app.assets from Snow for access to these. read from a manifest file by default</haxe_doc>
			</assets>
		</a>
		<haxe_doc>The runtime application config info</haxe_doc>
	</typedef>
	<typedef path="snow.types.AppConfigWeb" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types"><a><no_context_menu>
	<t path="Null"><x path="Bool"/></t>
	<meta><m n=":optional"/></meta>
	<haxe_doc>If true, right clicking will consume the event on the canvas. `event.preventDefault` is used. default: true</haxe_doc>
</no_context_menu></a></typedef>
	<typedef path="snow.types.AppConfigNative" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types"><a>
	<audio_buffer_length>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The default length of a single stream buffer in bytes. default:176400, This is ~1 sec in 16 bit mono.</haxe_doc>
	</audio_buffer_length>
	<audio_buffer_count>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The default number of audio buffers to use for a single stream. Set no less than 2, as it's a queue. See `Audio` docs. default:4</haxe_doc>
	</audio_buffer_count>
</a></typedef>
	<typedef path="snow.types.FileFilter" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types"><a>
	<extension>
		<c path="String"/>
		<haxe_doc>An extension for the filter. i.e `md`, `txt`, `png` or a special `*` for any file type.</haxe_doc>
	</extension>
	<desc>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>An optional description for this filter i.e `markdown files`, `text files`, `all files`</haxe_doc>
	</desc>
</a></typedef>
	<typedef path="snow.types.ImageInfo" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<width_actual>
				<x path="Int"/>
				<haxe_doc>The actual width, used when image is automatically padded to POT</haxe_doc>
			</width_actual>
			<width>
				<x path="Int"/>
				<haxe_doc>image width from source image</haxe_doc>
			</width>
			<id>
				<c path="String"/>
				<haxe_doc>source asset id</haxe_doc>
			</id>
			<height_actual>
				<x path="Int"/>
				<haxe_doc>The actual height, used when image is automatically padded to POT</haxe_doc>
			</height_actual>
			<height>
				<x path="Int"/>
				<haxe_doc>image height from source image</haxe_doc>
			</height>
			<data>
				<t path="snow.utils.UInt8Array"/>
				<haxe_doc>image data</haxe_doc>
			</data>
			<bpp_source>
				<x path="Int"/>
				<haxe_doc>source bits per pixel</haxe_doc>
			</bpp_source>
			<bpp>
				<x path="Int"/>
				<haxe_doc>used bits per pixel</haxe_doc>
			</bpp>
		</a>
		<haxe_doc>Information about an image file/data</haxe_doc>
	</typedef>
	<enum path="snow.types.AudioFormatType" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<unknown/>
		<ogg/>
		<wav/>
		<pcm/>
		<haxe_doc>The type of audio format</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="snow.types.AudioDataInfo" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<rate>
				<x path="Int"/>
				<haxe_doc>hz rate</haxe_doc>
			</rate>
			<length_pcm>
				<x path="Int"/>
				<haxe_doc>the pcm uncompressed raw length in bytes</haxe_doc>
			</length_pcm>
			<length>
				<x path="Int"/>
				<haxe_doc>the file length in bytes</haxe_doc>
			</length>
			<channels>
				<x path="Int"/>
				<haxe_doc>number of channels</haxe_doc>
			</channels>
			<bytes>
				<t path="snow.utils.ByteArray"/>
				<haxe_doc>sound raw data</haxe_doc>
			</bytes>
			<bits_per_sample>
				<x path="Int"/>
				<haxe_doc>bits per sample, 8 / 16</haxe_doc>
			</bits_per_sample>
			<bitrate>
				<x path="Int"/>
				<haxe_doc>sound bitrate</haxe_doc>
			</bitrate>
		</a>
		<haxe_doc>The platform specific implementation detail about the audio data</haxe_doc>
	</typedef>
	<typedef path="snow.types.AudioInfo" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<id>
				<c path="String"/>
				<haxe_doc>file source id</haxe_doc>
			</id>
			<handle>
				<t path="snow.types.AudioHandle"/>
				<haxe_doc>the platform audio handle for later manipulation</haxe_doc>
			</handle>
			<format>
				<e path="snow.types.AudioFormatType"/>
				<haxe_doc>format</haxe_doc>
			</format>
			<data>
				<t path="snow.types.AudioDataInfo"/>
				<haxe_doc>the platform audio data info</haxe_doc>
			</data>
		</a>
		<haxe_doc>Information about an audio file/data</haxe_doc>
	</typedef>
	<typedef path="snow.types.AudioDataBlob" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<complete>
				<x path="Bool"/>
				<haxe_doc>The data stored in this blob</haxe_doc>
			</complete>
			<bytes>
				<t path="snow.utils.ByteArray"/>
				<haxe_doc>True if the file has reached the end of the data in this blob</haxe_doc>
			</bytes>
		</a>
		<haxe_doc>Information about an audio portion requested via assets</haxe_doc>
	</typedef>
	<typedef path="snow.types.WindowConfig" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<y>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>window x at creation. Leave this alone to use the OS default.</haxe_doc>
			</y>
			<x>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>window y at creation. Leave this alone to use the OS default.</haxe_doc>
			</x>
			<width>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>window height at creation, default: 960</haxe_doc>
			</width>
			<title>
				<c path="String"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>window title, default: 'snow app'</haxe_doc>
			</title>
			<stencil_bits>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>create a stencil buffer at the specified bit depth (i.e `8` or `16` bit stencil buffer). default: 0</haxe_doc>
			</stencil_bits>
			<resizable>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>allow the window to be resized, default: true</haxe_doc>
			</resizable>
			<red_bits>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>set the number of red bits for the rendering to use. Unless you need to change this, don't. default: 8</haxe_doc>
			</red_bits>
			<no_input>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>disables input arriving at/from this window. default: false</haxe_doc>
			</no_input>
			<height>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>window width at creation, default: 640</haxe_doc>
			</height>
			<green_bits>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>set the number of green bits for the rendering to use. Unless you need to change this, don't. default: 8</haxe_doc>
			</green_bits>
			<fullscreen>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>create in fullscreen, default: false, `mobile` true</haxe_doc>
			</fullscreen>
			<depth_bits>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>create a depth buffer at the specified bit depth (i.e `0` or `16` bit depth buffer) default: 0</haxe_doc>
			</depth_bits>
			<borderless>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>create as a borderless window, default: false</haxe_doc>
			</borderless>
			<blue_bits>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>set the number of blue bits for the rendering to use. Unless you need to change this, don't. default: 8</haxe_doc>
			</blue_bits>
			<antialiasing>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>a value of `0`, `2`, `4`, `8` or other valid antialiasing flags. default: 0</haxe_doc>
			</antialiasing>
			<alpha_bits>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>set the number of alpha bits for the rendering to use. Unless you need to change this, don't. default: 8</haxe_doc>
			</alpha_bits>
		</a>
		<haxe_doc>Window configuration information for creating windows</haxe_doc>
	</typedef>
	<typedef path="snow.types.SystemEvent" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<window>
				<t path="Null"><t path="snow.types.WindowEvent"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If type is `window` this will be populated, otherwise null</haxe_doc>
			</window>
			<type>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type of system event this event is. SystemEventType</haxe_doc>
			</type>
			<input>
				<t path="Null"><t path="snow.types.InputEvent"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If type is `input` this will be populated, otherwise null</haxe_doc>
			</input>
			<file>
				<t path="Null"><t path="snow.types.FileEvent"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If type is `file` this will be populated, otherwise null</haxe_doc>
			</file>
		</a>
		<haxe_doc>A system event</haxe_doc>
	</typedef>
	<typedef path="snow.types.WindowEvent" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<window_id>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The window id from which this event originated</haxe_doc>
			</window_id>
			<type>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type of window event this was. Use WindowEventType</haxe_doc>
			</type>
			<timestamp>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The time in seconds that this event occured, useful for deltas</haxe_doc>
			</timestamp>
			<event>
				<d/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The raw platform event data, only useful if you are implementing
            a new platform or lack access to data from the system that snow does not expose</haxe_doc>
			</event>
		</a>
		<haxe_doc>A system window event</haxe_doc>
	</typedef>
	<typedef path="snow.types.FileEvent" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<type>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type of file watch event, modify/create/delete. Use FileEventType</haxe_doc>
			</type>
			<timestamp>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The time in seconds when this event was fired</haxe_doc>
			</timestamp>
			<path>
				<c path="String"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The absolute path that was notifying</haxe_doc>
			</path>
		</a>
		<haxe_doc>A system file watch event</haxe_doc>
	</typedef>
	<typedef path="snow.types.InputEvent" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<window_id>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The window id from which this event originated</haxe_doc>
			</window_id>
			<type>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type of input event this was. Use InputEventType</haxe_doc>
			</type>
			<timestamp>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The time in seconds that this event occured, useful for deltas</haxe_doc>
			</timestamp>
			<event>
				<d/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The raw platform event data, only useful if you are implementing
            a new platform or lack access to data from the system that snow does not expose</haxe_doc>
			</event>
		</a>
		<haxe_doc>A system input event</haxe_doc>
	</typedef>
	<typedef path="snow.types.DisplayMode" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<width><x path="Int"/></width>
			<refresh_rate><x path="Int"/></refresh_rate>
			<height><x path="Int"/></height>
			<format><x path="Int"/></format>
		</a>
		<haxe_doc>Information about a display mode</haxe_doc>
	</typedef>
	<typedef path="snow.types.WindowHandle" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<t path="Null"><x path="Float"/></t>
		<haxe_doc>A platform window handle</haxe_doc>
	</typedef>
	<typedef path="snow.types.AudioHandle" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<t path="Null"><x path="Float"/></t>
		<haxe_doc>A platform window handle</haxe_doc>
	</typedef>
	<enum path="snow.types.TextEventType" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<edit><haxe_doc>An edit text typing event</haxe_doc></edit>
		<input><haxe_doc>An input text typing event</haxe_doc></input>
		<haxe_doc>A text specific event event type</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="snow.types.GamepadDeviceEventType" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<device_added><haxe_doc>A device added event</haxe_doc></device_added>
		<device_removed><haxe_doc>A device removed event</haxe_doc></device_removed>
		<device_remapped><haxe_doc>A device was remapped</haxe_doc></device_remapped>
		<haxe_doc>A gamepad device event type</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="snow.types.ModState" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<shift>
				<x path="Bool"/>
				<haxe_doc>left or right shift key is down</haxe_doc>
			</shift>
			<rshift>
				<x path="Bool"/>
				<haxe_doc>right shift key is down</haxe_doc>
			</rshift>
			<rmeta>
				<x path="Bool"/>
				<haxe_doc>right windows/command key is down</haxe_doc>
			</rmeta>
			<rctrl>
				<x path="Bool"/>
				<haxe_doc>right ctrl key is down</haxe_doc>
			</rctrl>
			<ralt>
				<x path="Bool"/>
				<haxe_doc>right alt/option key is down</haxe_doc>
			</ralt>
			<num>
				<x path="Bool"/>
				<haxe_doc>numlock is enabled</haxe_doc>
			</num>
			<none>
				<x path="Bool"/>
				<haxe_doc>no modifiers are down</haxe_doc>
			</none>
			<mode>
				<x path="Bool"/>
				<haxe_doc>mode key is down</haxe_doc>
			</mode>
			<meta>
				<x path="Bool"/>
				<haxe_doc>left or right windows/command key is down</haxe_doc>
			</meta>
			<lshift>
				<x path="Bool"/>
				<haxe_doc>left shift key is down</haxe_doc>
			</lshift>
			<lmeta>
				<x path="Bool"/>
				<haxe_doc>left windows/command key is down</haxe_doc>
			</lmeta>
			<lctrl>
				<x path="Bool"/>
				<haxe_doc>left ctrl key is down</haxe_doc>
			</lctrl>
			<lalt>
				<x path="Bool"/>
				<haxe_doc>left alt/option key is down</haxe_doc>
			</lalt>
			<ctrl>
				<x path="Bool"/>
				<haxe_doc>left or right ctrl key is down</haxe_doc>
			</ctrl>
			<caps>
				<x path="Bool"/>
				<haxe_doc>capslock is enabled</haxe_doc>
			</caps>
			<alt>
				<x path="Bool"/>
				<haxe_doc>left or right alt/option key is down</haxe_doc>
			</alt>
		</a>
		<haxe_doc>Input modifier state</haxe_doc>
	</typedef>
	<class path="snow.types.SystemEventType" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<unknown public="1" get="inline" set="null" line="415" static="1">
			<x path="Int"/>
			<haxe_doc>An unknown system event</haxe_doc>
		</unknown>
		<init public="1" get="inline" set="null" line="417" static="1">
			<x path="Int"/>
			<haxe_doc>An internal system init event</haxe_doc>
		</init>
		<ready public="1" get="inline" set="null" line="419" static="1">
			<x path="Int"/>
			<haxe_doc>An internal system ready event</haxe_doc>
		</ready>
		<update public="1" get="inline" set="null" line="421" static="1">
			<x path="Int"/>
			<haxe_doc>An internal system update event</haxe_doc>
		</update>
		<shutdown public="1" get="inline" set="null" line="423" static="1">
			<x path="Int"/>
			<haxe_doc>An system shutdown event</haxe_doc>
		</shutdown>
		<window public="1" get="inline" set="null" line="425" static="1">
			<x path="Int"/>
			<haxe_doc>An system window event</haxe_doc>
		</window>
		<input public="1" get="inline" set="null" line="427" static="1">
			<x path="Int"/>
			<haxe_doc>An system input event</haxe_doc>
		</input>
		<quit public="1" get="inline" set="null" line="432" static="1">
			<x path="Int"/>
			<haxe_doc>An system quit event. Initiated by user, can be cancelled/ignored</haxe_doc>
		</quit>
		<app_terminating public="1" get="inline" set="null" line="434" static="1">
			<x path="Int"/>
			<haxe_doc>An system terminating event, called by the OS (mobile specific)</haxe_doc>
		</app_terminating>
		<app_lowmemory public="1" get="inline" set="null" line="436" static="1">
			<x path="Int"/>
			<haxe_doc>An system low memory event, clear memory if you can. Called by the OS (mobile specific)</haxe_doc>
		</app_lowmemory>
		<app_willenterbackground public="1" get="inline" set="null" line="438" static="1">
			<x path="Int"/>
			<haxe_doc>An event for just before the app enters the background, called by the OS (mobile specific)</haxe_doc>
		</app_willenterbackground>
		<app_didenterbackground public="1" get="inline" set="null" line="440" static="1">
			<x path="Int"/>
			<haxe_doc>An event for when the app enters the background, called by the OS (mobile specific)</haxe_doc>
		</app_didenterbackground>
		<app_willenterforeground public="1" get="inline" set="null" line="442" static="1">
			<x path="Int"/>
			<haxe_doc>An event for just before the app enters the foreground, called by the OS (mobile specific)</haxe_doc>
		</app_willenterforeground>
		<app_didenterforeground public="1" get="inline" set="null" line="444" static="1">
			<x path="Int"/>
			<haxe_doc>An event for when the app enters the foreground, called by the OS (mobile specific)</haxe_doc>
		</app_didenterforeground>
		<file public="1" get="inline" set="null" line="446" static="1">
			<x path="Int"/>
			<haxe_doc>An event for when the a file watch notification occurs</haxe_doc>
		</file>
		<names line="448" static="1"><c path="Array"><c path="String"/></c></names>
		<to_string public="1" set="method" line="455" static="1"><f a="_type">
	<x path="Int"/>
	<c path="String"/>
</f></to_string>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.types.WindowEventType" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<unknown public="1" get="inline" set="null" line="468" static="1">
			<x path="Int"/>
			<haxe_doc>An unknown window event</haxe_doc>
		</unknown>
		<created public="1" get="inline" set="null" line="470" static="1">
			<x path="Int"/>
			<haxe_doc>A window is created</haxe_doc>
		</created>
		<shown public="1" get="inline" set="null" line="472" static="1">
			<x path="Int"/>
			<haxe_doc>A window is shown</haxe_doc>
		</shown>
		<hidden public="1" get="inline" set="null" line="474" static="1">
			<x path="Int"/>
			<haxe_doc>A window is hidden</haxe_doc>
		</hidden>
		<exposed public="1" get="inline" set="null" line="476" static="1">
			<x path="Int"/>
			<haxe_doc>A window is exposed</haxe_doc>
		</exposed>
		<moved public="1" get="inline" set="null" line="478" static="1">
			<x path="Int"/>
			<haxe_doc>A window is moved</haxe_doc>
		</moved>
		<resized public="1" get="inline" set="null" line="480" static="1">
			<x path="Int"/>
			<haxe_doc>A window is resized, by the user or code.</haxe_doc>
		</resized>
		<size_changed public="1" get="inline" set="null" line="482" static="1">
			<x path="Int"/>
			<haxe_doc>A window is resized, by the OS or internals.</haxe_doc>
		</size_changed>
		<minimized public="1" get="inline" set="null" line="484" static="1">
			<x path="Int"/>
			<haxe_doc>A window is minimized</haxe_doc>
		</minimized>
		<maximized public="1" get="inline" set="null" line="486" static="1">
			<x path="Int"/>
			<haxe_doc>A window is maximized</haxe_doc>
		</maximized>
		<restored public="1" get="inline" set="null" line="488" static="1">
			<x path="Int"/>
			<haxe_doc>A window is restored</haxe_doc>
		</restored>
		<enter public="1" get="inline" set="null" line="490" static="1">
			<x path="Int"/>
			<haxe_doc>A window is entered by a mouse</haxe_doc>
		</enter>
		<leave public="1" get="inline" set="null" line="492" static="1">
			<x path="Int"/>
			<haxe_doc>A window is left by a mouse</haxe_doc>
		</leave>
		<focus_gained public="1" get="inline" set="null" line="494" static="1">
			<x path="Int"/>
			<haxe_doc>A window has gained focus</haxe_doc>
		</focus_gained>
		<focus_lost public="1" get="inline" set="null" line="496" static="1">
			<x path="Int"/>
			<haxe_doc>A window has lost focus</haxe_doc>
		</focus_lost>
		<close public="1" get="inline" set="null" line="498" static="1">
			<x path="Int"/>
			<haxe_doc>A window is being closed/hidden</haxe_doc>
		</close>
		<destroy public="1" get="inline" set="null" line="500" static="1">
			<x path="Int"/>
			<haxe_doc>A window is being destroyed</haxe_doc>
		</destroy>
		<names line="502" static="1"><c path="Array"><c path="String"/></c></names>
		<to_string public="1" set="method" line="509" static="1"><f a="_type">
	<x path="Int"/>
	<c path="String"/>
</f></to_string>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.types.InputEventType" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<unknown public="1" get="inline" set="null" line="522" static="1">
			<x path="Int"/>
			<haxe_doc>An unknown input event</haxe_doc>
		</unknown>
		<key public="1" get="inline" set="null" line="524" static="1">
			<x path="Int"/>
			<haxe_doc>An keyboard input event</haxe_doc>
		</key>
		<mouse public="1" get="inline" set="null" line="526" static="1">
			<x path="Int"/>
			<haxe_doc>An mouse input event</haxe_doc>
		</mouse>
		<touch public="1" get="inline" set="null" line="528" static="1">
			<x path="Int"/>
			<haxe_doc>An touch input event</haxe_doc>
		</touch>
		<joystick public="1" get="inline" set="null" line="530" static="1">
			<x path="Int"/>
			<haxe_doc>An joystick input event. On mobile, accellerometer is a joystick (for now)</haxe_doc>
		</joystick>
		<controller public="1" get="inline" set="null" line="532" static="1">
			<x path="Int"/>
			<haxe_doc>An controller input event. Use these instead of joystick on desktop.</haxe_doc>
		</controller>
		<names line="534" static="1"><c path="Array"><c path="String"/></c></names>
		<to_string public="1" set="method" line="538" static="1"><f a="_type">
	<x path="Int"/>
	<c path="String"/>
</f></to_string>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.types.FileEventType" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<unknown public="1" get="inline" set="null" line="551" static="1">
			<x path="Int"/>
			<haxe_doc>An unknown watch event</haxe_doc>
		</unknown>
		<modify public="1" get="inline" set="null" line="553" static="1">
			<x path="Int"/>
			<haxe_doc>An event for when the a file is modified</haxe_doc>
		</modify>
		<remove public="1" get="inline" set="null" line="555" static="1">
			<x path="Int"/>
			<haxe_doc>An event for when the a file is removed</haxe_doc>
		</remove>
		<create public="1" get="inline" set="null" line="557" static="1">
			<x path="Int"/>
			<haxe_doc>An event for when the a file is created</haxe_doc>
		</create>
		<drop public="1" get="inline" set="null" line="559" static="1">
			<x path="Int"/>
			<haxe_doc>An event for when the a file is dropped on a window</haxe_doc>
		</drop>
		<names line="561" static="1"><c path="Array"><c path="String"/></c></names>
		<to_string public="1" set="method" line="565" static="1"><f a="_type">
	<x path="Int"/>
	<c path="String"/>
</f></to_string>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<typedef path="snow.utils._AbstractClass.StringMap" params="T" file="/Users/sven/dev/snow/snow/utils/AbstractClass.hx" private="1" module="snow.utils.AbstractClass"><x path="Map">
	<c path="String"/>
	<c path="snow.utils._AbstractClass.StringMap.T"/>
</x></typedef>
	<class path="snow.utils.AbstractClassBuilder" params="" file="/Users/sven/dev/snow/snow/utils/AbstractClass.hx" module="snow.utils.AbstractClass"><meta>
	<m n=":keep"/>
	<m n=":noCompletion"/>
</meta></class>
	<typedef path="snow.utils.ArrayBuffer" params="" file="/Users/sven/dev/snow/snow/utils/ArrayBuffer.hx"><t path="snow.platform.native.utils.ArrayBuffer"/></typedef>
	<typedef path="snow.utils.ArrayBufferView" params="" file="/Users/sven/dev/snow/snow/utils/ArrayBufferView.hx"><c path="snow.platform.native.utils.ArrayBufferView"/></typedef>
	<typedef path="snow.utils.ByteArray" params="" file="/Users/sven/dev/snow/snow/utils/ByteArray.hx"><c path="snow.platform.native.utils.ByteArray"/></typedef>
	<typedef path="snow.utils.Float32Array" params="" file="/Users/sven/dev/snow/snow/utils/Float32Array.hx"><c path="snow.platform.native.utils.Float32Array"/></typedef>
	<typedef path="snow.utils.Int16Array" params="" file="/Users/sven/dev/snow/snow/utils/Int16Array.hx"><c path="snow.platform.native.utils.Int16Array"/></typedef>
	<typedef path="snow.utils.Int32Array" params="" file="/Users/sven/dev/snow/snow/utils/Int32Array.hx"><c path="snow.platform.native.utils.Int32Array"/></typedef>
	<typedef path="snow.utils.Int8Array" params="" file="/Users/sven/dev/snow/snow/utils/Int8Array.hx"><c path="snow.platform.native.utils.Int8Array"/></typedef>
	<class path="snow.utils.Timer" params="" file="/Users/sven/dev/snow/snow/utils/Timer.hx">
		<running_timers line="8" static="1"><c path="Array"><c path="snow.utils.Timer"/></c></running_timers>
		<measure public="1" params="T" set="method" line="23" static="1"><f a="f:?pos" v=":null">
	<f a=""><c path="measure.T"/></f>
	<t path="haxe.PosInfos"/>
	<c path="measure.T"/>
</f></measure>
		<update public="1" set="method" line="46" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>* @private</haxe_doc>
		</update>
		<delay public="1" set="method" line="62" static="1"><f a="_time:_f">
	<x path="Float"/>
	<f a=""><x path="Void"/></f>
	<c path="snow.utils.Timer"/>
</f></delay>
		<stamp public="1" set="method" line="75" static="1"><f a=""><x path="Float"/></f></stamp>
		<time public="1">
			<x path="Float"/>
			<meta><m n=":noCompletion"/></meta>
		</time>
		<fire_at public="1">
			<x path="Float"/>
			<meta><m n=":noCompletion"/></meta>
		</fire_at>
		<running public="1">
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</running>
		<run public="1" set="dynamic" line="31"><f a=""><x path="Void"/></f></run>
		<stop public="1" set="method" line="33"><f a=""><x path="Void"/></f></stop>
		<new public="1" set="method" line="14"><f a="_time">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="snow.utils.UInt16Array" params="" file="/Users/sven/dev/snow/snow/utils/UInt16Array.hx"><c path="snow.platform.native.utils.UInt16Array"/></typedef>
	<typedef path="snow.utils.UInt32Array" params="" file="/Users/sven/dev/snow/snow/utils/UInt32Array.hx"><c path="snow.platform.native.utils.UInt32Array"/></typedef>
	<typedef path="snow.utils.UInt8Array" params="" file="/Users/sven/dev/snow/snow/utils/UInt8Array.hx"><c path="snow.platform.native.utils.UInt8Array"/></typedef>
	<typedef path="snow.utils.UInt8ClampedArray" params="" file="/Users/sven/dev/snow/snow/utils/UInt8ClampedArray.hx"><c path="snow.platform.native.utils.UInt8ClampedArray"/></typedef>
	<enum path="snow.utils.format.png.Color" params="" file="/Users/sven/dev/snow/snow/utils/format/png/Data.hx" module="snow.utils.format.png.Data">
		<ColGrey a="alpha"><x path="Bool"/></ColGrey>
		<ColTrue a="alpha"><x path="Bool"/></ColTrue>
		<ColIndexed/>
	</enum>
	<typedef path="snow.utils.format.png.Header" params="" file="/Users/sven/dev/snow/snow/utils/format/png/Data.hx" module="snow.utils.format.png.Data"><a>
	<width><x path="Int"/></width>
	<interlaced><x path="Bool"/></interlaced>
	<height><x path="Int"/></height>
	<color><e path="snow.utils.format.png.Color"/></color>
	<colbits><x path="Int"/></colbits>
</a></typedef>
	<enum path="snow.utils.format.png.Chunk" params="" file="/Users/sven/dev/snow/snow/utils/format/png/Data.hx" module="snow.utils.format.png.Data">
		<CEnd/>
		<CHeader a="h"><t path="snow.utils.format.png.Header"/></CHeader>
		<CData a="b"><c path="haxe.io.Bytes"/></CData>
		<CPalette a="b"><c path="haxe.io.Bytes"/></CPalette>
		<CUnknown a="id:data">
			<c path="String"/>
			<c path="haxe.io.Bytes"/>
		</CUnknown>
	</enum>
	<typedef path="snow.utils.format.png.Data" params="" file="/Users/sven/dev/snow/snow/utils/format/png/Data.hx"><c path="List"><e path="snow.utils.format.png.Chunk"/></c></typedef>
	<class path="snow.utils.format.png.Reader" params="" file="/Users/sven/dev/snow/snow/utils/format/png/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<checkCRC public="1"><x path="Bool"/></checkCRC>
		<read public="1" set="method" line="41"><f a=""><t path="snow.utils.format.png.Data"/></f></read>
		<readHeader set="method" line="56"><f a="i">
	<c path="haxe.io.Input"/>
	<t path="snow.utils.format.png.Header"/>
</f></readHeader>
		<readChunk set="method" line="91"><f a=""><e path="snow.utils.format.png.Chunk"/></f></readChunk>
		<new public="1" set="method" line="35"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.utils.format.png.Tools" params="" file="/Users/sven/dev/snow/snow/utils/format/png/Tools.hx">
		<getHeader public="1" set="method" line="35" static="1">
			<f a="d">
				<t path="snow.utils.format.png.Data"/>
				<t path="snow.utils.format.png.Header"/>
			</f>
			<haxe_doc>Returns the PNG header informations. Throws an exception if no header found.</haxe_doc>
		</getHeader>
		<getPalette public="1" set="method" line="47" static="1">
			<f a="d">
				<t path="snow.utils.format.png.Data"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Return the PNG palette colors, or null if no palette chunk was found</haxe_doc>
		</getPalette>
		<filter get="inline" set="null" line="56" static="1"><f a="data:x:y:stride:prev:p:?numChannels" v="::::::4">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></filter>
		<reverseBytes public="1" set="method" line="69" static="1">
			<f a="b">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Converts from BGRA to ARGB and the other way by reversing bytes.</haxe_doc>
		</reverseBytes>
		<extractGrey public="1" set="method" line="106" static="1">
			<f a="d">
				<t path="snow.utils.format.png.Data"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":noDebug"/></meta>
			<haxe_doc>Decode the greyscale PNG data and apply filters, extracting only the grey channel if alpha is present.</haxe_doc>
		</extractGrey>
		<extract32 public="1" set="method" line="205" static="1">
			<f a="d:?bytes" v=":null">
				<t path="snow.utils.format.png.Data"/>
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":noDebug"/></meta>
			<haxe_doc>Decode the PNG data and apply filters. By default this will output BGRA low-endian format. You can use the [reverseBytes] function to inverse the bytes to ARGB big-endian format.</haxe_doc>
		</extract32>
		<buildGrey public="1" set="method" line="584" static="1">
			<f a="width:height:data">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<t path="snow.utils.format.png.Data"/>
			</f>
			<haxe_doc>Creates PNG data from bytes that contains one bytes (grey values) for each pixel.</haxe_doc>
		</buildGrey>
		<buildRGB public="1" set="method" line="603" static="1">
			<f a="width:height:data">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<t path="snow.utils.format.png.Data"/>
			</f>
			<haxe_doc>Creates PNG data from bytes that contains three bytes (R,G and B values) for each pixel.</haxe_doc>
		</buildRGB>
		<build32ARGB public="1" set="method" line="626" static="1">
			<f a="width:height:data">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<t path="snow.utils.format.png.Data"/>
			</f>
			<haxe_doc>Creates PNG data from bytes that contains four bytes in ARGB format for each pixel.</haxe_doc>
		</build32ARGB>
		<build32BGRA public="1" set="method" line="650" static="1">
			<f a="width:height:data">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<t path="snow.utils.format.png.Data"/>
			</f>
			<haxe_doc>Creates PNG data from bytes that contains four bytes in BGRA format for each pixel.</haxe_doc>
		</build32BGRA>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.utils.format.png.Writer" params="" file="/Users/sven/dev/snow/snow/utils/format/png/Writer.hx">
		<o><c path="haxe.io.Output"/></o>
		<write public="1" set="method" line="39"><f a="png">
	<t path="snow.utils.format.png.Data"/>
	<x path="Void"/>
</f></write>
		<writeChunk set="method" line="75"><f a="id:data">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></writeChunk>
		<new public="1" set="method" line="34"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.utils.format.tools.Adler32" params="" file="/Users/sven/dev/snow/snow/utils/format/tools/Adler32.hx">
		<read public="1" set="method" line="54" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="snow.utils.format.tools.Adler32"/>
</f></read>
		<a1><x path="Int"/></a1>
		<a2><x path="Int"/></a2>
		<update public="1" set="method" line="39"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<equals public="1" set="method" line="50"><f a="a">
	<c path="snow.utils.format.tools.Adler32"/>
	<x path="Bool"/>
</f></equals>
		<new public="1" set="method" line="34"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.utils.format.tools.Deflate" params="" file="/Users/sven/dev/snow/snow/utils/format/tools/Deflate.hx">
		<run public="1" set="method" line="31" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<meta><m n=":keep"/></meta>
	</class>
	<enum path="snow.utils.format.tools.Huffman" params="" file="/Users/sven/dev/snow/snow/utils/format/tools/Huffman.hx">
		<Found a="i"><x path="Int"/></Found>
		<NeedBit a="left:right">
			<e path="snow.utils.format.tools.Huffman"/>
			<e path="snow.utils.format.tools.Huffman"/>
		</NeedBit>
		<NeedBits a="n:table">
			<x path="Int"/>
			<c path="Array"><e path="snow.utils.format.tools.Huffman"/></c>
		</NeedBits>
	</enum>
	<class path="snow.utils.format.tools.HuffTools" params="" file="/Users/sven/dev/snow/snow/utils/format/tools/Huffman.hx" module="snow.utils.format.tools.Huffman">
		<treeDepth set="method" line="44"><f a="t">
	<e path="snow.utils.format.tools.Huffman"/>
	<x path="Int"/>
</f></treeDepth>
		<treeCompress set="method" line="55"><f a="t">
	<e path="snow.utils.format.tools.Huffman"/>
	<e path="snow.utils.format.tools.Huffman"/>
</f></treeCompress>
		<treeWalk set="method" line="72"><f a="table:p:cd:d:t">
	<c path="Array"><e path="snow.utils.format.tools.Huffman"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="snow.utils.format.tools.Huffman"/>
	<x path="Void"/>
</f></treeWalk>
		<treeMake set="method" line="85"><f a="bits:maxbits:v:len">
	<x path="Map">
		<x path="Int"/>
		<x path="Int"/>
	</x>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="snow.utils.format.tools.Huffman"/>
</f></treeMake>
		<make public="1" set="method" line="95"><f a="lengths:pos:nlengths:maxbits">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="snow.utils.format.tools.Huffman"/>
</f></make>
		<new public="1" set="method" line="41"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.utils.format.tools.Inflate" params="" file="/Users/sven/dev/snow/snow/utils/format/tools/Inflate.hx">
		<run public="1" set="method" line="31" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.utils.format.tools._InflateImpl.Window" params="" file="/Users/sven/dev/snow/snow/utils/format/tools/InflateImpl.hx" private="1" module="snow.utils.format.tools.InflateImpl">
		<SIZE public="1" get="inline" set="null" line="36" static="1"><x path="Int"/></SIZE>
		<BUFSIZE public="1" get="inline" set="null" line="37" static="1"><x path="Int"/></BUFSIZE>
		<buffer public="1"><c path="haxe.io.Bytes"/></buffer>
		<pos public="1"><x path="Int"/></pos>
		<crc><c path="snow.utils.format.tools.Adler32"/></crc>
		<slide public="1" set="method" line="49"><f a=""><x path="Void"/></f></slide>
		<addBytes public="1" set="method" line="57"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte public="1" set="method" line="63"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<getLastChar public="1" set="method" line="69"><f a=""><x path="Int"/></f></getLastChar>
		<available public="1" set="method" line="73"><f a=""><x path="Int"/></f></available>
		<checksum public="1" set="method" line="77"><f a=""><c path="snow.utils.format.tools.Adler32"/></f></checksum>
		<new public="1" set="method" line="43"><f a="hasCrc">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<enum path="snow.utils.format.tools._InflateImpl.State" params="" file="/Users/sven/dev/snow/snow/utils/format/tools/InflateImpl.hx" private="1" module="snow.utils.format.tools.InflateImpl">
		<Head/>
		<Block/>
		<CData/>
		<Flat/>
		<Crc/>
		<Dist/>
		<DistOne/>
		<Done/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="snow.utils.format.tools.InflateImpl" params="" file="/Users/sven/dev/snow/snow/utils/format/tools/InflateImpl.hx">
		<LEN_EXTRA_BITS_TBL line="97" static="1"><c path="Array"><x path="Int"/></c></LEN_EXTRA_BITS_TBL>
		<LEN_BASE_VAL_TBL line="98" static="1"><c path="Array"><x path="Int"/></c></LEN_BASE_VAL_TBL>
		<DIST_EXTRA_BITS_TBL line="99" static="1"><c path="Array"><x path="Int"/></c></DIST_EXTRA_BITS_TBL>
		<DIST_BASE_VAL_TBL line="100" static="1"><c path="Array"><x path="Int"/></c></DIST_BASE_VAL_TBL>
		<CODE_LENGTHS_POS line="101" static="1"><c path="Array"><x path="Int"/></c></CODE_LENGTHS_POS>
		<FIXED_HUFFMAN line="119" static="1"><e path="snow.utils.format.tools.Huffman"/></FIXED_HUFFMAN>
		<run public="1" set="method" line="368" static="1"><f a="i:?bufsize" v=":65536">
	<c path="haxe.io.Input"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<nbits><x path="Int"/></nbits>
		<bits><x path="Int"/></bits>
		<state><e path="snow.utils.format.tools._InflateImpl.State"/></state>
		<final><x path="Bool"/></final>
		<huffman><e path="snow.utils.format.tools.Huffman"/></huffman>
		<huffdist><t path="Null"><e path="snow.utils.format.tools.Huffman"/></t></huffdist>
		<htools><c path="snow.utils.format.tools.HuffTools"/></htools>
		<len><x path="Int"/></len>
		<dist><x path="Int"/></dist>
		<needed><x path="Int"/></needed>
		<output><c path="haxe.io.Bytes"/></output>
		<outpos><x path="Int"/></outpos>
		<input><c path="haxe.io.Input"/></input>
		<lengths><c path="Array"><x path="Int"/></c></lengths>
		<window><c path="snow.utils.format.tools._InflateImpl.Window"/></window>
		<buildFixedHuffman set="method" line="141"><f a=""><e path="snow.utils.format.tools.Huffman"/></f></buildFixedHuffman>
		<readBytes public="1" set="method" line="151"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<getBits set="method" line="161"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getBits>
		<getBit set="method" line="172"><f a=""><x path="Bool"/></f></getBit>
		<getRevBits set="method" line="183"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getRevBits>
		<resetBits set="method" line="192"><f a=""><x path="Void"/></f></resetBits>
		<addBytes set="method" line="197"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte set="method" line="204"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<addDistOne set="method" line="211"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></addDistOne>
		<addDist set="method" line="217"><f a="d:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addDist>
		<applyHuffman set="method" line="221"><f a="h">
	<e path="snow.utils.format.tools.Huffman"/>
	<x path="Int"/>
</f></applyHuffman>
		<inflateLengths set="method" line="229"><f a="a:max">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></inflateLengths>
		<inflateLoop set="method" line="258"><f a=""><x path="Bool"/></f></inflateLoop>
		<new public="1" set="method" line="121"><f a="i:?header:?crc" v=":true:true">
	<c path="haxe.io.Input"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.utils.format.tools.MemoryBytes" params="" file="/Users/sven/dev/snow/snow/utils/format/tools/MemoryBytes.hx" extern="1">
		<make public="1" get="inline" set="null" line="6" static="1"><f a="pos">
	<x path="Int"/>
	<c path="snow.utils.format.tools.MemoryBytes"/>
</f></make>
		<getPos public="1" get="inline" set="null" line="10"><f a=""><x path="Int"/></f></getPos>
		<meta>
			<m n=":keep"/>
			<m n=":native"><e>"Int"</e></m>
		</meta>
	</class>
	<class path="snow.window.Window" params="" file="/Users/sven/dev/snow/snow/window/Window.hx">
		<id public="1">
			<x path="Int"/>
			<haxe_doc>the window id, for tracking events to each window</haxe_doc>
		</id>
		<manager public="1">
			<c path="snow.window.Windowing"/>
			<haxe_doc>the manager this window belongs to</haxe_doc>
		</manager>
		<asked_config public="1">
			<t path="snow.types.WindowConfig"/>
			<haxe_doc>the requested window config</haxe_doc>
		</asked_config>
		<config public="1">
			<t path="snow.types.WindowConfig"/>
			<haxe_doc>the actual returned window config</haxe_doc>
		</config>
		<handle public="1">
			<t path="snow.types.WindowHandle"/>
			<haxe_doc>the native window handle</haxe_doc>
		</handle>
		<onevent public="1">
			<f a="">
				<t path="snow.types.WindowEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>the window event handler callback</haxe_doc>
		</onevent>
		<onrender public="1">
			<f a="">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<haxe_doc>the window render handler callback</haxe_doc>
		</onrender>
		<title public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The window title `(read/write)`</haxe_doc>
		</title>
		<bordered public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The window bordered state `(read/write)`</haxe_doc>
		</bordered>
		<grab public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The window grab state `(read/write)`</haxe_doc>
		</grab>
		<fullscreen public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The window fullscreen state `(read/write)`</haxe_doc>
		</fullscreen>
		<x public="1" set="accessor">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The window position `(read/write)`</haxe_doc>
		</x>
		<y public="1" set="accessor">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
		</y>
		<width public="1" set="accessor">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
		</width>
		<height public="1" set="accessor">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
		</height>
		<max_size public="1" get="accessor" set="accessor">
			<a>
				<y><x path="Int"/></y>
				<x><x path="Int"/></x>
			</a>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The window maximum size `(read/write)`</haxe_doc>
		</max_size>
		<min_size public="1" get="accessor" set="accessor">
			<a>
				<y><x path="Int"/></y>
				<x><x path="Int"/></x>
			</a>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The window minimum size `(read/write)`</haxe_doc>
		</min_size>
		<fullscreen_desktop public="1">
			<x path="Bool"/>
			<haxe_doc>set this for fullscreen desktop mode, i.e created at the full desktop resolution</haxe_doc>
		</fullscreen_desktop>
		<auto_swap public="1">
			<x path="Bool"/>
			<haxe_doc>set this if you want to control when a window calls swap()</haxe_doc>
		</auto_swap>
		<auto_render public="1">
			<x path="Bool"/>
			<haxe_doc>set this if you want to control when a window calls render()</haxe_doc>
		</auto_render>
		<closed public="1">
			<x path="Bool"/>
			<haxe_doc>A flag for whether this window is open or closed</haxe_doc>
		</closed>
		<minimized><x path="Bool"/></minimized>
		<internal_position><x path="Bool"/></internal_position>
		<internal_resize><x path="Bool"/></internal_resize>
		<on_window_created set="method" line="90"><f a="_handle:_id:_config">
	<t path="snow.types.WindowHandle"/>
	<x path="Int"/>
	<t path="snow.types.WindowConfig"/>
	<x path="Void"/>
</f></on_window_created>
		<on_event public="1" set="method" line="131">
			<f a="_event">
				<t path="snow.types.WindowEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</on_event>
		<update public="1" set="method" line="183">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</update>
		<render public="1" set="method" line="193">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called for you automatically, unless auto_render is disabled.</haxe_doc>
		</render>
		<swap public="1" set="method" line="230">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Swap the back buffer of the window, call after rendering to update the window view</haxe_doc>
		</swap>
		<destroy public="1" set="method" line="241">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Destroy the window. To recreate it create must be used, show will not work.</haxe_doc>
		</destroy>
		<close public="1" set="method" line="258">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the window, hiding it (not destroying it). Calling show() will unhide it.</haxe_doc>
		</close>
		<show public="1" set="method" line="271">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Show the window, unhiding it. If destroyed, nothing happens.</haxe_doc>
		</show>
		<simple_message public="1" set="method" line="284">
			<f a="message:?title" v=":''">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Display a cross platform message on this window</haxe_doc>
		</simple_message>
		<get_fullscreen set="method" line="294"><f a=""><x path="Bool"/></f></get_fullscreen>
		<set_fullscreen set="method" line="301"><f a="_enable">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_fullscreen>
		<get_bordered set="method" line="311"><f a=""><x path="Bool"/></f></get_bordered>
		<get_grab set="method" line="317"><f a=""><x path="Bool"/></f></get_grab>
		<get_max_size set="method" line="323"><f a=""><a>
	<y><x path="Int"/></y>
	<x><x path="Int"/></x>
</a></f></get_max_size>
		<get_min_size set="method" line="329"><f a=""><a>
	<y><x path="Int"/></y>
	<x><x path="Int"/></x>
</a></f></get_min_size>
		<get_title set="method" line="335"><f a=""><c path="String"/></f></get_title>
		<set_title set="method" line="341"><f a="_title">
	<c path="String"/>
	<c path="String"/>
</f></set_title>
		<set_x set="method" line="351"><f a="_x">
	<x path="Int"/>
	<x path="Int"/>
</f></set_x>
		<set_y set="method" line="363"><f a="_y">
	<x path="Int"/>
	<x path="Int"/>
</f></set_y>
		<set_width set="method" line="375"><f a="_width">
	<x path="Int"/>
	<x path="Int"/>
</f></set_width>
		<set_height set="method" line="387"><f a="_height">
	<x path="Int"/>
	<x path="Int"/>
</f></set_height>
		<set_cursor_position public="1" set="method" line="399"><f a="_x:_y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set_cursor_position>
		<set_position public="1" set="method" line="407"><f a="_x:_y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set_position>
		<set_size public="1" set="method" line="425"><f a="_width:_height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set_size>
		<set_max_size set="method" line="442"><f a="_size">
	<a>
		<y><x path="Int"/></y>
		<x><x path="Int"/></x>
	</a>
	<a>
		<y><x path="Int"/></y>
		<x><x path="Int"/></x>
	</a>
</f></set_max_size>
		<set_min_size set="method" line="452"><f a="_size">
	<a>
		<y><x path="Int"/></y>
		<x><x path="Int"/></x>
	</a>
	<a>
		<y><x path="Int"/></y>
		<x><x path="Int"/></x>
	</a>
</f></set_min_size>
		<set_bordered set="method" line="462"><f a="_bordered">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bordered>
		<set_grab set="method" line="472"><f a="_grab">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_grab>
		<new public="1" set="method" line="68"><f a="_manager:_config">
	<c path="snow.window.Windowing"/>
	<t path="snow.types.WindowConfig"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="snow.window.WindowSystem" params="" file="/Users/sven/dev/snow/snow/window/WindowSystem.hx">
		<c path="snow.platform.native.window.sdl.WindowSystem"/>
		<meta><m n=":noCompletion"/></meta>
	</typedef>
	<class path="snow.window.Windowing" params="" file="/Users/sven/dev/snow/snow/window/Windowing.hx">
		<window_list public="1">
			<x path="Map">
				<x path="Int"/>
				<c path="snow.window.Window"/>
			</x>
			<haxe_doc>The list of windows in this manager</haxe_doc>
		</window_list>
		<window_handles public="1">
			<c path="snow.window._Windowing.WindowHandleMap"/>
			<haxe_doc>The list of window handles, pointing to id's in the `window_list`</haxe_doc>
		</window_handles>
		<window_count public="1">
			<x path="Int"/>
			<haxe_doc>The number of windows in this manager</haxe_doc>
		</window_count>
		<lib public="1">
			<c path="snow.Snow"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>access to snow for subsystems/windows</haxe_doc>
		</lib>
		<platform public="1">
			<t path="snow.window.WindowSystem"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>The concrete implementation of the window system</haxe_doc>
		</platform>
		<create public="1" set="method" line="43">
			<f a="_config">
				<t path="snow.types.WindowConfig"/>
				<c path="snow.window.Window"/>
			</f>
			<haxe_doc>Create a window with the given config.</haxe_doc>
		</create>
		<remove public="1" set="method" line="67">
			<f a="_window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Remove a window from the system, stopping events, etc.
            Called from window.destroy()! Don't use manually unless manually controlling the list.</haxe_doc>
		</remove>
		<window_from_handle public="1" set="method" line="82">
			<f a="_handle">
				<t path="snow.types.WindowHandle"/>
				<c path="snow.window.Window"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Get a window instance from an window handle.</haxe_doc>
		</window_from_handle>
		<window_from_id public="1" set="method" line="94">
			<f a="_id">
				<x path="Int"/>
				<c path="snow.window.Window"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Get a window instance from an ID.</haxe_doc>
		</window_from_id>
		<enable_vsync public="1" set="method" line="103">
			<f a="_enable">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Toggle vertical refresh. This is not window specific but context wide</haxe_doc>
		</enable_vsync>
		<enable_cursor public="1" set="method" line="110">
			<f a="_enable">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Toggle the OS cursor. This is not window specific but application wide, when inside a window, the OS cursor is hidden.</haxe_doc>
		</enable_cursor>
		<enable_cursor_lock public="1" set="method" line="117">
			<f a="_enable">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Lock the OS cursor to the foreground window. This hides the cursor and prevents it from leaving, reporting relative coordinates.</haxe_doc>
		</enable_cursor_lock>
		<display_count public="1" set="method" line="128">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Get the number of displays present</haxe_doc>
		</display_count>
		<display_mode_count public="1" set="method" line="133">
			<f a="display">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Get the number of display modes present</haxe_doc>
		</display_mode_count>
		<display_native_mode public="1" set="method" line="138">
			<f a="display">
				<x path="Int"/>
				<t path="snow.types.DisplayMode"/>
			</f>
			<haxe_doc>Get the native mode information of the display by index</haxe_doc>
		</display_native_mode>
		<display_current_mode public="1" set="method" line="143">
			<f a="display">
				<x path="Int"/>
				<t path="snow.types.DisplayMode"/>
			</f>
			<haxe_doc>Get the current mode information of the display by index</haxe_doc>
		</display_current_mode>
		<display_mode public="1" set="method" line="148">
			<f a="display:mode_index">
				<x path="Int"/>
				<x path="Int"/>
				<t path="snow.types.DisplayMode"/>
			</f>
			<haxe_doc>Get the information from a specific mode index, the index is obtained by iterating with a `display_mode_count` as the loop value</haxe_doc>
		</display_mode>
		<display_bounds public="1" set="method" line="153">
			<f a="display">
				<x path="Int"/>
				<a>
					<y><x path="Int"/></y>
					<x><x path="Int"/></x>
					<width><x path="Int"/></width>
					<height><x path="Int"/></height>
				</a>
			</f>
			<haxe_doc>Get the bounds of the display by index</haxe_doc>
		</display_bounds>
		<display_name public="1" set="method" line="158">
			<f a="display">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the name of the display by index, where available</haxe_doc>
		</display_name>
		<on_event public="1" set="method" line="166">
			<f a="_event">
				<t path="snow.types.SystemEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Called by Snow when a system event is dispatched</haxe_doc>
		</on_event>
		<update public="1" set="method" line="183">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Called by Snow, process any window handling</haxe_doc>
		</update>
		<destroy public="1" set="method" line="200">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Called by Snow, destroy everything.</haxe_doc>
		</destroy>
		<new public="1" set="method" line="28">
			<f a="_lib">
				<c path="snow.Snow"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>constructed internally, use `app.windowing`</haxe_doc>
		</new>
		<haxe_doc>A window manager, accessed via `app.window`</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.window._Windowing.WindowHandleMap" params="" file="/Users/sven/dev/snow/snow/window/Windowing.hx" private="1" module="snow.window.Windowing">
		<extends path="haxe.ds.BalancedTree">
			<t path="snow.types.WindowHandle"/>
			<x path="Int"/>
		</extends>
		<compare set="method" line="218" override="1"><f a="k1:k2">
	<t path="snow.types.WindowHandle"/>
	<t path="snow.types.WindowHandle"/>
	<x path="Int"/>
</f></compare>
		<new public="1" set="method" line="216"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="sys.FileStat" params="" file="/usr/lib/haxe/std/sys/FileStat.hx">
		<a>
			<uid>
				<x path="Int"/>
				<haxe_doc>the user id for the file</haxe_doc>
			</uid>
			<size>
				<x path="Int"/>
				<haxe_doc>the size of the file</haxe_doc>
			</size>
			<rdev><x path="Int"/></rdev>
			<nlink><x path="Int"/></nlink>
			<mtime>
				<c path="Date"/>
				<haxe_doc>the last modification time for the file</haxe_doc>
			</mtime>
			<mode><x path="Int"/></mode>
			<ino><x path="Int"/></ino>
			<gid>
				<x path="Int"/>
				<haxe_doc>the user group id for the file</haxe_doc>
			</gid>
			<dev><x path="Int"/></dev>
			<ctime>
				<c path="Date"/>
				<haxe_doc>the creation time for the file</haxe_doc>
			</ctime>
			<atime>
				<c path="Date"/>
				<haxe_doc>the last access time for the file (when enabled by the file system)</haxe_doc>
			</atime>
		</a>
		<haxe_doc>File informations, as given by [sys.FileSystem.stat]</haxe_doc>
	</typedef>
	<class path="sys.FileSystem" params="" file="/usr/lib/haxe/std/cpp/_std/sys/FileSystem.hx">
		<fullPath public="1" set="method" line="52" static="1">
			<f a="relPath">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the full path of the file or directory specified by `relPath`,
		which is relative to the current working directory.

		If `relPath` is null, the result is unspecified.</haxe_doc>
		</fullPath>
		<sys_exists line="93" static="1"><f a="">
	<c path="String"/>
	<x path="Bool"/>
</f></sys_exists>
		<file_full_path line="101" static="1"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></file_full_path>
		<haxe_doc>This class allows you to get information about the files and directories.

	See `sys.io.File` for the complementary file API.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
</haxe>